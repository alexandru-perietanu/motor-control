

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jan 09 11:47:59 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4431 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataBANK0
    81  0011DC                     __pidataBANK0:
    82                           	opt callstack 0
    83                           
    84                           ;initializer for _prevTimer0ReloadValue
    85  0011DC  EC77               	dw	60535
    86                           
    87                           ;initializer for _timer0ReloadValue
    88  0011DE  EC77               	dw	60535
    89                           
    90                           ;initializer for _timer5ReloadValue
    91  0011E0  0BDB               	dw	3035
    92                           
    93                           ;initializer for _prevAdcPercent
    94  0011E2  0065               	dw	101
    95                           
    96                           ;initializer for _adcPercent
    97  0011E4  0041               	dw	65
    98                           
    99                           ;initializer for _PrevADRESH
   100  0011E6  41                 	db	65
   101                           
   102                           ;initializer for _d1
   103  0011E7  01                 	db	1
   104                           
   105                           ;initializer for _sinusIndex3
   106  0011E8  AA                 	db	170
   107                           
   108                           ;initializer for _sinusIndex2
   109  0011E9  55                 	db	85
   110                           
   111                           ;initializer for _maxADCVal
   112  0011EA  00FF               	dw	255
   113                           
   114                           	psect	mediumconst
   115  003AE8                     __pmediumconst:
   116                           	opt callstack 0
   117  003AE8  00                 	db	0
   118  003AE9                     _sinusValues:
   119                           	opt callstack 0
   120  003AE9  03C0               	dw	960
   121  003AEB  03D6               	dw	982
   122  003AED  03EC               	dw	1004
   123  003AEF  0402               	dw	1026
   124  003AF1  0419               	dw	1049
   125  003AF3  042F               	dw	1071
   126  003AF5  0445               	dw	1093
   127  003AF7  045B               	dw	1115
   128  003AF9  0471               	dw	1137
   129  003AFB  0488               	dw	1160
   130  003AFD  049E               	dw	1182
   131  003AFF  04BB               	dw	1211
   132  003B01  04D2               	dw	1234
   133  003B03  04E0               	dw	1248
   134  003B05  04F7               	dw	1271
   135  003B07  050D               	dw	1293
   136  003B09  0523               	dw	1315
   137  003B0B  0539               	dw	1337
   138  003B0D  054F               	dw	1359
   139  003B0F  0566               	dw	1382
   140  003B11  057C               	dw	1404
   141  003B13  058B               	dw	1419
   142  003B15  05A1               	dw	1441
   143  003B17  05B7               	dw	1463
   144  003B19  05C6               	dw	1478
   145  003B1B  05DC               	dw	1500
   146  003B1D  05EB               	dw	1515
   147  003B1F  0601               	dw	1537
   148  003B21  0610               	dw	1552
   149  003B23  0626               	dw	1574
   150  003B25  0635               	dw	1589
   151  003B27  0644               	dw	1604
   152  003B29  065A               	dw	1626
   153  003B2B  0669               	dw	1641
   154  003B2D  0677               	dw	1655
   155  003B2F  0686               	dw	1670
   156  003B31  0695               	dw	1685
   157  003B33  06A4               	dw	1700
   158  003B35  06B3               	dw	1715
   159  003B37  06C1               	dw	1729
   160  003B39  06C9               	dw	1737
   161  003B3B  06D8               	dw	1752
   162  003B3D  06E6               	dw	1766
   163  003B3F  06EE               	dw	1774
   164  003B41  06FD               	dw	1789
   165  003B43  0704               	dw	1796
   166  003B45  0713               	dw	1811
   167  003B47  071A               	dw	1818
   168  003B49  0722               	dw	1826
   169  003B4B  0729               	dw	1833
   170  003B4D  0730               	dw	1840
   171  003B4F  0738               	dw	1848
   172  003B51  073F               	dw	1855
   173  003B53  0747               	dw	1863
   174  003B55  074E               	dw	1870
   175  003B57  0755               	dw	1877
   176  003B59  0755               	dw	1877
   177  003B5B  075D               	dw	1885
   178  003B5D  075D               	dw	1885
   179  003B5F  0764               	dw	1892
   180  003B61  0764               	dw	1892
   181  003B63  0764               	dw	1892
   182  003B65  0764               	dw	1892
   183  003B67  0764               	dw	1892
   184  003B69  0764               	dw	1892
   185  003B6B  0764               	dw	1892
   186  003B6D  0764               	dw	1892
   187  003B6F  0764               	dw	1892
   188  003B71  0764               	dw	1892
   189  003B73  075D               	dw	1885
   190  003B75  075D               	dw	1885
   191  003B77  0755               	dw	1877
   192  003B79  0755               	dw	1877
   193  003B7B  074E               	dw	1870
   194  003B7D  0747               	dw	1863
   195  003B7F  0747               	dw	1863
   196  003B81  073F               	dw	1855
   197  003B83  0738               	dw	1848
   198  003B85  0730               	dw	1840
   199  003B87  0729               	dw	1833
   200  003B89  071A               	dw	1818
   201  003B8B  0713               	dw	1811
   202  003B8D  070B               	dw	1803
   203  003B8F  06FD               	dw	1789
   204  003B91  06F5               	dw	1781
   205  003B93  06E6               	dw	1766
   206  003B95  06DF               	dw	1759
   207  003B97  06D0               	dw	1744
   208  003B99  06C1               	dw	1729
   209  003B9B  06BA               	dw	1722
   210  003B9D  06AB               	dw	1707
   211  003B9F  069C               	dw	1692
   212  003BA1  068E               	dw	1678
   213  003BA3  067F               	dw	1663
   214  003BA5  0670               	dw	1648
   215  003BA7  0661               	dw	1633
   216  003BA9  064B               	dw	1611
   217  003BAB  063C               	dw	1596
   218  003BAD  062D               	dw	1581
   219  003BAF  061F               	dw	1567
   220  003BB1  0608               	dw	1544
   221  003BB3  05FA               	dw	1530
   222  003BB5  05E3               	dw	1507
   223  003BB7  05D5               	dw	1493
   224  003BB9  05BE               	dw	1470
   225  003BBB  05A8               	dw	1448
   226  003BBD  0599               	dw	1433
   227  003BBF  0583               	dw	1411
   228  003BC1  056D               	dw	1389
   229  003BC3  0557               	dw	1367
   230  003BC5  0548               	dw	1352
   231  003BC7  0532               	dw	1330
   232  003BC9  051C               	dw	1308
   233  003BCB  0505               	dw	1285
   234  003BCD  04EF               	dw	1263
   235  003BCF  04D9               	dw	1241
   236  003BD1  04C3               	dw	1219
   237  003BD3  04AD               	dw	1197
   238  003BD5  0496               	dw	1174
   239  003BD7  0480               	dw	1152
   240  003BD9  046A               	dw	1130
   241  003BDB  0454               	dw	1108
   242  003BDD  043E               	dw	1086
   243  003BDF  0427               	dw	1063
   244  003BE1  040A               	dw	1034
   245  003BE3  03F4               	dw	1012
   246  003BE5  03DD               	dw	989
   247  003BE7  03C7               	dw	967
   248  003BE9  03B1               	dw	945
   249  003BEB  039B               	dw	923
   250  003BED  0385               	dw	901
   251  003BEF  036E               	dw	878
   252  003BF1  0351               	dw	849
   253  003BF3  033B               	dw	827
   254  003BF5  0324               	dw	804
   255  003BF7  030E               	dw	782
   256  003BF9  02F8               	dw	760
   257  003BFB  02E2               	dw	738
   258  003BFD  02CC               	dw	716
   259  003BFF  02B5               	dw	693
   260  003C01  029F               	dw	671
   261  003C03  0289               	dw	649
   262  003C05  0273               	dw	627
   263  003C07  025D               	dw	605
   264  003C09  0246               	dw	582
   265  003C0B  0230               	dw	560
   266  003C0D  0221               	dw	545
   267  003C0F  020B               	dw	523
   268  003C11  01F5               	dw	501
   269  003C13  01DF               	dw	479
   270  003C15  01D0               	dw	464
   271  003C17  01BA               	dw	442
   272  003C19  01A4               	dw	420
   273  003C1B  0195               	dw	405
   274  003C1D  017F               	dw	383
   275  003C1F  0170               	dw	368
   276  003C21  015A               	dw	346
   277  003C23  014B               	dw	331
   278  003C25  013C               	dw	316
   279  003C27  012D               	dw	301
   280  003C29  0117               	dw	279
   281  003C2B  0108               	dw	264
   282  003C2D  00F9               	dw	249
   283  003C2F  00EB               	dw	235
   284  003C31  00DC               	dw	220
   285  003C33  00CD               	dw	205
   286  003C35  00BE               	dw	190
   287  003C37  00B7               	dw	183
   288  003C39  00A8               	dw	168
   289  003C3B  0099               	dw	153
   290  003C3D  0092               	dw	146
   291  003C3F  0083               	dw	131
   292  003C41  007C               	dw	124
   293  003C43  006D               	dw	109
   294  003C45  0065               	dw	101
   295  003C47  005E               	dw	94
   296  003C49  004F               	dw	79
   297  003C4B  0048               	dw	72
   298  003C4D  0040               	dw	64
   299  003C4F  0039               	dw	57
   300  003C51  0032               	dw	50
   301  003C53  0032               	dw	50
   302  003C55  002A               	dw	42
   303  003C57  0023               	dw	35
   304  003C59  0023               	dw	35
   305  003C5B  001B               	dw	27
   306  003C5D  001B               	dw	27
   307  003C5F  0014               	dw	20
   308  003C61  0014               	dw	20
   309  003C63  0014               	dw	20
   310  003C65  0014               	dw	20
   311  003C67  0014               	dw	20
   312  003C69  0014               	dw	20
   313  003C6B  0014               	dw	20
   314  003C6D  0014               	dw	20
   315  003C6F  0014               	dw	20
   316  003C71  0014               	dw	20
   317  003C73  001B               	dw	27
   318  003C75  001B               	dw	27
   319  003C77  0023               	dw	35
   320  003C79  0023               	dw	35
   321  003C7B  002A               	dw	42
   322  003C7D  0032               	dw	50
   323  003C7F  0039               	dw	57
   324  003C81  0040               	dw	64
   325  003C83  0048               	dw	72
   326  003C85  004F               	dw	79
   327  003C87  0057               	dw	87
   328  003C89  005E               	dw	94
   329  003C8B  0065               	dw	101
   330  003C8D  0074               	dw	116
   331  003C8F  007C               	dw	124
   332  003C91  008A               	dw	138
   333  003C93  0092               	dw	146
   334  003C95  00A1               	dw	161
   335  003C97  00AF               	dw	175
   336  003C99  00B7               	dw	183
   337  003C9B  00C6               	dw	198
   338  003C9D  00D4               	dw	212
   339  003C9F  00E3               	dw	227
   340  003CA1  00F2               	dw	242
   341  003CA3  0101               	dw	257
   342  003CA5  0110               	dw	272
   343  003CA7  011E               	dw	286
   344  003CA9  0135               	dw	309
   345  003CAB  0143               	dw	323
   346  003CAD  0152               	dw	338
   347  003CAF  0168               	dw	360
   348  003CB1  0177               	dw	375
   349  003CB3  018D               	dw	397
   350  003CB5  019C               	dw	412
   351  003CB7  01B2               	dw	434
   352  003CB9  01C1               	dw	449
   353  003CBB  01D7               	dw	471
   354  003CBD  01EE               	dw	494
   355  003CBF  01FC               	dw	508
   356  003CC1  0213               	dw	531
   357  003CC3  0229               	dw	553
   358  003CC5  023F               	dw	575
   359  003CC7  0255               	dw	597
   360  003CC9  026B               	dw	619
   361  003CCB  0282               	dw	642
   362  003CCD  0298               	dw	664
   363  003CCF  02A7               	dw	679
   364  003CD1  02BD               	dw	701
   365  003CD3  02DA               	dw	730
   366  003CD5  02F1               	dw	753
   367  003CD7  0307               	dw	775
   368  003CD9  031D               	dw	797
   369  003CDB  0333               	dw	819
   370  003CDD  0349               	dw	841
   371  003CDF  0360               	dw	864
   372  003CE1  0376               	dw	886
   373  003CE3  038C               	dw	908
   374  003CE5  03A2               	dw	930
   375  003CE7  03B8               	dw	952
   376  003CE9                     __end_of_sinusValues:
   377                           	opt callstack 0
   378  003CE9                     _timer0PreloadValues:
   379                           	opt callstack 0
   380  003CE9  ECEC               	dw	60652
   381  003CEB  F675               	dw	63093
   382  003CED  F9A3               	dw	63907
   383  003CEF  FB3A               	dw	64314
   384  003CF1  FC2E               	dw	64558
   385  003CF3  FCD1               	dw	64721
   386  003CF5  FD45               	dw	64837
   387  003CF7  FD9C               	dw	64924
   388  003CF9  FDE0               	dw	64992
   389  003CFB  FE16               	dw	65046
   390  003CFD  FE43               	dw	65091
   391  003CFF  FE68               	dw	65128
   392  003D01  FE87               	dw	65159
   393  003D03  FEA2               	dw	65186
   394  003D05  FEB9               	dw	65209
   395  003D07  FECD               	dw	65229
   396  003D09  FEDF               	dw	65247
   397  003D0B  FEEF               	dw	65263
   398  003D0D  FEFE               	dw	65278
   399  003D0F  FF0A               	dw	65290
   400  003D11  FF16               	dw	65302
   401  003D13  FF21               	dw	65313
   402  003D15  FF2A               	dw	65322
   403  003D17  FF33               	dw	65331
   404  003D19  FF3B               	dw	65339
   405  003D1B  FF43               	dw	65347
   406  003D1D  FF4A               	dw	65354
   407  003D1F  FF50               	dw	65360
   408  003D21  FF56               	dw	65366
   409  003D23  FF5C               	dw	65372
   410  003D25  FF61               	dw	65377
   411  003D27  FF66               	dw	65382
   412  003D29  FF6B               	dw	65387
   413  003D2B  FF6F               	dw	65391
   414  003D2D  FF73               	dw	65395
   415  003D2F  FF77               	dw	65399
   416  003D31  FF7B               	dw	65403
   417  003D33  FF7E               	dw	65406
   418  003D35  FF81               	dw	65409
   419  003D37  FF84               	dw	65412
   420  003D39  FF87               	dw	65415
   421  003D3B  FF8A               	dw	65418
   422  003D3D  FF8D               	dw	65421
   423  003D3F  FF90               	dw	65424
   424  003D41  FF92               	dw	65426
   425  003D43  FF94               	dw	65428
   426  003D45  FF97               	dw	65431
   427  003D47  FF99               	dw	65433
   428  003D49  FF9B               	dw	65435
   429  003D4B  FF9D               	dw	65437
   430  003D4D  FF9F               	dw	65439
   431  003D4F  FFA1               	dw	65441
   432  003D51  FFA2               	dw	65442
   433  003D53  FFA4               	dw	65444
   434  003D55  FFA6               	dw	65446
   435  003D57  FFA7               	dw	65447
   436  003D59  FFA9               	dw	65449
   437  003D5B  FFAA               	dw	65450
   438  003D5D  FFAC               	dw	65452
   439  003D5F  FFAD               	dw	65453
   440  003D61  FFAE               	dw	65454
   441  003D63  FFB0               	dw	65456
   442  003D65  FFB1               	dw	65457
   443  003D67  FFB2               	dw	65458
   444  003D69  FFB3               	dw	65459
   445  003D6B  FFB5               	dw	65461
   446  003D6D  FFB6               	dw	65462
   447  003D6F  FFB7               	dw	65463
   448  003D71  FFB8               	dw	65464
   449  003D73  FFB9               	dw	65465
   450  003D75  FFBA               	dw	65466
   451  003D77  FFBB               	dw	65467
   452  003D79  FFBC               	dw	65468
   453  003D7B  FFBD               	dw	65469
   454  003D7D  FFBD               	dw	65469
   455  003D7F  FFBE               	dw	65470
   456  003D81  FFBF               	dw	65471
   457  003D83  FFC0               	dw	65472
   458  003D85  FFC1               	dw	65473
   459  003D87  FFC1               	dw	65473
   460  003D89  FFC2               	dw	65474
   461  003D8B  FFC3               	dw	65475
   462  003D8D  FFC4               	dw	65476
   463  003D8F  FFC4               	dw	65476
   464  003D91  FFC5               	dw	65477
   465  003D93  FFC6               	dw	65478
   466  003D95  FFC6               	dw	65478
   467  003D97  FFC7               	dw	65479
   468  003D99  FFC8               	dw	65480
   469  003D9B  FFC8               	dw	65480
   470  003D9D  FFC9               	dw	65481
   471  003D9F  FFC9               	dw	65481
   472  003DA1  FFCA               	dw	65482
   473  003DA3  FFCB               	dw	65483
   474  003DA5  FFCB               	dw	65483
   475  003DA7  FFCC               	dw	65484
   476  003DA9  FFCC               	dw	65484
   477  003DAB  FFCD               	dw	65485
   478  003DAD  FFCD               	dw	65485
   479  003DAF  FFCE               	dw	65486
   480  003DB1                     __end_of_timer0PreloadValues:
   481                           	opt callstack 0
   482  003DB1                     _digits:
   483                           	opt callstack 0
   484  003DB1  30                 	db	48
   485  003DB2  31                 	db	49
   486  003DB3  32                 	db	50
   487  003DB4  33                 	db	51
   488  003DB5  34                 	db	52
   489  003DB6  35                 	db	53
   490  003DB7  36                 	db	54
   491  003DB8  37                 	db	55
   492  003DB9  38                 	db	56
   493  003DBA  39                 	db	57
   494  003DBB                     __end_of_digits:
   495                           	opt callstack 0
   496  0000                     _TMR5	set	3975
   497  0000                     _PORTDbits	set	3971
   498  0000                     _PORTCbits	set	3970
   499  0000                     _TRISDbits	set	3989
   500  0000                     _TRISCbits	set	3988
   501  0000                     _PDC2L	set	3957
   502  0000                     _PDC2H	set	3956
   503  0000                     _PDC1L	set	3959
   504  0000                     _PDC1H	set	3958
   505  0000                     _PORTAbits	set	3968
   506  0000                     _TRISAbits	set	3986
   507  0000                     _ADCHSbits	set	3993
   508  0000                     _ADCON3bits	set	3994
   509  0000                     _OVDCONS	set	3946
   510  0000                     _OVDCOND	set	3947
   511  0000                     _PDC0L	set	3961
   512  0000                     _PDC0H	set	3960
   513  0000                     _PTPERL	set	3963
   514  0000                     _PTPERH	set	3962
   515  0000                     _PWMCON1bits	set	3950
   516  0000                     _PWMCON0bits	set	3951
   517  0000                     _PTCON1bits	set	3966
   518  0000                     _PTCON0bits	set	3967
   519  0000                     _PORTB	set	3969
   520  0000                     _TRISB	set	3987
   521  0000                     _LATB	set	3978
   522  0000                     _TMR1	set	4046
   523  0000                     _PIR3bits	set	4004
   524  0000                     _ADRESH	set	4036
   525  0000                     _PIR1bits	set	3998
   526  0000                     _PIE3bits	set	4003
   527  0000                     _T5CONbits	set	4023
   528  0000                     _T1CONbits	set	4045
   529  0000                     _PIE1bits	set	3997
   530  0000                     _ANSEL0bits	set	4024
   531  0000                     _ADCON2bits	set	4032
   532  0000                     _ADCON1	set	4033
   533  0000                     _ADCON0bits	set	4034
   534  0000                     _TMR0	set	4054
   535  0000                     _T0CONbits	set	4053
   536  0000                     _INTCON2bits	set	4081
   537  0000                     _INTCONbits	set	4082
   538  003DBB                     STR_1:
   539  003DBB  25                 	db	37
   540  003DBC  64                 	db	100	;'d'
   541  003DBD  00                 	db	0
   542                           
   543                           ; #config settings
   544  003DBE  00                 	db	0	; dummy byte at the end
   545  0000                     
   546                           	psect	cinit
   547  000FDC                     __pcinit:
   548                           	opt callstack 0
   549  000FDC                     start_initialization:
   550                           	opt callstack 0
   551  000FDC                     __initialization:
   552                           	opt callstack 0
   553                           
   554                           ; Initialize objects allocated to BANK0 (16 bytes)
   555                           ; load TBLPTR registers with __pidataBANK0
   556  000FDC  0EDC               	movlw	low __pidataBANK0
   557  000FDE  6EF6               	movwf	tblptrl,c
   558  000FE0  0E11               	movlw	high __pidataBANK0
   559  000FE2  6EF7               	movwf	tblptrh,c
   560  000FE4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   561  000FE6  6EF8               	movwf	tblptru,c
   562  000FE8  EE00  F0CB         	lfsr	0,__pdataBANK0
   563  000FEC  EE10 F010          	lfsr	1,16
   564  000FF0                     copy_data0:
   565  000FF0  0009               	tblrd		*+
   566  000FF2  CFF5 FFEE          	movff	tablat,postinc0
   567  000FF6  50E5               	movf	postdec1,w,c
   568  000FF8  50E1               	movf	fsr1l,w,c
   569  000FFA  E1FA               	bnz	copy_data0
   570                           
   571                           ; Clear objects allocated to BANK0 (47 bytes)
   572  000FFC  EE00  F09C         	lfsr	0,__pbssBANK0
   573  001000  0E2F               	movlw	47
   574  001002                     clear_0:
   575  001002  6AEE               	clrf	postinc0,c
   576  001004  06E8               	decf	wreg,f,c
   577  001006  E1FD               	bnz	clear_0
   578                           
   579                           ; Clear objects allocated to COMRAM (4 bytes)
   580  001008  6A5A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   581  00100A  6A59               	clrf	(__pbssCOMRAM+2)& (0+255),c
   582  00100C  6A58               	clrf	(__pbssCOMRAM+1)& (0+255),c
   583  00100E  6A57               	clrf	__pbssCOMRAM& (0+255),c
   584  001010                     end_of_initialization:
   585                           	opt callstack 0
   586  001010                     __end_of__initialization:
   587                           	opt callstack 0
   588  001010  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   589  001012  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   590  001014  0E00               	movlw	low (__Lmediumconst shr (0+16))
   591  001016  6EF8               	movwf	tblptru,c
   592  001018  0100               	movlb	0
   593  00101A  EF4A  F000         	goto	_main	;jump to C main() function
   594                           
   595                           	psect	bssCOMRAM
   596  000057                     __pbssCOMRAM:
   597                           	opt callstack 0
   598  000057                     _prec:
   599                           	opt callstack 0
   600  000057                     	ds	2
   601  000059                     _flags:
   602                           	opt callstack 0
   603  000059                     	ds	2
   604                           
   605                           	psect	bssBANK0
   606  00009C                     __pbssBANK0:
   607                           	opt callstack 0
   608  00009C                     _dutyCycle:
   609                           	opt callstack 0
   610  00009C                     	ds	4
   611  0000A0                     _nout:
   612                           	opt callstack 0
   613  0000A0                     	ds	2
   614  0000A2                     _width:
   615                           	opt callstack 0
   616  0000A2                     	ds	2
   617  0000A4                     _shouldUpdateTimer0Preload:
   618                           	opt callstack 0
   619  0000A4                     	ds	1
   620  0000A5                     _shouldDisplay:
   621                           	opt callstack 0
   622  0000A5                     	ds	1
   623  0000A6                     _shouldUpdateDutyCycle:
   624                           	opt callstack 0
   625  0000A6                     	ds	1
   626  0000A7                     _currentPreloadIndex:
   627                           	opt callstack 0
   628  0000A7                     	ds	1
   629  0000A8                     _refreshTime:
   630                           	opt callstack 0
   631  0000A8                     	ds	1
   632  0000A9                     _timer5OverflowCount:
   633                           	opt callstack 0
   634  0000A9                     	ds	1
   635  0000AA                     _sinusIndex1:
   636                           	opt callstack 0
   637  0000AA                     	ds	1
   638  0000AB                     _dbuf:
   639                           	opt callstack 0
   640  0000AB                     	ds	32
   641                           
   642                           	psect	dataBANK0
   643  0000CB                     __pdataBANK0:
   644                           	opt callstack 0
   645  0000CB                     _prevTimer0ReloadValue:
   646                           	opt callstack 0
   647  0000CB                     	ds	2
   648  0000CD                     _timer0ReloadValue:
   649                           	opt callstack 0
   650  0000CD                     	ds	2
   651  0000CF                     _timer5ReloadValue:
   652                           	opt callstack 0
   653  0000CF                     	ds	2
   654  0000D1                     _prevAdcPercent:
   655                           	opt callstack 0
   656  0000D1                     	ds	2
   657  0000D3                     _adcPercent:
   658                           	opt callstack 0
   659  0000D3                     	ds	2
   660  0000D5                     _PrevADRESH:
   661                           	opt callstack 0
   662  0000D5                     	ds	1
   663  0000D6                     _d1:
   664                           	opt callstack 0
   665  0000D6                     	ds	1
   666  0000D7                     _sinusIndex3:
   667                           	opt callstack 0
   668  0000D7                     	ds	1
   669  0000D8                     _sinusIndex2:
   670                           	opt callstack 0
   671  0000D8                     	ds	1
   672  0000D9                     _maxADCVal:
   673                           	opt callstack 0
   674  0000D9                     	ds	2
   675                           
   676                           	psect	cstackBANK0
   677  000060                     __pcstackBANK0:
   678                           	opt callstack 0
   679  000060                     ?_vfprintf:
   680                           	opt callstack 0
   681  000060                     vfprintf@fp:
   682                           	opt callstack 0
   683                           
   684                           ; 2 bytes @ 0x0
   685  000060                     	ds	2
   686  000062                     vfprintf@fmt:
   687                           	opt callstack 0
   688                           
   689                           ; 2 bytes @ 0x2
   690  000062                     	ds	2
   691  000064                     vfprintf@ap:
   692                           	opt callstack 0
   693                           
   694                           ; 2 bytes @ 0x4
   695  000064                     	ds	2
   696  000066                     ?_sprintf:
   697                           	opt callstack 0
   698  000066                     sprintf@s:
   699                           	opt callstack 0
   700                           
   701                           ; 2 bytes @ 0x6
   702  000066                     	ds	2
   703  000068                     sprintf@fmt:
   704                           	opt callstack 0
   705                           
   706                           ; 2 bytes @ 0x8
   707  000068                     	ds	6
   708  00006E                     sprintf@ap:
   709                           	opt callstack 0
   710                           
   711                           ; 2 bytes @ 0xE
   712  00006E                     	ds	2
   713  000070                     sprintf@f:
   714                           	opt callstack 0
   715                           
   716                           ; 6 bytes @ 0x10
   717  000070                     	ds	6
   718  000076                     main@str2:
   719                           	opt callstack 0
   720                           
   721                           ; 16 bytes @ 0x16
   722  000076                     	ds	16
   723  000086                     main@str1:
   724                           	opt callstack 0
   725                           
   726                           ; 16 bytes @ 0x26
   727  000086                     	ds	16
   728  000096                     main@noDigits:
   729                           	opt callstack 0
   730                           
   731                           ; 1 bytes @ 0x36
   732  000096                     	ds	1
   733  000097                     main@timer0ReloadValueCopy:
   734                           	opt callstack 0
   735                           
   736                           ; 2 bytes @ 0x37
   737  000097                     	ds	2
   738  000099                     main@i:
   739                           	opt callstack 0
   740                           
   741                           ; 2 bytes @ 0x39
   742  000099                     	ds	2
   743  00009B                     main@duty:
   744                           	opt callstack 0
   745                           
   746                           ; 1 bytes @ 0x3B
   747  00009B                     	ds	1
   748                           
   749                           	psect	cstackCOMRAM
   750  000001                     __pcstackCOMRAM:
   751                           	opt callstack 0
   752  000001                     ??_tcInt:
   753  000001                     
   754                           ; 1 bytes @ 0x0
   755  000001                     	ds	3
   756  000004                     ?_strlen:
   757                           	opt callstack 0
   758  000004                     ?___lwdiv:
   759                           	opt callstack 0
   760  000004                     ?___lwmod:
   761                           	opt callstack 0
   762  000004                     ?___aodiv:
   763                           	opt callstack 0
   764  000004                     ?___aomod:
   765                           	opt callstack 0
   766  000004                     LCDWriteNibble@rs:
   767                           	opt callstack 0
   768  000004                     ___lwdiv@dividend:
   769                           	opt callstack 0
   770  000004                     ___lwmod@dividend:
   771                           	opt callstack 0
   772  000004                     fputc@c:
   773                           	opt callstack 0
   774  000004                     strlen@s:
   775                           	opt callstack 0
   776  000004                     ___aodiv@dividend:
   777                           	opt callstack 0
   778  000004                     ___aomod@dividend:
   779                           	opt callstack 0
   780                           
   781                           ; 8 bytes @ 0x3
   782  000004                     	ds	1
   783  000005                     ??_LCDWriteNibble:
   784                           
   785                           ; 1 bytes @ 0x4
   786  000005                     	ds	1
   787  000006                     LCDWriteNibble@ch:
   788                           	opt callstack 0
   789  000006                     ___lwdiv@divisor:
   790                           	opt callstack 0
   791  000006                     ___lwmod@divisor:
   792                           	opt callstack 0
   793  000006                     fputc@fp:
   794                           	opt callstack 0
   795  000006                     strlen@a:
   796                           	opt callstack 0
   797                           
   798                           ; 2 bytes @ 0x5
   799  000006                     	ds	1
   800  000007                     ??_LCDPutCmd:
   801  000007                     ??_LCDPutChar:
   802                           
   803                           ; 1 bytes @ 0x6
   804  000007                     	ds	1
   805  000008                     ??_fputc:
   806  000008                     LCDPutChar@ch:
   807                           	opt callstack 0
   808  000008                     LCDPutCmd@ch:
   809                           	opt callstack 0
   810  000008                     ___lwmod@counter:
   811                           	opt callstack 0
   812  000008                     ___lwdiv@quotient:
   813                           	opt callstack 0
   814                           
   815                           ; 2 bytes @ 0x7
   816  000008                     	ds	1
   817  000009                     ??_LCD_Initialize:
   818  000009                     LCDPutStr@str:
   819                           	opt callstack 0
   820                           
   821                           ; 2 bytes @ 0x8
   822  000009                     	ds	1
   823  00000A                     ___lwdiv@counter:
   824                           	opt callstack 0
   825                           
   826                           ; 1 bytes @ 0x9
   827  00000A                     	ds	1
   828  00000B                     LCDPutStr@i:
   829                           	opt callstack 0
   830                           
   831                           ; 1 bytes @ 0xA
   832  00000B                     	ds	1
   833  00000C                     ___aodiv@divisor:
   834                           	opt callstack 0
   835  00000C                     ___aomod@divisor:
   836                           	opt callstack 0
   837                           
   838                           ; 8 bytes @ 0xB
   839  00000C                     	ds	1
   840  00000D                     fputs@s:
   841                           	opt callstack 0
   842                           
   843                           ; 2 bytes @ 0xC
   844  00000D                     	ds	2
   845  00000F                     fputs@fp:
   846                           	opt callstack 0
   847                           
   848                           ; 2 bytes @ 0xE
   849  00000F                     	ds	2
   850  000011                     fputs@c:
   851                           	opt callstack 0
   852                           
   853                           ; 1 bytes @ 0x10
   854  000011                     	ds	1
   855  000012                     fputs@i:
   856                           	opt callstack 0
   857                           
   858                           ; 2 bytes @ 0x11
   859  000012                     	ds	2
   860  000014                     ?_pad:
   861                           	opt callstack 0
   862  000014                     ___aodiv@counter:
   863                           	opt callstack 0
   864  000014                     ___aomod@counter:
   865                           	opt callstack 0
   866  000014                     pad@fp:
   867                           	opt callstack 0
   868                           
   869                           ; 2 bytes @ 0x13
   870  000014                     	ds	1
   871  000015                     ___aodiv@sign:
   872                           	opt callstack 0
   873  000015                     ___aomod@sign:
   874                           	opt callstack 0
   875                           
   876                           ; 1 bytes @ 0x14
   877  000015                     	ds	1
   878  000016                     ?_abs:
   879                           	opt callstack 0
   880  000016                     pad@buf:
   881                           	opt callstack 0
   882  000016                     abs@a:
   883                           	opt callstack 0
   884  000016                     ___aodiv@quotient:
   885                           	opt callstack 0
   886                           
   887                           ; 8 bytes @ 0x15
   888  000016                     	ds	2
   889  000018                     ??_abs:
   890  000018                     pad@p:
   891                           	opt callstack 0
   892                           
   893                           ; 2 bytes @ 0x17
   894  000018                     	ds	2
   895  00001A                     ??_pad:
   896                           
   897                           ; 1 bytes @ 0x19
   898  00001A                     	ds	1
   899  00001B                     pad@i:
   900                           	opt callstack 0
   901                           
   902                           ; 2 bytes @ 0x1A
   903  00001B                     	ds	2
   904  00001D                     pad@w:
   905                           	opt callstack 0
   906                           
   907                           ; 2 bytes @ 0x1C
   908  00001D                     	ds	2
   909  00001F                     ?_dtoa:
   910                           	opt callstack 0
   911  00001F                     dtoa@fp:
   912                           	opt callstack 0
   913                           
   914                           ; 2 bytes @ 0x1E
   915  00001F                     	ds	2
   916  000021                     dtoa@d:
   917                           	opt callstack 0
   918                           
   919                           ; 8 bytes @ 0x20
   920  000021                     	ds	8
   921  000029                     ??_dtoa:
   922                           
   923                           ; 1 bytes @ 0x28
   924  000029                     	ds	8
   925  000031                     _dtoa$1393:
   926                           	opt callstack 0
   927                           
   928                           ; 2 bytes @ 0x30
   929  000031                     	ds	2
   930  000033                     dtoa@p:
   931                           	opt callstack 0
   932                           
   933                           ; 2 bytes @ 0x32
   934  000033                     	ds	2
   935  000035                     dtoa@w:
   936                           	opt callstack 0
   937                           
   938                           ; 2 bytes @ 0x34
   939  000035                     	ds	2
   940  000037                     dtoa@s:
   941                           	opt callstack 0
   942                           
   943                           ; 2 bytes @ 0x36
   944  000037                     	ds	2
   945  000039                     dtoa@n:
   946                           	opt callstack 0
   947                           
   948                           ; 8 bytes @ 0x38
   949  000039                     	ds	8
   950  000041                     dtoa@i:
   951                           	opt callstack 0
   952                           
   953                           ; 2 bytes @ 0x40
   954  000041                     	ds	2
   955  000043                     ?_vfpfcnvrt:
   956                           	opt callstack 0
   957  000043                     vfpfcnvrt@fp:
   958                           	opt callstack 0
   959                           
   960                           ; 2 bytes @ 0x42
   961  000043                     	ds	2
   962  000045                     vfpfcnvrt@fmt:
   963                           	opt callstack 0
   964                           
   965                           ; 2 bytes @ 0x44
   966  000045                     	ds	2
   967  000047                     vfpfcnvrt@ap:
   968                           	opt callstack 0
   969                           
   970                           ; 2 bytes @ 0x46
   971  000047                     	ds	2
   972  000049                     ??_vfpfcnvrt:
   973                           
   974                           ; 1 bytes @ 0x48
   975  000049                     	ds	2
   976  00004B                     vfpfcnvrt@ll:
   977                           	opt callstack 0
   978                           
   979                           ; 8 bytes @ 0x4A
   980  00004B                     	ds	8
   981  000053                     vfprintf@cfmt:
   982                           	opt callstack 0
   983                           
   984                           ; 2 bytes @ 0x52
   985  000053                     	ds	2
   986  000055                     ??_main:
   987                           
   988                           ; 1 bytes @ 0x54
   989  000055                     	ds	2
   990                           
   991 ;;
   992 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   993 ;;
   994 ;; *************** function _main *****************
   995 ;; Defined at:
   996 ;;		line 367 in file "newmain.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  i               2   57[BANK0 ] int 
  1001 ;;  str1           16   38[BANK0 ] unsigned char [16]
  1002 ;;  str2           16   22[BANK0 ] unsigned char [16]
  1003 ;;  timer0Reload    2   55[BANK0 ] unsigned int 
  1004 ;;  noDigits        1   54[BANK0 ] unsigned char 
  1005 ;;  duty            1   59[BANK0 ] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1015 ;;      Params:         0       0       0       0
  1016 ;;      Locals:         0      38       0       0
  1017 ;;      Temps:          2       0       0       0
  1018 ;;      Totals:         2      38       0       0
  1019 ;;Total ram usage:       40 bytes
  1020 ;; Hardware stack levels required when called:    9
  1021 ;; This function calls:
  1022 ;;		_LCDPutChar
  1023 ;;		_LCDPutCmd
  1024 ;;		_LCDPutStr
  1025 ;;		_LCD_Initialize
  1026 ;;		___lwdiv
  1027 ;;		___lwmod
  1028 ;;		_configureADC
  1029 ;;		_configureInterrupts
  1030 ;;		_configurePWM
  1031 ;;		_configureTimer0
  1032 ;;		_configureTimer1
  1033 ;;		_configureTimer5
  1034 ;;		_sprintf
  1035 ;;		_startPWM
  1036 ;; This function is called by:
  1037 ;;		Startup code after reset
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           	psect	text0
  1042  000094                     __ptext0:
  1043                           	opt callstack 0
  1044  000094                     _main:
  1045                           	opt callstack 22
  1046  000094                     
  1047                           ;newmain.c: 368:     LCD_Initialize();
  1048  000094  ECA3  F007         	call	_LCD_Initialize	;wreg free
  1049  000098                     
  1050                           ;newmain.c: 369:     configureInterrupts();
  1051  000098  ECF6  F008         	call	_configureInterrupts	;wreg free
  1052  00009C                     
  1053                           ;newmain.c: 370:     configurePWM();
  1054  00009C  EC4E  F008         	call	_configurePWM	;wreg free
  1055  0000A0                     
  1056                           ;newmain.c: 371:     configureADC();
  1057  0000A0  ECBC  F008         	call	_configureADC	;wreg free
  1058  0000A4                     
  1059                           ;newmain.c: 372:     configureTimer0();
  1060  0000A4  ECCF  F008         	call	_configureTimer0	;wreg free
  1061  0000A8                     
  1062                           ;newmain.c: 373:     configureTimer1();
  1063  0000A8  ECE4  F008         	call	_configureTimer1	;wreg free
  1064  0000AC                     
  1065                           ;newmain.c: 374:     configureTimer5();
  1066  0000AC  ECDA  F008         	call	_configureTimer5	;wreg free
  1067  0000B0                     
  1068                           ;newmain.c: 375:     startPWM();
  1069  0000B0  ECF9  F008         	call	_startPWM	;wreg free
  1070  0000B4                     
  1071                           ;newmain.c: 382:     TRISAbits.TRISA2 = 0;
  1072  0000B4  9492               	bcf	146,2,c	;volatile
  1073  0000B6                     
  1074                           ;newmain.c: 383:     TRISAbits.RA2 = 0;
  1075  0000B6  9492               	bcf	146,2,c	;volatile
  1076  0000B8                     
  1077                           ;newmain.c: 384:     ANSEL0bits.ANS2 = 0;
  1078  0000B8  94B8               	bcf	184,2,c	;volatile
  1079  0000BA                     
  1080                           ;newmain.c: 385:     PORTAbits.RA2 = 0;
  1081  0000BA  9480               	bcf	128,2,c	;volatile
  1082  0000BC                     
  1083                           ;newmain.c: 389:     __nop();
  1084  0000BC  F000               	nop	
  1085  0000BE                     l2266:
  1086                           
  1087                           ;newmain.c: 392:         __nop();
  1088  0000BE  F000               	nop	
  1089  0000C0                     
  1090                           ;newmain.c: 394:         if (shouldUpdateDutyCycle) {
  1091  0000C0  0100               	movlb	0	; () banked
  1092  0000C2  51A6               	movf	_shouldUpdateDutyCycle& (0+255),w,b	;volatile
  1093  0000C4  B4D8               	btfsc	status,2,c
  1094  0000C6  EF67  F000         	goto	u1521
  1095  0000CA  EF69  F000         	goto	u1520
  1096  0000CE                     u1521:
  1097  0000CE  EFF2  F000         	goto	l2308
  1098  0000D2                     u1520:
  1099  0000D2                     
  1100                           ; BSR set to: 0
  1101                           ;newmain.c: 395:             if (sinusIndex1 == 255) {
  1102  0000D2  29AA               	incf	_sinusIndex1& (0+255),w,b	;volatile
  1103  0000D4  A4D8               	btfss	status,2,c
  1104  0000D6  EF6F  F000         	goto	u1531
  1105  0000DA  EF71  F000         	goto	u1530
  1106  0000DE                     u1531:
  1107  0000DE  EF73  F000         	goto	l2274
  1108  0000E2                     u1530:
  1109  0000E2                     
  1110                           ; BSR set to: 0
  1111                           ;newmain.c: 396:                 sinusIndex1 = 0;
  1112  0000E2  0E00               	movlw	0
  1113  0000E4  6FAA               	movwf	_sinusIndex1& (0+255),b	;volatile
  1114  0000E6                     l2274:
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;newmain.c: 398:             if (sinusIndex2 == 255) {
  1118  0000E6  29D8               	incf	_sinusIndex2& (0+255),w,b	;volatile
  1119  0000E8  A4D8               	btfss	status,2,c
  1120  0000EA  EF79  F000         	goto	u1541
  1121  0000EE  EF7B  F000         	goto	u1540
  1122  0000F2                     u1541:
  1123  0000F2  EF7D  F000         	goto	l2278
  1124  0000F6                     u1540:
  1125  0000F6                     
  1126                           ; BSR set to: 0
  1127                           ;newmain.c: 399:                 sinusIndex2 = 0;
  1128  0000F6  0E00               	movlw	0
  1129  0000F8  6FD8               	movwf	_sinusIndex2& (0+255),b	;volatile
  1130  0000FA                     l2278:
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;newmain.c: 401:             if (sinusIndex3 == 255) {
  1134  0000FA  29D7               	incf	_sinusIndex3& (0+255),w,b	;volatile
  1135  0000FC  A4D8               	btfss	status,2,c
  1136  0000FE  EF83  F000         	goto	u1551
  1137  000102  EF85  F000         	goto	u1550
  1138  000106                     u1551:
  1139  000106  EF87  F000         	goto	l2282
  1140  00010A                     u1550:
  1141  00010A                     
  1142                           ; BSR set to: 0
  1143                           ;newmain.c: 402:                 sinusIndex3 = 0;
  1144  00010A  0E00               	movlw	0
  1145  00010C  6FD7               	movwf	_sinusIndex3& (0+255),b	;volatile
  1146  00010E                     l2282:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;newmain.c: 406:             unsigned char duty = (sinusValues[sinusIndex1] >> 8);
  1150  00010E  51AA               	movf	_sinusIndex1& (0+255),w,b	;volatile
  1151  000110  0D02               	mullw	2
  1152  000112  0EE9               	movlw	low _sinusValues
  1153  000114  24F3               	addwf	243,w,c
  1154  000116  6EF6               	movwf	tblptrl,c
  1155  000118  0E3A               	movlw	high _sinusValues
  1156  00011A  20F4               	addwfc	244,w,c
  1157  00011C  6EF7               	movwf	tblptrh,c
  1158  00011E                     	if	0	;There are less than 3 active tblptr bytes
  1159  00011E                     	endif
  1160  00011E  0009               	tblrd		*+
  1161  000120  CFF5 F055          	movff	tablat,??_main
  1162  000124  0009               	tblrd		*+
  1163  000126  CFF5 F056          	movff	tablat,??_main+1
  1164  00012A  C056  F055         	movff	??_main+1,??_main
  1165  00012E  6A56               	clrf	(??_main+1)^0,c
  1166  000130  BE55               	btfsc	??_main^0,7,c
  1167  000132  6856               	setf	(??_main+1)^0,c
  1168  000134  5055               	movf	??_main^0,w,c
  1169  000136  6F9B               	movwf	main@duty& (0+255),b
  1170  000138                     
  1171                           ; BSR set to: 0
  1172                           ;newmain.c: 407:             PDC0H = duty;
  1173  000138  C09B  FF78         	movff	main@duty,3960	;volatile
  1174  00013C                     
  1175                           ; BSR set to: 0
  1176                           ;newmain.c: 408:             PDC0L = sinusValues[sinusIndex1];
  1177  00013C  51AA               	movf	_sinusIndex1& (0+255),w,b	;volatile
  1178  00013E  0D02               	mullw	2
  1179  000140  0EE9               	movlw	low _sinusValues
  1180  000142  24F3               	addwf	243,w,c
  1181  000144  6EF6               	movwf	tblptrl,c
  1182  000146  0E3A               	movlw	high _sinusValues
  1183  000148  20F4               	addwfc	244,w,c
  1184  00014A  6EF7               	movwf	tblptrh,c
  1185  00014C                     	if	0	;There are less than 3 active tblptr bytes
  1186  00014C                     	endif
  1187  00014C  0008               	tblrd		*
  1188  00014E  CFF5 FF79          	movff	tablat,3961	;volatile
  1189  000152                     
  1190                           ; BSR set to: 0
  1191                           ;newmain.c: 410:             duty = (sinusValues[sinusIndex2] >> 8);
  1192  000152  51D8               	movf	_sinusIndex2& (0+255),w,b	;volatile
  1193  000154  0D02               	mullw	2
  1194  000156  0EE9               	movlw	low _sinusValues
  1195  000158  24F3               	addwf	243,w,c
  1196  00015A  6EF6               	movwf	tblptrl,c
  1197  00015C  0E3A               	movlw	high _sinusValues
  1198  00015E  20F4               	addwfc	244,w,c
  1199  000160  6EF7               	movwf	tblptrh,c
  1200  000162                     	if	0	;There are less than 3 active tblptr bytes
  1201  000162                     	endif
  1202  000162  0009               	tblrd		*+
  1203  000164  CFF5 F055          	movff	tablat,??_main
  1204  000168  0009               	tblrd		*+
  1205  00016A  CFF5 F056          	movff	tablat,??_main+1
  1206  00016E  C056  F055         	movff	??_main+1,??_main
  1207  000172  6A56               	clrf	(??_main+1)^0,c
  1208  000174  BE55               	btfsc	??_main^0,7,c
  1209  000176  6856               	setf	(??_main+1)^0,c
  1210  000178  5055               	movf	??_main^0,w,c
  1211  00017A  6F9B               	movwf	main@duty& (0+255),b
  1212  00017C                     
  1213                           ; BSR set to: 0
  1214                           ;newmain.c: 411:             PDC1H = duty;
  1215  00017C  C09B  FF76         	movff	main@duty,3958	;volatile
  1216  000180                     
  1217                           ; BSR set to: 0
  1218                           ;newmain.c: 412:             PDC1L = sinusValues[sinusIndex2];
  1219  000180  51D8               	movf	_sinusIndex2& (0+255),w,b	;volatile
  1220  000182  0D02               	mullw	2
  1221  000184  0EE9               	movlw	low _sinusValues
  1222  000186  24F3               	addwf	243,w,c
  1223  000188  6EF6               	movwf	tblptrl,c
  1224  00018A  0E3A               	movlw	high _sinusValues
  1225  00018C  20F4               	addwfc	244,w,c
  1226  00018E  6EF7               	movwf	tblptrh,c
  1227  000190                     	if	0	;There are less than 3 active tblptr bytes
  1228  000190                     	endif
  1229  000190  0008               	tblrd		*
  1230  000192  CFF5 FF77          	movff	tablat,3959	;volatile
  1231  000196                     
  1232                           ; BSR set to: 0
  1233                           ;newmain.c: 414:             duty = (sinusValues[sinusIndex3] >> 8);
  1234  000196  51D7               	movf	_sinusIndex3& (0+255),w,b	;volatile
  1235  000198  0D02               	mullw	2
  1236  00019A  0EE9               	movlw	low _sinusValues
  1237  00019C  24F3               	addwf	243,w,c
  1238  00019E  6EF6               	movwf	tblptrl,c
  1239  0001A0  0E3A               	movlw	high _sinusValues
  1240  0001A2  20F4               	addwfc	244,w,c
  1241  0001A4  6EF7               	movwf	tblptrh,c
  1242  0001A6                     	if	0	;There are less than 3 active tblptr bytes
  1243  0001A6                     	endif
  1244  0001A6  0009               	tblrd		*+
  1245  0001A8  CFF5 F055          	movff	tablat,??_main
  1246  0001AC  0009               	tblrd		*+
  1247  0001AE  CFF5 F056          	movff	tablat,??_main+1
  1248  0001B2  C056  F055         	movff	??_main+1,??_main
  1249  0001B6  6A56               	clrf	(??_main+1)^0,c
  1250  0001B8  BE55               	btfsc	??_main^0,7,c
  1251  0001BA  6856               	setf	(??_main+1)^0,c
  1252  0001BC  5055               	movf	??_main^0,w,c
  1253  0001BE  6F9B               	movwf	main@duty& (0+255),b
  1254  0001C0                     
  1255                           ; BSR set to: 0
  1256                           ;newmain.c: 415:             PDC2H = duty;
  1257  0001C0  C09B  FF74         	movff	main@duty,3956	;volatile
  1258  0001C4                     
  1259                           ; BSR set to: 0
  1260                           ;newmain.c: 416:             PDC2L = sinusValues[sinusIndex3];
  1261  0001C4  51D7               	movf	_sinusIndex3& (0+255),w,b	;volatile
  1262  0001C6  0D02               	mullw	2
  1263  0001C8  0EE9               	movlw	low _sinusValues
  1264  0001CA  24F3               	addwf	243,w,c
  1265  0001CC  6EF6               	movwf	tblptrl,c
  1266  0001CE  0E3A               	movlw	high _sinusValues
  1267  0001D0  20F4               	addwfc	244,w,c
  1268  0001D2  6EF7               	movwf	tblptrh,c
  1269  0001D4                     	if	0	;There are less than 3 active tblptr bytes
  1270  0001D4                     	endif
  1271  0001D4  0008               	tblrd		*
  1272  0001D6  CFF5 FF75          	movff	tablat,3957	;volatile
  1273  0001DA                     
  1274                           ; BSR set to: 0
  1275                           ;newmain.c: 424:             sinusIndex1++;
  1276  0001DA  2BAA               	incf	_sinusIndex1& (0+255),f,b	;volatile
  1277  0001DC                     
  1278                           ; BSR set to: 0
  1279                           ;newmain.c: 425:             sinusIndex2++;
  1280  0001DC  2BD8               	incf	_sinusIndex2& (0+255),f,b	;volatile
  1281  0001DE                     
  1282                           ; BSR set to: 0
  1283                           ;newmain.c: 426:             sinusIndex3++;
  1284  0001DE  2BD7               	incf	_sinusIndex3& (0+255),f,b	;volatile
  1285  0001E0                     
  1286                           ; BSR set to: 0
  1287                           ;newmain.c: 427:             shouldUpdateDutyCycle = 0;
  1288  0001E0  0E00               	movlw	0
  1289  0001E2  6FA6               	movwf	_shouldUpdateDutyCycle& (0+255),b	;volatile
  1290  0001E4                     l2308:
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;newmain.c: 430:         if (shouldDisplay) {
  1294  0001E4  51A5               	movf	_shouldDisplay& (0+255),w,b	;volatile
  1295  0001E6  B4D8               	btfsc	status,2,c
  1296  0001E8  EFF8  F000         	goto	u1561
  1297  0001EC  EFFA  F000         	goto	u1560
  1298  0001F0                     u1561:
  1299  0001F0  EFA4  F001         	goto	l2356
  1300  0001F4                     u1560:
  1301  0001F4                     
  1302                           ; BSR set to: 0
  1303                           ;newmain.c: 431:             if (refreshTime == 5) {
  1304  0001F4  0E05               	movlw	5
  1305  0001F6  19A8               	xorwf	_refreshTime& (0+255),w,b	;volatile
  1306  0001F8  A4D8               	btfss	status,2,c
  1307  0001FA  EF01  F001         	goto	u1571
  1308  0001FE  EF03  F001         	goto	u1570
  1309  000202                     u1571:
  1310  000202  EF99  F001         	goto	l2348
  1311  000206                     u1570:
  1312  000206                     
  1313                           ; BSR set to: 0
  1314                           ;newmain.c: 432:                 if (prevAdcPercent != adcPercent || prevTimer0ReloadVal
      +                          ue != timer0ReloadValue) {
  1315  000206  51D3               	movf	_adcPercent& (0+255),w,b	;volatile
  1316  000208  19D1               	xorwf	_prevAdcPercent& (0+255),w,b	;volatile
  1317  00020A  E107               	bnz	u1581
  1318  00020C  51D4               	movf	(_adcPercent+1)& (0+255),w,b	;volatile
  1319  00020E  19D2               	xorwf	(_prevAdcPercent+1)& (0+255),w,b	;volatile
  1320  000210  A4D8               	btfss	status,2,c
  1321  000212  EF0D  F001         	goto	u1581
  1322  000216  EF0F  F001         	goto	u1580
  1323  00021A                     u1581:
  1324  00021A  EF1B  F001         	goto	l2316
  1325  00021E                     u1580:
  1326  00021E                     
  1327                           ; BSR set to: 0
  1328  00021E  51CD               	movf	_timer0ReloadValue& (0+255),w,b	;volatile
  1329  000220  19CB               	xorwf	_prevTimer0ReloadValue& (0+255),w,b	;volatile
  1330  000222  E109               	bnz	u1590
  1331  000224  51CE               	movf	(_timer0ReloadValue+1)& (0+255),w,b	;volatile
  1332  000226  19CC               	xorwf	(_prevTimer0ReloadValue+1)& (0+255),w,b	;volatile
  1333  000228  B4D8               	btfsc	status,2,c
  1334  00022A  EF19  F001         	goto	u1591
  1335  00022E  EF1B  F001         	goto	u1590
  1336  000232                     u1591:
  1337  000232  EF97  F001         	goto	l2346
  1338  000236                     u1590:
  1339  000236                     l2316:
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;newmain.c: 434:                     char str1[16];;newmain.c: 435:                     
      +                          char str2[16];;newmain.c: 437:                     LCDPutCmd(0x01);
  1343  000236  0E01               	movlw	1
  1344  000238  EC2F  F008         	call	_LCDPutCmd
  1345  00023C                     
  1346                           ;newmain.c: 438:                     sprintf(str1, "%d", adcPercent);
  1347  00023C  0E86               	movlw	low main@str1
  1348  00023E  0100               	movlb	0	; () banked
  1349  000240  6F66               	movwf	sprintf@s& (0+255),b
  1350  000242  0E00               	movlw	high main@str1
  1351  000244  6F67               	movwf	(sprintf@s+1)& (0+255),b
  1352  000246  0EBB               	movlw	low STR_1
  1353  000248  6F68               	movwf	sprintf@fmt& (0+255),b
  1354  00024A  0E3D               	movlw	high STR_1
  1355  00024C  6F69               	movwf	(sprintf@fmt+1)& (0+255),b
  1356  00024E  C0D3  F06A         	movff	_adcPercent,?_sprintf+4	;volatile
  1357  000252  C0D4  F06B         	movff	_adcPercent+1,?_sprintf+5	;volatile
  1358  000256  EC7A  F007         	call	_sprintf	;wreg free
  1359  00025A                     
  1360                           ;newmain.c: 439:                     LCDPutStr(str1);
  1361  00025A  0E86               	movlw	low main@str1
  1362  00025C  6E09               	movwf	LCDPutStr@str^0,c
  1363  00025E  0E00               	movlw	high main@str1
  1364  000260  6E0A               	movwf	(LCDPutStr@str+1)^0,c
  1365  000262  EC6C  F008         	call	_LCDPutStr	;wreg free
  1366  000266                     
  1367                           ;newmain.c: 440:                     LCDPutChar(' ');
  1368  000266  0E20               	movlw	32
  1369  000268  ECA4  F008         	call	_LCDPutChar
  1370  00026C                     
  1371                           ;newmain.c: 442:                     unsigned int timer0ReloadValueCopy = timer0ReloadVa
      +                          lue;
  1372  00026C  C0CD  F097         	movff	_timer0ReloadValue,main@timer0ReloadValueCopy	;volatile
  1373  000270  C0CE  F098         	movff	_timer0ReloadValue+1,main@timer0ReloadValueCopy+1	;volatile
  1374  000274                     
  1375                           ;newmain.c: 443:                     char noDigits = 0;
  1376  000274  0E00               	movlw	0
  1377  000276  0100               	movlb	0	; () banked
  1378  000278  6F96               	movwf	main@noDigits& (0+255),b
  1379                           
  1380                           ;newmain.c: 444:                     while (timer0ReloadValueCopy > 0) {
  1381  00027A  EF61  F001         	goto	l2334
  1382  00027E                     l2328:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;newmain.c: 445:                         str2[noDigits] = timer0ReloadValueCopy % 10;
  1386  00027E  0E76               	movlw	low main@str2
  1387  000280  2596               	addwf	main@noDigits& (0+255),w,b
  1388  000282  6ED9               	movwf	fsr2l,c
  1389  000284  6ADA               	clrf	fsr2h,c
  1390  000286  0E00               	movlw	high main@str2
  1391  000288  22DA               	addwfc	fsr2h,f,c
  1392  00028A  C097  F004         	movff	main@timer0ReloadValueCopy,___lwmod@dividend
  1393  00028E  C098  F005         	movff	main@timer0ReloadValueCopy+1,___lwmod@dividend+1
  1394  000292  0E00               	movlw	0
  1395  000294  6E07               	movwf	(___lwmod@divisor+1)^0,c
  1396  000296  0E0A               	movlw	10
  1397  000298  6E06               	movwf	___lwmod@divisor^0,c
  1398  00029A  EC17  F007         	call	___lwmod	;wreg free
  1399  00029E  5004               	movf	?___lwmod^0,w,c
  1400  0002A0  6EDF               	movwf	indf2,c
  1401  0002A2                     
  1402                           ;newmain.c: 446:                         timer0ReloadValueCopy /= 10;
  1403  0002A2  C097  F004         	movff	main@timer0ReloadValueCopy,___lwdiv@dividend
  1404  0002A6  C098  F005         	movff	main@timer0ReloadValueCopy+1,___lwdiv@dividend+1
  1405  0002AA  0E00               	movlw	0
  1406  0002AC  6E07               	movwf	(___lwdiv@divisor+1)^0,c
  1407  0002AE  0E0A               	movlw	10
  1408  0002B0  6E06               	movwf	___lwdiv@divisor^0,c
  1409  0002B2  ECDD  F006         	call	___lwdiv	;wreg free
  1410  0002B6  C004  F097         	movff	?___lwdiv,main@timer0ReloadValueCopy
  1411  0002BA  C005  F098         	movff	?___lwdiv+1,main@timer0ReloadValueCopy+1
  1412  0002BE                     
  1413                           ;newmain.c: 447:                         noDigits++;
  1414  0002BE  0100               	movlb	0	; () banked
  1415  0002C0  2B96               	incf	main@noDigits& (0+255),f,b
  1416  0002C2                     l2334:
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;newmain.c: 444:                     while (timer0ReloadValueCopy > 0) {
  1420  0002C2  5197               	movf	main@timer0ReloadValueCopy& (0+255),w,b
  1421  0002C4  1198               	iorwf	(main@timer0ReloadValueCopy+1)& (0+255),w,b
  1422  0002C6  A4D8               	btfss	status,2,c
  1423  0002C8  EF68  F001         	goto	u1601
  1424  0002CC  EF6A  F001         	goto	u1600
  1425  0002D0                     u1601:
  1426  0002D0  EF3F  F001         	goto	l2328
  1427  0002D4                     u1600:
  1428  0002D4                     
  1429                           ; BSR set to: 0
  1430                           ;newmain.c: 449:                     for (int i = noDigits - 1; i >= 0; i--) {
  1431  0002D4  0EFF               	movlw	255
  1432  0002D6  2596               	addwf	main@noDigits& (0+255),w,b
  1433  0002D8  6F99               	movwf	main@i& (0+255),b
  1434  0002DA  6B9A               	clrf	(main@i+1)& (0+255),b
  1435  0002DC  0EFF               	movlw	255
  1436  0002DE  239A               	addwfc	(main@i+1)& (0+255),f,b
  1437  0002E0  BF9A               	btfsc	(main@i+1)& (0+255),7,b
  1438  0002E2  EF77  F001         	goto	u1610
  1439  0002E6  EF75  F001         	goto	u1611
  1440  0002EA                     u1611:
  1441  0002EA  EF79  F001         	goto	l2340
  1442  0002EE                     u1610:
  1443  0002EE  EF97  F001         	goto	l2346
  1444  0002F2                     l2340:
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;newmain.c: 450:                         LCDPutChar(digits[str2[i]]);
  1448  0002F2  0E76               	movlw	low main@str2
  1449  0002F4  2599               	addwf	main@i& (0+255),w,b
  1450  0002F6  6ED9               	movwf	fsr2l,c
  1451  0002F8  0E00               	movlw	high main@str2
  1452  0002FA  219A               	addwfc	(main@i+1)& (0+255),w,b
  1453  0002FC  6EDA               	movwf	fsr2h,c
  1454  0002FE  50DF               	movf	indf2,w,c
  1455  000300  6E55               	movwf	??_main^0,c
  1456  000302  6A56               	clrf	(??_main+1)^0,c
  1457  000304  0EB1               	movlw	low _digits
  1458  000306  2455               	addwf	??_main^0,w,c
  1459  000308  6EF6               	movwf	tblptrl,c
  1460  00030A  0E3D               	movlw	high _digits
  1461  00030C  2056               	addwfc	(??_main+1)^0,w,c
  1462  00030E  6EF7               	movwf	tblptrh,c
  1463  000310                     	if	0	;There are less than 3 active tblptr bytes
  1464  000310                     	endif
  1465  000310  0008               	tblrd		*
  1466  000312  50F5               	movf	tablat,w,c
  1467  000314  ECA4  F008         	call	_LCDPutChar
  1468  000318                     
  1469                           ;newmain.c: 451:                     }
  1470  000318  0100               	movlb	0	; () banked
  1471  00031A  0799               	decf	main@i& (0+255),f,b
  1472  00031C  A0D8               	btfss	status,0,c
  1473  00031E  079A               	decf	(main@i+1)& (0+255),f,b
  1474  000320                     
  1475                           ; BSR set to: 0
  1476  000320  BF9A               	btfsc	(main@i+1)& (0+255),7,b
  1477  000322  EF97  F001         	goto	u1620
  1478  000326  EF95  F001         	goto	u1621
  1479  00032A                     u1621:
  1480  00032A  EF79  F001         	goto	l2340
  1481  00032E                     u1620:
  1482  00032E                     l2346:
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;newmain.c: 454:                 refreshTime = 0;
  1486  00032E  0E00               	movlw	0
  1487  000330  6FA8               	movwf	_refreshTime& (0+255),b	;volatile
  1488  000332                     l2348:
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;newmain.c: 456:             refreshTime++;
  1492  000332  2BA8               	incf	_refreshTime& (0+255),f,b	;volatile
  1493  000334                     
  1494                           ; BSR set to: 0
  1495                           ;newmain.c: 457:             prevAdcPercent = adcPercent;
  1496  000334  C0D3  F0D1         	movff	_adcPercent,_prevAdcPercent	;volatile
  1497  000338  C0D4  F0D2         	movff	_adcPercent+1,_prevAdcPercent+1	;volatile
  1498  00033C                     
  1499                           ; BSR set to: 0
  1500                           ;newmain.c: 458:             prevTimer0ReloadValue = timer0ReloadValue;
  1501  00033C  C0CD  F0CB         	movff	_timer0ReloadValue,_prevTimer0ReloadValue	;volatile
  1502  000340  C0CE  F0CC         	movff	_timer0ReloadValue+1,_prevTimer0ReloadValue+1	;volatile
  1503  000344                     
  1504                           ; BSR set to: 0
  1505                           ;newmain.c: 459:             shouldDisplay = 0;
  1506  000344  0E00               	movlw	0
  1507  000346  6FA5               	movwf	_shouldDisplay& (0+255),b	;volatile
  1508  000348                     l2356:
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;newmain.c: 462:         if (shouldUpdateTimer0Preload) {
  1512  000348  51A4               	movf	_shouldUpdateTimer0Preload& (0+255),w,b	;volatile
  1513  00034A  B4D8               	btfsc	status,2,c
  1514  00034C  EFAA  F001         	goto	u1631
  1515  000350  EFAC  F001         	goto	u1630
  1516  000354                     u1631:
  1517  000354  EFE5  F001         	goto	l2376
  1518  000358                     u1630:
  1519  000358                     
  1520                           ; BSR set to: 0
  1521                           ;newmain.c: 463:             if (timer5OverflowCount == 2) {
  1522  000358  0E02               	movlw	2
  1523  00035A  19A9               	xorwf	_timer5OverflowCount& (0+255),w,b	;volatile
  1524  00035C  A4D8               	btfss	status,2,c
  1525  00035E  EFB3  F001         	goto	u1641
  1526  000362  EFB5  F001         	goto	u1640
  1527  000366                     u1641:
  1528  000366  EFE2  F001         	goto	l2372
  1529  00036A                     u1640:
  1530  00036A                     
  1531                           ; BSR set to: 0
  1532                           ;newmain.c: 464:                 timer5OverflowCount = 0;
  1533  00036A  0E00               	movlw	0
  1534  00036C  6FA9               	movwf	_timer5OverflowCount& (0+255),b	;volatile
  1535  00036E                     
  1536                           ; BSR set to: 0
  1537                           ;newmain.c: 465:                 if (currentPreloadIndex < adcPercent) {
  1538  00036E  51A7               	movf	_currentPreloadIndex& (0+255),w,b	;volatile
  1539  000370  6E55               	movwf	??_main^0,c
  1540  000372  6A56               	clrf	(??_main+1)^0,c
  1541  000374  51D3               	movf	_adcPercent& (0+255),w,b	;volatile
  1542  000376  5C55               	subwf	??_main^0,w,c
  1543  000378  51D4               	movf	(_adcPercent+1)& (0+255),w,b	;volatile
  1544  00037A  5856               	subwfb	(??_main+1)^0,w,c
  1545  00037C  B0D8               	btfsc	status,0,c
  1546  00037E  EFC3  F001         	goto	u1651
  1547  000382  EFC5  F001         	goto	u1650
  1548  000386                     u1651:
  1549  000386  EFC8  F001         	goto	l2366
  1550  00038A                     u1650:
  1551  00038A                     
  1552                           ; BSR set to: 0
  1553                           ;newmain.c: 466:                     currentPreloadIndex++;
  1554  00038A  2BA7               	incf	_currentPreloadIndex& (0+255),f,b	;volatile
  1555                           
  1556                           ;newmain.c: 467:                 } else if (currentPreloadIndex > adcPercent) {
  1557  00038C  EFD4  F001         	goto	l2370
  1558  000390                     l2366:
  1559                           
  1560                           ; BSR set to: 0
  1561  000390  51A7               	movf	_currentPreloadIndex& (0+255),w,b	;volatile
  1562  000392  5DD3               	subwf	_adcPercent& (0+255),w,b	;volatile
  1563  000394  0E00               	movlw	0
  1564  000396  59D4               	subwfb	(_adcPercent+1)& (0+255),w,b	;volatile
  1565  000398  B0D8               	btfsc	status,0,c
  1566  00039A  EFD1  F001         	goto	u1661
  1567  00039E  EFD3  F001         	goto	u1660
  1568  0003A2                     u1661:
  1569  0003A2  EFD4  F001         	goto	l2370
  1570  0003A6                     u1660:
  1571  0003A6                     
  1572                           ; BSR set to: 0
  1573                           ;newmain.c: 468:                     currentPreloadIndex--;
  1574  0003A6  07A7               	decf	_currentPreloadIndex& (0+255),f,b	;volatile
  1575  0003A8                     l2370:
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;newmain.c: 470:                 timer0ReloadValue = timer0PreloadValues[currentPreloadI
      +                          ndex];
  1579  0003A8  51A7               	movf	_currentPreloadIndex& (0+255),w,b	;volatile
  1580  0003AA  0D02               	mullw	2
  1581  0003AC  0EE9               	movlw	low _timer0PreloadValues
  1582  0003AE  24F3               	addwf	243,w,c
  1583  0003B0  6EF6               	movwf	tblptrl,c
  1584  0003B2  0E3C               	movlw	high _timer0PreloadValues
  1585  0003B4  20F4               	addwfc	244,w,c
  1586  0003B6  6EF7               	movwf	tblptrh,c
  1587  0003B8                     	if	0	;There are less than 3 active tblptr bytes
  1588  0003B8                     	endif
  1589  0003B8  0009               	tblrd		*+
  1590  0003BA  CFF5 F0CD          	movff	tablat,_timer0ReloadValue	;volatile
  1591  0003BE  000A               	tblrd		*-
  1592  0003C0  CFF5 F0CE          	movff	tablat,_timer0ReloadValue+1	;volatile
  1593  0003C4                     l2372:
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;newmain.c: 472:             timer5OverflowCount++;
  1597  0003C4  2BA9               	incf	_timer5OverflowCount& (0+255),f,b	;volatile
  1598  0003C6                     
  1599                           ; BSR set to: 0
  1600                           ;newmain.c: 473:             shouldUpdateTimer0Preload = 0;
  1601  0003C6  0E00               	movlw	0
  1602  0003C8  6FA4               	movwf	_shouldUpdateTimer0Preload& (0+255),b	;volatile
  1603  0003CA                     l2376:
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;newmain.c: 476:         if (PIR1bits.ADIF == 1) {
  1607  0003CA  AC9E               	btfss	158,6,c	;volatile
  1608  0003CC  EFEA  F001         	goto	u1671
  1609  0003D0  EFEC  F001         	goto	u1670
  1610  0003D4                     u1671:
  1611  0003D4  EF5F  F000         	goto	l2266
  1612  0003D8                     u1670:
  1613  0003D8                     
  1614                           ; BSR set to: 0
  1615                           ;newmain.c: 477:             if (PrevADRESH != ADRESH) {
  1616  0003D8  50C4               	movf	196,w,c	;volatile
  1617  0003DA  19D5               	xorwf	_PrevADRESH& (0+255),w,b	;volatile
  1618  0003DC  B4D8               	btfsc	status,2,c
  1619  0003DE  EFF3  F001         	goto	u1681
  1620  0003E2  EFF5  F001         	goto	u1680
  1621  0003E6                     u1681:
  1622  0003E6  EF08  F002         	goto	l2382
  1623  0003EA                     u1680:
  1624  0003EA                     
  1625                           ; BSR set to: 0
  1626                           ;newmain.c: 478:                 adcPercent = (255 - ADRESH) * 99 / maxADCVal;
  1627  0003EA  50C4               	movf	196,w,c	;volatile
  1628  0003EC  0AFF               	xorlw	255
  1629  0003EE  6E55               	movwf	??_main^0,c
  1630  0003F0  5055               	movf	??_main^0,w,c
  1631  0003F2  0D63               	mullw	99
  1632  0003F4  CFF3 F004          	movff	prodl,___lwdiv@dividend
  1633  0003F8  CFF4 F005          	movff	prodh,___lwdiv@dividend+1
  1634  0003FC  C0D9  F006         	movff	_maxADCVal,___lwdiv@divisor
  1635  000400  C0DA  F007         	movff	_maxADCVal+1,___lwdiv@divisor+1
  1636  000404  ECDD  F006         	call	___lwdiv	;wreg free
  1637  000408  C004  F0D3         	movff	?___lwdiv,_adcPercent	;volatile
  1638  00040C  C005  F0D4         	movff	?___lwdiv+1,_adcPercent+1	;volatile
  1639  000410                     l2382:
  1640                           
  1641                           ;newmain.c: 481:             PrevADRESH = ADRESH;
  1642  000410  CFC4 F0D5          	movff	4036,_PrevADRESH	;volatile
  1643  000414                     
  1644                           ;newmain.c: 482:             PIR1bits.ADIF = 0;
  1645  000414  9C9E               	bcf	158,6,c	;volatile
  1646  000416  EF5F  F000         	goto	l2266
  1647  00041A  EF48  F000         	goto	start
  1648  00041E                     __end_of_main:
  1649                           	opt callstack 0
  1650                           
  1651 ;; *************** function _startPWM *****************
  1652 ;; Defined at:
  1653 ;;		line 253 in file "newmain.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;		None
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		None
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1667 ;;      Params:         0       0       0       0
  1668 ;;      Locals:         0       0       0       0
  1669 ;;      Temps:          0       0       0       0
  1670 ;;      Totals:         0       0       0       0
  1671 ;;Total ram usage:        0 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    1
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_main
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text1
  1682  0011F2                     __ptext1:
  1683                           	opt callstack 0
  1684  0011F2                     _startPWM:
  1685                           	opt callstack 29
  1686  0011F2                     
  1687                           ;newmain.c: 254:     PTCON1bits.PTEN = 1;
  1688  0011F2  8E7E               	bsf	126,7,c	;volatile
  1689  0011F4  0012               	return		;funcret
  1690  0011F6                     __end_of_startPWM:
  1691                           	opt callstack 0
  1692                           
  1693 ;; *************** function _sprintf *****************
  1694 ;; Defined at:
  1695 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  s               2    6[BANK0 ] PTR unsigned char 
  1698 ;;		 -> main@str1(16), 
  1699 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  1700 ;;		 -> STR_1(3), 
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  f               6   16[BANK0 ] struct _IO_FILE
  1703 ;;  ap              2   14[BANK0 ] PTR void [1]
  1704 ;;		 -> ?_sprintf(2), 
  1705 ;;  ret             2    0        int 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  2    6[BANK0 ] int 
  1708 ;; Registers used:
  1709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1715 ;;      Params:         0       6       0       0
  1716 ;;      Locals:         0      10       0       0
  1717 ;;      Temps:          0       0       0       0
  1718 ;;      Totals:         0      16       0       0
  1719 ;;Total ram usage:       16 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    8
  1722 ;; This function calls:
  1723 ;;		_vfprintf
  1724 ;; This function is called by:
  1725 ;;		_main
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text2
  1730  000EF4                     __ptext2:
  1731                           	opt callstack 0
  1732  000EF4                     _sprintf:
  1733                           	opt callstack 22
  1734  000EF4  0E6A               	movlw	low (?_sprintf+4)
  1735  000EF6  0100               	movlb	0	; () banked
  1736  000EF8  6F6E               	movwf	sprintf@ap& (0+255),b
  1737  000EFA  0E00               	movlw	high (?_sprintf+4)
  1738  000EFC  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  1739  000EFE  C066  F070         	movff	sprintf@s,sprintf@f
  1740  000F02  C067  F071         	movff	sprintf@s+1,sprintf@f+1
  1741  000F06                     
  1742                           ; BSR set to: 0
  1743  000F06  0E00               	movlw	0
  1744  000F08  6F73               	movwf	(sprintf@f+3)& (0+255),b
  1745  000F0A  0E00               	movlw	0
  1746  000F0C  6F72               	movwf	(sprintf@f+2)& (0+255),b
  1747  000F0E                     
  1748                           ; BSR set to: 0
  1749  000F0E  0E00               	movlw	0
  1750  000F10  6F75               	movwf	(sprintf@f+5)& (0+255),b
  1751  000F12  0E00               	movlw	0
  1752  000F14  6F74               	movwf	(sprintf@f+4)& (0+255),b
  1753  000F16                     
  1754                           ; BSR set to: 0
  1755  000F16  0E70               	movlw	low sprintf@f
  1756  000F18  6F60               	movwf	vfprintf@fp& (0+255),b
  1757  000F1A  0E00               	movlw	high sprintf@f
  1758  000F1C  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  1759  000F1E  C068  F062         	movff	sprintf@fmt,vfprintf@fmt
  1760  000F22  C069  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1761  000F26  0E6E               	movlw	low sprintf@ap
  1762  000F28  6F64               	movwf	vfprintf@ap& (0+255),b
  1763  000F2A  0E00               	movlw	high sprintf@ap
  1764  000F2C  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  1765  000F2E  EC49  F007         	call	_vfprintf	;wreg free
  1766  000F32  0100               	movlb	0	; () banked
  1767  000F34  5172               	movf	(sprintf@f+2)& (0+255),w,b
  1768  000F36  2566               	addwf	sprintf@s& (0+255),w,b
  1769  000F38  6ED9               	movwf	fsr2l,c
  1770  000F3A  5173               	movf	(sprintf@f+3)& (0+255),w,b
  1771  000F3C  2167               	addwfc	(sprintf@s+1)& (0+255),w,b
  1772  000F3E  6EDA               	movwf	fsr2h,c
  1773  000F40  0E00               	movlw	0
  1774  000F42  6EDF               	movwf	indf2,c
  1775  000F44                     
  1776                           ; BSR set to: 0
  1777  000F44  0012               	return		;funcret
  1778  000F46                     __end_of_sprintf:
  1779                           	opt callstack 0
  1780                           
  1781 ;; *************** function _vfprintf *****************
  1782 ;; Defined at:
  1783 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  1786 ;;		 -> sprintf@f(6), 
  1787 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1788 ;;		 -> STR_1(3), 
  1789 ;;  ap              2    4[BANK0 ] PTR PTR void 
  1790 ;;		 -> sprintf@ap(2), 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  cfmt            2   82[COMRAM] PTR unsigned char 
  1793 ;;		 -> STR_1(3), 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  2    0[BANK0 ] int 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1803 ;;      Params:         0       6       0       0
  1804 ;;      Locals:         2       0       0       0
  1805 ;;      Temps:          0       0       0       0
  1806 ;;      Totals:         2       6       0       0
  1807 ;;Total ram usage:        8 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    7
  1810 ;; This function calls:
  1811 ;;		_vfpfcnvrt
  1812 ;; This function is called by:
  1813 ;;		_sprintf
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text3
  1818  000E92                     __ptext3:
  1819                           	opt callstack 0
  1820  000E92                     _vfprintf:
  1821                           	opt callstack 22
  1822  000E92                     
  1823                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1824  000E92  C062  F053         	movff	vfprintf@fmt,vfprintf@cfmt
  1825  000E96  C063  F054         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1826  000E9A                     
  1827                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1828  000E9A  0E00               	movlw	0
  1829  000E9C  0100               	movlb	0	; () banked
  1830  000E9E  6FA1               	movwf	(_nout+1)& (0+255),b
  1831  000EA0  0E00               	movlw	0
  1832  000EA2  6FA0               	movwf	_nout& (0+255),b
  1833                           
  1834                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1835  000EA4  EF67  F007         	goto	l2226
  1836  000EA8                     l2224:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1840  000EA8  C060  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  1841  000EAC  C061  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1842  000EB0  0E53               	movlw	low vfprintf@cfmt
  1843  000EB2  6E45               	movwf	vfpfcnvrt@fmt^0,c
  1844  000EB4  0E00               	movlw	high vfprintf@cfmt
  1845  000EB6  6E46               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1846  000EB8  C064  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  1847  000EBC  C065  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1848  000EC0  EC7E  F003         	call	_vfpfcnvrt	;wreg free
  1849  000EC4  5043               	movf	?_vfpfcnvrt^0,w,c
  1850  000EC6  0100               	movlb	0	; () banked
  1851  000EC8  27A0               	addwf	_nout& (0+255),f,b
  1852  000ECA  5044               	movf	(?_vfpfcnvrt+1)^0,w,c
  1853  000ECC  23A1               	addwfc	(_nout+1)& (0+255),f,b
  1854  000ECE                     l2226:
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1858  000ECE  C053  FFF6         	movff	vfprintf@cfmt,tblptrl
  1859  000ED2  C054  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1860  000ED6                     	if	0	;tblptru may be non-zero
  1861  000ED6                     	endif
  1862  000ED6                     	if	0	;tblptru may be non-zero
  1863  000ED6                     	endif
  1864  000ED6  0008               	tblrd		*
  1865  000ED8  50F5               	movf	tablat,w,c
  1866  000EDA  0900               	iorlw	0
  1867  000EDC  A4D8               	btfss	status,2,c
  1868  000EDE  EF73  F007         	goto	u1511
  1869  000EE2  EF75  F007         	goto	u1510
  1870  000EE6                     u1511:
  1871  000EE6  EF54  F007         	goto	l2224
  1872  000EEA                     u1510:
  1873  000EEA                     
  1874                           ; BSR set to: 0
  1875                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1876  000EEA  C0A0  F060         	movff	_nout,?_vfprintf
  1877  000EEE  C0A1  F061         	movff	_nout+1,?_vfprintf+1
  1878  000EF2                     
  1879                           ; BSR set to: 0
  1880  000EF2  0012               	return		;funcret
  1881  000EF4                     __end_of_vfprintf:
  1882                           	opt callstack 0
  1883                           
  1884 ;; *************** function _vfpfcnvrt *****************
  1885 ;; Defined at:
  1886 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  1889 ;;		 -> sprintf@f(6), 
  1890 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  1891 ;;		 -> vfprintf@cfmt(2), 
  1892 ;;  ap              2   70[COMRAM] PTR PTR void 
  1893 ;;		 -> sprintf@ap(2), 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  ll              8   74[COMRAM] long long 
  1896 ;;  llu             8    0        unsigned long long 
  1897 ;;  f               4    0        unsigned long long 
  1898 ;;  vp              3    0        PTR void 
  1899 ;;  ct              3    0        unsigned char [3]
  1900 ;;  cp              3    0        PTR unsigned char 
  1901 ;;  i               2    0        int 
  1902 ;;  done            2    0        int 
  1903 ;;  c               1    0        unsigned char 
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  2   66[COMRAM] int 
  1906 ;; Registers used:
  1907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1913 ;;      Params:         6       0       0       0
  1914 ;;      Locals:         8       0       0       0
  1915 ;;      Temps:          2       0       0       0
  1916 ;;      Totals:        16       0       0       0
  1917 ;;Total ram usage:       16 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    6
  1920 ;; This function calls:
  1921 ;;		_dtoa
  1922 ;;		_fputc
  1923 ;; This function is called by:
  1924 ;;		_vfprintf
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text4
  1929  0006FC                     __ptext4:
  1930                           	opt callstack 0
  1931  0006FC                     _vfpfcnvrt:
  1932                           	opt callstack 22
  1933  0006FC                     
  1934                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1935  0006FC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1936  000700  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1937  000704  CFDE FFF6          	movff	postinc2,tblptrl
  1938  000708  CFDD FFF7          	movff	postdec2,tblptrh
  1939  00070C                     	if	0	;tblptru may be non-zero
  1940  00070C                     	endif
  1941  00070C                     	if	0	;tblptru may be non-zero
  1942  00070C                     	endif
  1943  00070C  0008               	tblrd		*
  1944  00070E  50F5               	movf	tablat,w,c
  1945  000710  0A25               	xorlw	37
  1946  000712  A4D8               	btfss	status,2,c
  1947  000714  EF8E  F003         	goto	u1161
  1948  000718  EF90  F003         	goto	u1160
  1949  00071C                     u1161:
  1950  00071C  EF3C  F004         	goto	l1866
  1951  000720                     u1160:
  1952  000720                     
  1953                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1954  000720  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1955  000724  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1956  000728  2ADE               	incf	postinc2,f,c
  1957  00072A  0E00               	movlw	0
  1958  00072C  22DD               	addwfc	postdec2,f,c
  1959  00072E                     
  1960                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1961  00072E  0E00               	movlw	0
  1962  000730  0100               	movlb	0	; () banked
  1963  000732  6FA3               	movwf	(_width+1)& (0+255),b
  1964  000734  0E00               	movlw	0
  1965  000736  6FA2               	movwf	_width& (0+255),b
  1966  000738  C0A2  F059         	movff	_width,_flags
  1967  00073C  C0A3  F05A         	movff	_width+1,_flags+1
  1968  000740                     
  1969                           ; BSR set to: 0
  1970                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1971  000740  6857               	setf	_prec^0,c
  1972  000742  6858               	setf	(_prec+1)^0,c
  1973  000744                     
  1974                           ; BSR set to: 0
  1975                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1976  000744  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1977  000748  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1978  00074C  CFDE FFF6          	movff	postinc2,tblptrl
  1979  000750  CFDD FFF7          	movff	postdec2,tblptrh
  1980  000754                     	if	0	;tblptru may be non-zero
  1981  000754                     	endif
  1982  000754                     	if	0	;tblptru may be non-zero
  1983  000754                     	endif
  1984  000754  0008               	tblrd		*
  1985  000756  50F5               	movf	tablat,w,c
  1986  000758  0A64               	xorlw	100
  1987  00075A  B4D8               	btfsc	status,2,c
  1988  00075C  EFB2  F003         	goto	u1171
  1989  000760  EFB4  F003         	goto	u1170
  1990  000764                     u1171:
  1991  000764  EFC6  F003         	goto	l1844
  1992  000768                     u1170:
  1993  000768                     
  1994                           ; BSR set to: 0
  1995  000768  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1996  00076C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1997  000770  CFDE FFF6          	movff	postinc2,tblptrl
  1998  000774  CFDD FFF7          	movff	postdec2,tblptrh
  1999  000778                     	if	0	;tblptru may be non-zero
  2000  000778                     	endif
  2001  000778                     	if	0	;tblptru may be non-zero
  2002  000778                     	endif
  2003  000778  0008               	tblrd		*
  2004  00077A  50F5               	movf	tablat,w,c
  2005  00077C  0A69               	xorlw	105
  2006  00077E  A4D8               	btfss	status,2,c
  2007  000780  EFC4  F003         	goto	u1181
  2008  000784  EFC6  F003         	goto	u1180
  2009  000788                     u1181:
  2010  000788  EF06  F004         	goto	l1850
  2011  00078C                     u1180:
  2012  00078C                     l1844:
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  2016  00078C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2017  000790  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2018  000794  2ADE               	incf	postinc2,f,c
  2019  000796  0E00               	movlw	0
  2020  000798  22DD               	addwfc	postdec2,f,c
  2021                           
  2022                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2023  00079A  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2024  00079E  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2025  0007A2  CFDF F049          	movff	indf2,??_vfpfcnvrt
  2026  0007A6  0E02               	movlw	2
  2027  0007A8  26DE               	addwf	postinc2,f,c
  2028  0007AA  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  2029  0007AE  0E00               	movlw	0
  2030  0007B0  22DD               	addwfc	postdec2,f,c
  2031  0007B2  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2032  0007B6  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2033  0007BA  CFDE F04B          	movff	postinc2,vfpfcnvrt@ll
  2034  0007BE  CFDD F04C          	movff	postdec2,vfpfcnvrt@ll+1
  2035  0007C2  0E00               	movlw	0
  2036  0007C4  BE4C               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  2037  0007C6  0EFF               	movlw	-1
  2038  0007C8  6E4D               	movwf	(vfpfcnvrt@ll+2)^0,c
  2039  0007CA  6E4E               	movwf	(vfpfcnvrt@ll+3)^0,c
  2040  0007CC  6E4F               	movwf	(vfpfcnvrt@ll+4)^0,c
  2041  0007CE  6E50               	movwf	(vfpfcnvrt@ll+5)^0,c
  2042  0007D0  6E51               	movwf	(vfpfcnvrt@ll+6)^0,c
  2043  0007D2  6E52               	movwf	(vfpfcnvrt@ll+7)^0,c
  2044  0007D4                     
  2045                           ; BSR set to: 0
  2046                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  2047  0007D4  C043  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  2048  0007D8  C044  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2049  0007DC  C04B  F021         	movff	vfpfcnvrt@ll,dtoa@d
  2050  0007E0  C04C  F022         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2051  0007E4  C04D  F023         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2052  0007E8  C04E  F024         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2053  0007EC  C04F  F025         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2054  0007F0  C050  F026         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2055  0007F4  C051  F027         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2056  0007F8  C052  F028         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2057  0007FC  EC0F  F002         	call	_dtoa	;wreg free
  2058  000800  C01F  F043         	movff	?_dtoa,?_vfpfcnvrt
  2059  000804  C020  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2060  000808  EF57  F004         	goto	l296
  2061  00080C                     l1850:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  2065  00080C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2066  000810  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2067  000814  CFDE FFF6          	movff	postinc2,tblptrl
  2068  000818  CFDD FFF7          	movff	postdec2,tblptrh
  2069  00081C                     	if	0	;tblptru may be non-zero
  2070  00081C                     	endif
  2071  00081C                     	if	0	;tblptru may be non-zero
  2072  00081C                     	endif
  2073  00081C  0008               	tblrd		*
  2074  00081E  50F5               	movf	tablat,w,c
  2075  000820  0A25               	xorlw	37
  2076  000822  A4D8               	btfss	status,2,c
  2077  000824  EF16  F004         	goto	u1191
  2078  000828  EF18  F004         	goto	u1190
  2079  00082C                     u1191:
  2080  00082C  EF2F  F004         	goto	l1860
  2081  000830                     u1190:
  2082  000830                     
  2083                           ; BSR set to: 0
  2084                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  2085  000830  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2086  000834  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2087  000838  2ADE               	incf	postinc2,f,c
  2088  00083A  0E00               	movlw	0
  2089  00083C  22DD               	addwfc	postdec2,f,c
  2090  00083E                     
  2091                           ; BSR set to: 0
  2092                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  2093  00083E  0E00               	movlw	0
  2094  000840  6E05               	movwf	(fputc@c+1)^0,c
  2095  000842  0E25               	movlw	37
  2096  000844  6E04               	movwf	fputc@c^0,c
  2097  000846  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  2098  00084A  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2099  00084E  ECCE  F005         	call	_fputc	;wreg free
  2100  000852                     l1856:
  2101                           
  2102                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  2103  000852  0E00               	movlw	0
  2104  000854  6E44               	movwf	(?_vfpfcnvrt+1)^0,c
  2105  000856  0E01               	movlw	1
  2106  000858  6E43               	movwf	?_vfpfcnvrt^0,c
  2107  00085A  EF57  F004         	goto	l296
  2108  00085E                     l1860:
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  2112  00085E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2113  000862  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2114  000866  2ADE               	incf	postinc2,f,c
  2115  000868  0E00               	movlw	0
  2116  00086A  22DD               	addwfc	postdec2,f,c
  2117  00086C                     
  2118                           ; BSR set to: 0
  2119                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  2120  00086C  0E00               	movlw	0
  2121  00086E  6E44               	movwf	(?_vfpfcnvrt+1)^0,c
  2122  000870  0E00               	movlw	0
  2123  000872  6E43               	movwf	?_vfpfcnvrt^0,c
  2124  000874  EF57  F004         	goto	l296
  2125  000878                     l1866:
  2126                           
  2127                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  2128  000878  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2129  00087C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2130  000880  CFDE FFF6          	movff	postinc2,tblptrl
  2131  000884  CFDD FFF7          	movff	postdec2,tblptrh
  2132  000888                     	if	0	;tblptru may be non-zero
  2133  000888                     	endif
  2134  000888                     	if	0	;tblptru may be non-zero
  2135  000888                     	endif
  2136  000888  0008               	tblrd		*
  2137  00088A  50F5               	movf	tablat,w,c
  2138  00088C  6E04               	movwf	fputc@c^0,c
  2139  00088E  6A05               	clrf	(fputc@c+1)^0,c
  2140  000890  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  2141  000894  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2142  000898  ECCE  F005         	call	_fputc	;wreg free
  2143  00089C                     
  2144                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  2145  00089C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2146  0008A0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2147  0008A4  2ADE               	incf	postinc2,f,c
  2148  0008A6  0E00               	movlw	0
  2149  0008A8  22DD               	addwfc	postdec2,f,c
  2150  0008AA  EF29  F004         	goto	l1856
  2151  0008AE                     l296:
  2152  0008AE  0012               	return		;funcret
  2153  0008B0                     __end_of_vfpfcnvrt:
  2154                           	opt callstack 0
  2155                           
  2156 ;; *************** function _dtoa *****************
  2157 ;; Defined at:
  2158 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  2161 ;;		 -> sprintf@f(6), 
  2162 ;;  d               8   32[COMRAM] long long 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  n               8   56[COMRAM] long long 
  2165 ;;  i               2   64[COMRAM] int 
  2166 ;;  s               2   54[COMRAM] int 
  2167 ;;  w               2   52[COMRAM] int 
  2168 ;;  p               2   50[COMRAM] int 
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  2   30[COMRAM] int 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2178 ;;      Params:        10       0       0       0
  2179 ;;      Locals:        18       0       0       0
  2180 ;;      Temps:          8       0       0       0
  2181 ;;      Totals:        36       0       0       0
  2182 ;;Total ram usage:       36 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    5
  2185 ;; This function calls:
  2186 ;;		___aodiv
  2187 ;;		___aomod
  2188 ;;		_abs
  2189 ;;		_pad
  2190 ;; This function is called by:
  2191 ;;		_vfpfcnvrt
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text5
  2196  00041E                     __ptext5:
  2197                           	opt callstack 0
  2198  00041E                     _dtoa:
  2199                           	opt callstack 22
  2200  00041E                     
  2201                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  2202  00041E  C021  F039         	movff	dtoa@d,dtoa@n
  2203  000422  C022  F03A         	movff	dtoa@d+1,dtoa@n+1
  2204  000426  C023  F03B         	movff	dtoa@d+2,dtoa@n+2
  2205  00042A  C024  F03C         	movff	dtoa@d+3,dtoa@n+3
  2206  00042E  C025  F03D         	movff	dtoa@d+4,dtoa@n+4
  2207  000432  C026  F03E         	movff	dtoa@d+5,dtoa@n+5
  2208  000436  C027  F03F         	movff	dtoa@d+6,dtoa@n+6
  2209  00043A  C028  F040         	movff	dtoa@d+7,dtoa@n+7
  2210  00043E                     
  2211                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  2212  00043E  BE40               	btfsc	(dtoa@n+7)^0,7,c
  2213  000440  EF24  F002         	goto	u1001
  2214  000444  EF27  F002         	goto	u1000
  2215  000448                     u1001:
  2216  000448  0E01               	movlw	1
  2217  00044A  EF28  F002         	goto	u1010
  2218  00044E                     u1000:
  2219  00044E  0E00               	movlw	0
  2220  000450                     u1010:
  2221  000450  6E37               	movwf	dtoa@s^0,c
  2222  000452  6A38               	clrf	(dtoa@s+1)^0,c
  2223                           
  2224                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  2225  000454  5037               	movf	dtoa@s^0,w,c
  2226  000456  1038               	iorwf	(dtoa@s+1)^0,w,c
  2227  000458  B4D8               	btfsc	status,2,c
  2228  00045A  EF31  F002         	goto	u1021
  2229  00045E  EF33  F002         	goto	u1020
  2230  000462                     u1021:
  2231  000462  EF43  F002         	goto	l1766
  2232  000466                     u1020:
  2233  000466                     
  2234                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  2235  000466  1E40               	comf	(dtoa@n+7)^0,f,c
  2236  000468  1E3F               	comf	(dtoa@n+6)^0,f,c
  2237  00046A  1E3E               	comf	(dtoa@n+5)^0,f,c
  2238  00046C  1E3D               	comf	(dtoa@n+4)^0,f,c
  2239  00046E  1E3C               	comf	(dtoa@n+3)^0,f,c
  2240  000470  1E3B               	comf	(dtoa@n+2)^0,f,c
  2241  000472  1E3A               	comf	(dtoa@n+1)^0,f,c
  2242  000474  6C39               	negf	dtoa@n^0,c
  2243  000476  0E00               	movlw	0
  2244  000478  223A               	addwfc	(dtoa@n+1)^0,f,c
  2245  00047A  223B               	addwfc	(dtoa@n+2)^0,f,c
  2246  00047C  223C               	addwfc	(dtoa@n+3)^0,f,c
  2247  00047E  223D               	addwfc	(dtoa@n+4)^0,f,c
  2248  000480  223E               	addwfc	(dtoa@n+5)^0,f,c
  2249  000482  223F               	addwfc	(dtoa@n+6)^0,f,c
  2250  000484  2240               	addwfc	(dtoa@n+7)^0,f,c
  2251  000486                     l1766:
  2252                           
  2253                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  2254  000486  BE58               	btfsc	(_prec+1)^0,7,c
  2255  000488  EF48  F002         	goto	u1031
  2256  00048C  EF4A  F002         	goto	u1030
  2257  000490                     u1031:
  2258  000490  EF4B  F002         	goto	l1770
  2259  000494                     u1030:
  2260  000494                     
  2261                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  2262  000494  9259               	bcf	_flags^0,1,c
  2263  000496                     l1770:
  2264                           
  2265                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  2266  000496  BE58               	btfsc	(_prec+1)^0,7,c
  2267  000498  EF58  F002         	goto	u1040
  2268  00049C  5058               	movf	(_prec+1)^0,w,c
  2269  00049E  E106               	bnz	u1041
  2270  0004A0  0457               	decf	_prec^0,w,c
  2271  0004A2  B0D8               	btfsc	status,0,c
  2272  0004A4  EF56  F002         	goto	u1041
  2273  0004A8  EF58  F002         	goto	u1040
  2274  0004AC                     u1041:
  2275  0004AC  EF5E  F002         	goto	l269
  2276  0004B0                     u1040:
  2277  0004B0  0E00               	movlw	0
  2278  0004B2  6E34               	movwf	(dtoa@p+1)^0,c
  2279  0004B4  0E01               	movlw	1
  2280  0004B6  6E33               	movwf	dtoa@p^0,c
  2281  0004B8  EF62  F002         	goto	l271
  2282  0004BC                     l269:
  2283  0004BC  C057  F033         	movff	_prec,dtoa@p
  2284  0004C0  C058  F034         	movff	_prec+1,dtoa@p+1
  2285  0004C4                     l271:
  2286                           
  2287                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  2288  0004C4  C0A2  F035         	movff	_width,dtoa@w
  2289  0004C8  C0A3  F036         	movff	_width+1,dtoa@w+1
  2290  0004CC                     
  2291                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  2292  0004CC  5037               	movf	dtoa@s^0,w,c
  2293  0004CE  1038               	iorwf	(dtoa@s+1)^0,w,c
  2294  0004D0  A4D8               	btfss	status,2,c
  2295  0004D2  EF6D  F002         	goto	u1051
  2296  0004D6  EF6F  F002         	goto	u1050
  2297  0004DA                     u1051:
  2298  0004DA  EF76  F002         	goto	l1778
  2299  0004DE                     u1050:
  2300  0004DE  A459               	btfss	_flags^0,2,c
  2301  0004E0  EF74  F002         	goto	u1061
  2302  0004E4  EF76  F002         	goto	u1060
  2303  0004E8                     u1061:
  2304  0004E8  EF79  F002         	goto	l1780
  2305  0004EC                     u1060:
  2306  0004EC                     l1778:
  2307                           
  2308                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  2309  0004EC  0635               	decf	dtoa@w^0,f,c
  2310  0004EE  A0D8               	btfss	status,0,c
  2311  0004F0  0636               	decf	(dtoa@w+1)^0,f,c
  2312  0004F2                     l1780:
  2313                           
  2314                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  2315  0004F2  0E00               	movlw	0
  2316  0004F4  6E42               	movwf	(dtoa@i+1)^0,c
  2317  0004F6  0E1F               	movlw	31
  2318  0004F8  6E41               	movwf	dtoa@i^0,c
  2319  0004FA                     
  2320                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  2321  0004FA  0E00               	movlw	0
  2322  0004FC  0100               	movlb	0	; () banked
  2323  0004FE  6FCA               	movwf	(_dbuf+31)& (0+255),b
  2324                           
  2325                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2326  000500  EFFE  F002         	goto	l1794
  2327  000504                     l1784:
  2328                           
  2329                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  2330  000504  0641               	decf	dtoa@i^0,f,c
  2331  000506  A0D8               	btfss	status,0,c
  2332  000508  0642               	decf	(dtoa@i+1)^0,f,c
  2333  00050A                     
  2334                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  2335  00050A  0EAB               	movlw	low _dbuf
  2336  00050C  2441               	addwf	dtoa@i^0,w,c
  2337  00050E  6ED9               	movwf	fsr2l,c
  2338  000510  0E00               	movlw	high _dbuf
  2339  000512  2042               	addwfc	(dtoa@i+1)^0,w,c
  2340  000514  6EDA               	movwf	fsr2h,c
  2341  000516  C039  F004         	movff	dtoa@n,___aomod@dividend
  2342  00051A  C03A  F005         	movff	dtoa@n+1,___aomod@dividend+1
  2343  00051E  C03B  F006         	movff	dtoa@n+2,___aomod@dividend+2
  2344  000522  C03C  F007         	movff	dtoa@n+3,___aomod@dividend+3
  2345  000526  C03D  F008         	movff	dtoa@n+4,___aomod@dividend+4
  2346  00052A  C03E  F009         	movff	dtoa@n+5,___aomod@dividend+5
  2347  00052E  C03F  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  2348  000532  C040  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  2349  000536  0E0A               	movlw	10
  2350  000538  6E0C               	movwf	___aomod@divisor^0,c
  2351  00053A  0E00               	movlw	0
  2352  00053C  6E0D               	movwf	(___aomod@divisor+1)^0,c
  2353  00053E  0E00               	movlw	0
  2354  000540  6E0E               	movwf	(___aomod@divisor+2)^0,c
  2355  000542  0E00               	movlw	0
  2356  000544  6E0F               	movwf	(___aomod@divisor+3)^0,c
  2357  000546  0E00               	movlw	0
  2358  000548  6E10               	movwf	(___aomod@divisor+4)^0,c
  2359  00054A  0E00               	movlw	0
  2360  00054C  6E11               	movwf	(___aomod@divisor+5)^0,c
  2361  00054E  0E00               	movlw	0
  2362  000550  6E12               	movwf	(___aomod@divisor+6)^0,c
  2363  000552  0E00               	movlw	0
  2364  000554  6E13               	movwf	(___aomod@divisor+7)^0,c
  2365  000556  EC1C  F005         	call	___aomod	;wreg free
  2366  00055A  C004  F029         	movff	?___aomod,??_dtoa
  2367  00055E  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  2368  000562  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  2369  000566  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  2370  00056A  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  2371  00056E  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  2372  000572  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  2373  000576  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  2374  00057A  C029  F016         	movff	??_dtoa,abs@a
  2375  00057E  C02B  F017         	movff	??_dtoa+2,abs@a+1
  2376  000582  EC0F  F008         	call	_abs	;wreg free
  2377  000586  5016               	movf	?_abs^0,w,c
  2378  000588  0F30               	addlw	48
  2379  00058A  6EDF               	movwf	indf2,c
  2380  00058C                     
  2381                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  2382  00058C  0633               	decf	dtoa@p^0,f,c
  2383  00058E  A0D8               	btfss	status,0,c
  2384  000590  0634               	decf	(dtoa@p+1)^0,f,c
  2385  000592                     
  2386                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  2387  000592  0635               	decf	dtoa@w^0,f,c
  2388  000594  A0D8               	btfss	status,0,c
  2389  000596  0636               	decf	(dtoa@w+1)^0,f,c
  2390  000598                     
  2391                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  2392  000598  C039  F004         	movff	dtoa@n,___aodiv@dividend
  2393  00059C  C03A  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  2394  0005A0  C03B  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  2395  0005A4  C03C  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  2396  0005A8  C03D  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  2397  0005AC  C03E  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  2398  0005B0  C03F  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  2399  0005B4  C040  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  2400  0005B8  0E0A               	movlw	10
  2401  0005BA  6E0C               	movwf	___aodiv@divisor^0,c
  2402  0005BC  0E00               	movlw	0
  2403  0005BE  6E0D               	movwf	(___aodiv@divisor+1)^0,c
  2404  0005C0  0E00               	movlw	0
  2405  0005C2  6E0E               	movwf	(___aodiv@divisor+2)^0,c
  2406  0005C4  0E00               	movlw	0
  2407  0005C6  6E0F               	movwf	(___aodiv@divisor+3)^0,c
  2408  0005C8  0E00               	movlw	0
  2409  0005CA  6E10               	movwf	(___aodiv@divisor+4)^0,c
  2410  0005CC  0E00               	movlw	0
  2411  0005CE  6E11               	movwf	(___aodiv@divisor+5)^0,c
  2412  0005D0  0E00               	movlw	0
  2413  0005D2  6E12               	movwf	(___aodiv@divisor+6)^0,c
  2414  0005D4  0E00               	movlw	0
  2415  0005D6  6E13               	movwf	(___aodiv@divisor+7)^0,c
  2416  0005D8  EC58  F004         	call	___aodiv	;wreg free
  2417  0005DC  C004  F039         	movff	?___aodiv,dtoa@n
  2418  0005E0  C005  F03A         	movff	?___aodiv+1,dtoa@n+1
  2419  0005E4  C006  F03B         	movff	?___aodiv+2,dtoa@n+2
  2420  0005E8  C007  F03C         	movff	?___aodiv+3,dtoa@n+3
  2421  0005EC  C008  F03D         	movff	?___aodiv+4,dtoa@n+4
  2422  0005F0  C009  F03E         	movff	?___aodiv+5,dtoa@n+5
  2423  0005F4  C00A  F03F         	movff	?___aodiv+6,dtoa@n+6
  2424  0005F8  C00B  F040         	movff	?___aodiv+7,dtoa@n+7
  2425  0005FC                     l1794:
  2426                           
  2427                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2428  0005FC  BE42               	btfsc	(dtoa@i+1)^0,7,c
  2429  0005FE  EF09  F003         	goto	u1071
  2430  000602  5042               	movf	(dtoa@i+1)^0,w,c
  2431  000604  E108               	bnz	u1070
  2432  000606  0441               	decf	dtoa@i^0,w,c
  2433  000608  A0D8               	btfss	status,0,c
  2434  00060A  EF09  F003         	goto	u1071
  2435  00060E  EF0B  F003         	goto	u1070
  2436  000612                     u1071:
  2437  000612  EF3B  F003         	goto	l1804
  2438  000616                     u1070:
  2439  000616  5039               	movf	dtoa@n^0,w,c
  2440  000618  103A               	iorwf	(dtoa@n+1)^0,w,c
  2441  00061A  103B               	iorwf	(dtoa@n+2)^0,w,c
  2442  00061C  103C               	iorwf	(dtoa@n+3)^0,w,c
  2443  00061E  103D               	iorwf	(dtoa@n+4)^0,w,c
  2444  000620  103E               	iorwf	(dtoa@n+5)^0,w,c
  2445  000622  103F               	iorwf	(dtoa@n+6)^0,w,c
  2446  000624  1040               	iorwf	(dtoa@n+7)^0,w,c
  2447  000626  A4D8               	btfss	status,2,c
  2448  000628  EF18  F003         	goto	u1081
  2449  00062C  EF1A  F003         	goto	u1080
  2450  000630                     u1081:
  2451  000630  EF82  F002         	goto	l1784
  2452  000634                     u1080:
  2453  000634  BE34               	btfsc	(dtoa@p+1)^0,7,c
  2454  000636  EF27  F003         	goto	u1090
  2455  00063A  5034               	movf	(dtoa@p+1)^0,w,c
  2456  00063C  E106               	bnz	u1091
  2457  00063E  0433               	decf	dtoa@p^0,w,c
  2458  000640  B0D8               	btfsc	status,0,c
  2459  000642  EF25  F003         	goto	u1091
  2460  000646  EF27  F003         	goto	u1090
  2461  00064A                     u1091:
  2462  00064A  EF82  F002         	goto	l1784
  2463  00064E                     u1090:
  2464  00064E  BE36               	btfsc	(dtoa@w+1)^0,7,c
  2465  000650  EF32  F003         	goto	u1101
  2466  000654  5036               	movf	(dtoa@w+1)^0,w,c
  2467  000656  E108               	bnz	u1100
  2468  000658  0435               	decf	dtoa@w^0,w,c
  2469  00065A  A0D8               	btfss	status,0,c
  2470  00065C  EF32  F003         	goto	u1101
  2471  000660  EF34  F003         	goto	u1100
  2472  000664                     u1101:
  2473  000664  EF3B  F003         	goto	l1804
  2474  000668                     u1100:
  2475  000668  B259               	btfsc	_flags^0,1,c
  2476  00066A  EF39  F003         	goto	u1111
  2477  00066E  EF3B  F003         	goto	u1110
  2478  000672                     u1111:
  2479  000672  EF82  F002         	goto	l1784
  2480  000676                     u1110:
  2481  000676                     l1804:
  2482                           
  2483                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  2484  000676  5037               	movf	dtoa@s^0,w,c
  2485  000678  1038               	iorwf	(dtoa@s+1)^0,w,c
  2486  00067A  A4D8               	btfss	status,2,c
  2487  00067C  EF42  F003         	goto	u1121
  2488  000680  EF44  F003         	goto	u1120
  2489  000684                     u1121:
  2490  000684  EF4B  F003         	goto	l1808
  2491  000688                     u1120:
  2492  000688  A459               	btfss	_flags^0,2,c
  2493  00068A  EF49  F003         	goto	u1131
  2494  00068E  EF4B  F003         	goto	u1130
  2495  000692                     u1131:
  2496  000692  EF69  F003         	goto	l1818
  2497  000696                     u1130:
  2498  000696                     l1808:
  2499                           
  2500                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  2501  000696  0641               	decf	dtoa@i^0,f,c
  2502  000698  A0D8               	btfss	status,0,c
  2503  00069A  0642               	decf	(dtoa@i+1)^0,f,c
  2504  00069C                     
  2505                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  2506  00069C  5037               	movf	dtoa@s^0,w,c
  2507  00069E  1038               	iorwf	(dtoa@s+1)^0,w,c
  2508  0006A0  A4D8               	btfss	status,2,c
  2509  0006A2  EF55  F003         	goto	u1141
  2510  0006A6  EF57  F003         	goto	u1140
  2511  0006AA                     u1141:
  2512  0006AA  EF5D  F003         	goto	l1814
  2513  0006AE                     u1140:
  2514  0006AE  0E00               	movlw	0
  2515  0006B0  6E32               	movwf	(_dtoa$1393+1)^0,c
  2516  0006B2  0E2B               	movlw	43
  2517  0006B4  6E31               	movwf	_dtoa$1393^0,c
  2518  0006B6  EF61  F003         	goto	l1816
  2519  0006BA                     l1814:
  2520  0006BA  0E00               	movlw	0
  2521  0006BC  6E32               	movwf	(_dtoa$1393+1)^0,c
  2522  0006BE  0E2D               	movlw	45
  2523  0006C0  6E31               	movwf	_dtoa$1393^0,c
  2524  0006C2                     l1816:
  2525  0006C2  0EAB               	movlw	low _dbuf
  2526  0006C4  2441               	addwf	dtoa@i^0,w,c
  2527  0006C6  6ED9               	movwf	fsr2l,c
  2528  0006C8  0E00               	movlw	high _dbuf
  2529  0006CA  2042               	addwfc	(dtoa@i+1)^0,w,c
  2530  0006CC  6EDA               	movwf	fsr2h,c
  2531  0006CE  C031  FFDF         	movff	_dtoa$1393,indf2
  2532  0006D2                     l1818:
  2533                           
  2534                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  2535  0006D2  C01F  F014         	movff	dtoa@fp,pad@fp
  2536  0006D6  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  2537  0006DA  0EAB               	movlw	low _dbuf
  2538  0006DC  2441               	addwf	dtoa@i^0,w,c
  2539  0006DE  6E16               	movwf	pad@buf^0,c
  2540  0006E0  0E00               	movlw	high _dbuf
  2541  0006E2  2042               	addwfc	(dtoa@i+1)^0,w,c
  2542  0006E4  6E17               	movwf	(pad@buf+1)^0,c
  2543  0006E6  C035  F018         	movff	dtoa@w,pad@p
  2544  0006EA  C036  F019         	movff	dtoa@w+1,pad@p+1
  2545  0006EE  EC33  F006         	call	_pad	;wreg free
  2546  0006F2  C014  F01F         	movff	?_pad,?_dtoa
  2547  0006F6  C015  F020         	movff	?_pad+1,?_dtoa+1
  2548  0006FA  0012               	return		;funcret
  2549  0006FC                     __end_of_dtoa:
  2550                           	opt callstack 0
  2551                           
  2552 ;; *************** function _pad *****************
  2553 ;; Defined at:
  2554 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  2557 ;;		 -> sprintf@f(6), 
  2558 ;;  buf             2   21[COMRAM] PTR unsigned char 
  2559 ;;		 -> dbuf(32), 
  2560 ;;  p               2   23[COMRAM] int 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  w               2   28[COMRAM] int 
  2563 ;;  i               2   26[COMRAM] int 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  2   19[COMRAM] int 
  2566 ;; Registers used:
  2567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2573 ;;      Params:         6       0       0       0
  2574 ;;      Locals:         4       0       0       0
  2575 ;;      Temps:          1       0       0       0
  2576 ;;      Totals:        11       0       0       0
  2577 ;;Total ram usage:       11 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    4
  2580 ;; This function calls:
  2581 ;;		_fputc
  2582 ;;		_fputs
  2583 ;;		_strlen
  2584 ;; This function is called by:
  2585 ;;		_dtoa
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	text6
  2590  000C66                     __ptext6:
  2591                           	opt callstack 0
  2592  000C66                     _pad:
  2593                           	opt callstack 22
  2594  000C66                     
  2595                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2596  000C66  A059               	btfss	_flags^0,0,c
  2597  000C68  EF38  F006         	goto	u821
  2598  000C6C  EF3A  F006         	goto	u820
  2599  000C70                     u821:
  2600  000C70  EF44  F006         	goto	l1658
  2601  000C74                     u820:
  2602  000C74                     
  2603                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2604  000C74  C016  F00D         	movff	pad@buf,fputs@s
  2605  000C78  C017  F00E         	movff	pad@buf+1,fputs@s+1
  2606  000C7C  C014  F00F         	movff	pad@fp,fputs@fp
  2607  000C80  C015  F010         	movff	pad@fp+1,fputs@fp+1
  2608  000C84  ECCC  F007         	call	_fputs	;wreg free
  2609  000C88                     l1658:
  2610                           
  2611                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2612  000C88  BE19               	btfsc	(pad@p+1)^0,7,c
  2613  000C8A  EF49  F006         	goto	u831
  2614  000C8E  EF4B  F006         	goto	u830
  2615  000C92                     u831:
  2616  000C92  EF51  F006         	goto	l1662
  2617  000C96                     u830:
  2618  000C96  C018  F01D         	movff	pad@p,pad@w
  2619  000C9A  C019  F01E         	movff	pad@p+1,pad@w+1
  2620  000C9E  EF55  F006         	goto	l258
  2621  000CA2                     l1662:
  2622  000CA2  0E00               	movlw	0
  2623  000CA4  6E1E               	movwf	(pad@w+1)^0,c
  2624  000CA6  0E00               	movlw	0
  2625  000CA8  6E1D               	movwf	pad@w^0,c
  2626  000CAA                     l258:
  2627                           
  2628                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2629  000CAA  0E00               	movlw	0
  2630  000CAC  6E1C               	movwf	(pad@i+1)^0,c
  2631  000CAE  0E00               	movlw	0
  2632  000CB0  6E1B               	movwf	pad@i^0,c
  2633                           
  2634                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2635  000CB2  EF67  F006         	goto	l1668
  2636  000CB6                     l1664:
  2637                           
  2638                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2639  000CB6  0E00               	movlw	0
  2640  000CB8  6E05               	movwf	(fputc@c+1)^0,c
  2641  000CBA  0E20               	movlw	32
  2642  000CBC  6E04               	movwf	fputc@c^0,c
  2643  000CBE  C014  F006         	movff	pad@fp,fputc@fp
  2644  000CC2  C015  F007         	movff	pad@fp+1,fputc@fp+1
  2645  000CC6  ECCE  F005         	call	_fputc	;wreg free
  2646  000CCA                     
  2647                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2648  000CCA  4A1B               	infsnz	pad@i^0,f,c
  2649  000CCC  2A1C               	incf	(pad@i+1)^0,f,c
  2650  000CCE                     l1668:
  2651                           
  2652                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2653  000CCE  501D               	movf	pad@w^0,w,c
  2654  000CD0  5C1B               	subwf	pad@i^0,w,c
  2655  000CD2  501C               	movf	(pad@i+1)^0,w,c
  2656  000CD4  0A80               	xorlw	128
  2657  000CD6  6E1A               	movwf	??_pad^0,c
  2658  000CD8  501E               	movf	(pad@w+1)^0,w,c
  2659  000CDA  0A80               	xorlw	128
  2660  000CDC  581A               	subwfb	??_pad^0,w,c
  2661  000CDE  A0D8               	btfss	status,0,c
  2662  000CE0  EF74  F006         	goto	u841
  2663  000CE4  EF76  F006         	goto	u840
  2664  000CE8                     u841:
  2665  000CE8  EF5B  F006         	goto	l1664
  2666  000CEC                     u840:
  2667  000CEC                     
  2668                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2669  000CEC  B059               	btfsc	_flags^0,0,c
  2670  000CEE  EF7B  F006         	goto	u851
  2671  000CF2  EF7D  F006         	goto	u850
  2672  000CF6                     u851:
  2673  000CF6  EF87  F006         	goto	l1672
  2674  000CFA                     u850:
  2675  000CFA                     
  2676                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2677  000CFA  C016  F00D         	movff	pad@buf,fputs@s
  2678  000CFE  C017  F00E         	movff	pad@buf+1,fputs@s+1
  2679  000D02  C014  F00F         	movff	pad@fp,fputs@fp
  2680  000D06  C015  F010         	movff	pad@fp+1,fputs@fp+1
  2681  000D0A  ECCC  F007         	call	_fputs	;wreg free
  2682  000D0E                     l1672:
  2683                           
  2684                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2685  000D0E  C016  F004         	movff	pad@buf,strlen@s
  2686  000D12  C017  F005         	movff	pad@buf+1,strlen@s+1
  2687  000D16  EC89  F008         	call	_strlen	;wreg free
  2688  000D1A  501D               	movf	pad@w^0,w,c
  2689  000D1C  2404               	addwf	?_strlen^0,w,c
  2690  000D1E  6E14               	movwf	?_pad^0,c
  2691  000D20  501E               	movf	(pad@w+1)^0,w,c
  2692  000D22  2005               	addwfc	(?_strlen+1)^0,w,c
  2693  000D24  6E15               	movwf	(?_pad+1)^0,c
  2694  000D26  0012               	return		;funcret
  2695  000D28                     __end_of_pad:
  2696                           	opt callstack 0
  2697                           
  2698 ;; *************** function _strlen *****************
  2699 ;; Defined at:
  2700 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;  s               2    3[COMRAM] PTR const unsigned char 
  2703 ;;		 -> dbuf(32), 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  a               2    5[COMRAM] PTR const unsigned char 
  2706 ;;		 -> dbuf(32), 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  2    3[COMRAM] unsigned int 
  2709 ;; Registers used:
  2710 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2716 ;;      Params:         2       0       0       0
  2717 ;;      Locals:         2       0       0       0
  2718 ;;      Temps:          0       0       0       0
  2719 ;;      Totals:         4       0       0       0
  2720 ;;Total ram usage:        4 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    1
  2723 ;; This function calls:
  2724 ;;		Nothing
  2725 ;; This function is called by:
  2726 ;;		_pad
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text7
  2731  001112                     __ptext7:
  2732                           	opt callstack 0
  2733  001112                     _strlen:
  2734                           	opt callstack 24
  2735  001112  C004  F006         	movff	strlen@s,strlen@a
  2736  001116  C005  F007         	movff	strlen@s+1,strlen@a+1
  2737  00111A  EF91  F008         	goto	l1648
  2738  00111E                     l1646:
  2739  00111E  4A04               	infsnz	strlen@s^0,f,c
  2740  001120  2A05               	incf	(strlen@s+1)^0,f,c
  2741  001122                     l1648:
  2742  001122  C004  FFD9         	movff	strlen@s,fsr2l
  2743  001126  C005  FFDA         	movff	strlen@s+1,fsr2h
  2744  00112A  50DF               	movf	indf2,w,c
  2745  00112C  A4D8               	btfss	status,2,c
  2746  00112E  EF9B  F008         	goto	u811
  2747  001132  EF9D  F008         	goto	u810
  2748  001136                     u811:
  2749  001136  EF8F  F008         	goto	l1646
  2750  00113A                     u810:
  2751  00113A  5006               	movf	strlen@a^0,w,c
  2752  00113C  5C04               	subwf	strlen@s^0,w,c
  2753  00113E  6E04               	movwf	?_strlen^0,c
  2754  001140  5007               	movf	(strlen@a+1)^0,w,c
  2755  001142  5805               	subwfb	(strlen@s+1)^0,w,c
  2756  001144  6E05               	movwf	(?_strlen+1)^0,c
  2757  001146  0012               	return		;funcret
  2758  001148                     __end_of_strlen:
  2759                           	opt callstack 0
  2760                           
  2761 ;; *************** function _fputs *****************
  2762 ;; Defined at:
  2763 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  s               2   12[COMRAM] PTR const unsigned char 
  2766 ;;		 -> dbuf(32), 
  2767 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  2768 ;;		 -> sprintf@f(6), 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  i               2   17[COMRAM] int 
  2771 ;;  c               1   16[COMRAM] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  2   12[COMRAM] int 
  2774 ;; Registers used:
  2775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2781 ;;      Params:         4       0       0       0
  2782 ;;      Locals:         3       0       0       0
  2783 ;;      Temps:          0       0       0       0
  2784 ;;      Totals:         7       0       0       0
  2785 ;;Total ram usage:        7 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    3
  2788 ;; This function calls:
  2789 ;;		_fputc
  2790 ;; This function is called by:
  2791 ;;		_pad
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text8
  2796  000F98                     __ptext8:
  2797                           	opt callstack 0
  2798  000F98                     _fputs:
  2799                           	opt callstack 22
  2800  000F98  0E00               	movlw	0
  2801  000F9A  6E13               	movwf	(fputs@i+1)^0,c
  2802  000F9C  0E00               	movlw	0
  2803  000F9E  6E12               	movwf	fputs@i^0,c
  2804  000FA0  EFDD  F007         	goto	l1642
  2805  000FA4                     l1638:
  2806  000FA4  C011  F004         	movff	fputs@c,fputc@c
  2807  000FA8  6A05               	clrf	(fputc@c+1)^0,c
  2808  000FAA  C00F  F006         	movff	fputs@fp,fputc@fp
  2809  000FAE  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  2810  000FB2  ECCE  F005         	call	_fputc	;wreg free
  2811  000FB6  4A12               	infsnz	fputs@i^0,f,c
  2812  000FB8  2A13               	incf	(fputs@i+1)^0,f,c
  2813  000FBA                     l1642:
  2814  000FBA  5012               	movf	fputs@i^0,w,c
  2815  000FBC  240D               	addwf	fputs@s^0,w,c
  2816  000FBE  6ED9               	movwf	fsr2l,c
  2817  000FC0  5013               	movf	(fputs@i+1)^0,w,c
  2818  000FC2  200E               	addwfc	(fputs@s+1)^0,w,c
  2819  000FC4  6EDA               	movwf	fsr2h,c
  2820  000FC6  50DF               	movf	indf2,w,c
  2821  000FC8  6E11               	movwf	fputs@c^0,c
  2822  000FCA  5011               	movf	fputs@c^0,w,c
  2823  000FCC  A4D8               	btfss	status,2,c
  2824  000FCE  EFEB  F007         	goto	u801
  2825  000FD2  EFED  F007         	goto	u800
  2826  000FD6                     u801:
  2827  000FD6  EFD2  F007         	goto	l1638
  2828  000FDA                     u800:
  2829  000FDA  0012               	return		;funcret
  2830  000FDC                     __end_of_fputs:
  2831                           	opt callstack 0
  2832                           
  2833 ;; *************** function _fputc *****************
  2834 ;; Defined at:
  2835 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  c               2    3[COMRAM] int 
  2838 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  2839 ;;		 -> sprintf@f(6), 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;		None
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  2    3[COMRAM] int 
  2844 ;; Registers used:
  2845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2851 ;;      Params:         4       0       0       0
  2852 ;;      Locals:         0       0       0       0
  2853 ;;      Temps:          5       0       0       0
  2854 ;;      Totals:         9       0       0       0
  2855 ;;Total ram usage:        9 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    2
  2858 ;; This function calls:
  2859 ;;		_putch
  2860 ;; This function is called by:
  2861 ;;		_pad
  2862 ;;		_vfpfcnvrt
  2863 ;;		_fputs
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text9
  2868  000B9C                     __ptext9:
  2869                           	opt callstack 0
  2870  000B9C                     _fputc:
  2871                           	opt callstack 25
  2872  000B9C  5006               	movf	fputc@fp^0,w,c
  2873  000B9E  1007               	iorwf	(fputc@fp+1)^0,w,c
  2874  000BA0  B4D8               	btfsc	status,2,c
  2875  000BA2  EFD5  F005         	goto	u761
  2876  000BA6  EFD7  F005         	goto	u760
  2877  000BAA                     u761:
  2878  000BAA  EFE0  F005         	goto	l1626
  2879  000BAE                     u760:
  2880  000BAE  5006               	movf	fputc@fp^0,w,c
  2881  000BB0  1007               	iorwf	(fputc@fp+1)^0,w,c
  2882  000BB2  A4D8               	btfss	status,2,c
  2883  000BB4  EFDE  F005         	goto	u771
  2884  000BB8  EFE0  F005         	goto	u770
  2885  000BBC                     u771:
  2886  000BBC  EFE5  F005         	goto	l1628
  2887  000BC0                     u770:
  2888  000BC0                     l1626:
  2889  000BC0  5004               	movf	fputc@c^0,w,c
  2890  000BC2  ECFB  F008         	call	_putch
  2891  000BC6  EF32  F006         	goto	l996
  2892  000BCA                     l1628:
  2893  000BCA  EE20 F004          	lfsr	2,4
  2894  000BCE  5006               	movf	fputc@fp^0,w,c
  2895  000BD0  26D9               	addwf	fsr2l,f,c
  2896  000BD2  5007               	movf	(fputc@fp+1)^0,w,c
  2897  000BD4  22DA               	addwfc	fsr2h,f,c
  2898  000BD6  50DE               	movf	postinc2,w,c
  2899  000BD8  10DE               	iorwf	postinc2,w,c
  2900  000BDA  B4D8               	btfsc	status,2,c
  2901  000BDC  EFF2  F005         	goto	u781
  2902  000BE0  EFF4  F005         	goto	u780
  2903  000BE4                     u781:
  2904  000BE4  EF0F  F006         	goto	l1632
  2905  000BE8                     u780:
  2906  000BE8  EE20 F004          	lfsr	2,4
  2907  000BEC  5006               	movf	fputc@fp^0,w,c
  2908  000BEE  26D9               	addwf	fsr2l,f,c
  2909  000BF0  5007               	movf	(fputc@fp+1)^0,w,c
  2910  000BF2  22DA               	addwfc	fsr2h,f,c
  2911  000BF4  EE10 F002          	lfsr	1,2
  2912  000BF8  5006               	movf	fputc@fp^0,w,c
  2913  000BFA  26E1               	addwf	fsr1l,f,c
  2914  000BFC  5007               	movf	(fputc@fp+1)^0,w,c
  2915  000BFE  22E2               	addwfc	fsr1h,f,c
  2916  000C00  50DE               	movf	postinc2,w,c
  2917  000C02  5CE6               	subwf	postinc1,w,c
  2918  000C04  50E6               	movf	postinc1,w,c
  2919  000C06  0A80               	xorlw	128
  2920  000C08  6E0C               	movwf	(??_fputc+4)^0,c
  2921  000C0A  50DE               	movf	postinc2,w,c
  2922  000C0C  0A80               	xorlw	128
  2923  000C0E  580C               	subwfb	(??_fputc+4)^0,w,c
  2924  000C10  B0D8               	btfsc	status,0,c
  2925  000C12  EF0D  F006         	goto	u791
  2926  000C16  EF0F  F006         	goto	u790
  2927  000C1A                     u791:
  2928  000C1A  EF32  F006         	goto	l996
  2929  000C1E                     u790:
  2930  000C1E                     l1632:
  2931  000C1E  EE20 F002          	lfsr	2,2
  2932  000C22  5006               	movf	fputc@fp^0,w,c
  2933  000C24  26D9               	addwf	fsr2l,f,c
  2934  000C26  5007               	movf	(fputc@fp+1)^0,w,c
  2935  000C28  22DA               	addwfc	fsr2h,f,c
  2936  000C2A  CFDE F008          	movff	postinc2,??_fputc
  2937  000C2E  CFDD F009          	movff	postdec2,??_fputc+1
  2938  000C32  C006  FFD9         	movff	fputc@fp,fsr2l
  2939  000C36  C007  FFDA         	movff	fputc@fp+1,fsr2h
  2940  000C3A  CFDE F00A          	movff	postinc2,??_fputc+2
  2941  000C3E  CFDD F00B          	movff	postdec2,??_fputc+3
  2942  000C42  5008               	movf	??_fputc^0,w,c
  2943  000C44  240A               	addwf	(??_fputc+2)^0,w,c
  2944  000C46  6ED9               	movwf	fsr2l,c
  2945  000C48  5009               	movf	(??_fputc+1)^0,w,c
  2946  000C4A  200B               	addwfc	(??_fputc+3)^0,w,c
  2947  000C4C  6EDA               	movwf	fsr2h,c
  2948  000C4E  C004  FFDF         	movff	fputc@c,indf2
  2949  000C52  EE20 F002          	lfsr	2,2
  2950  000C56  5006               	movf	fputc@fp^0,w,c
  2951  000C58  26D9               	addwf	fsr2l,f,c
  2952  000C5A  5007               	movf	(fputc@fp+1)^0,w,c
  2953  000C5C  22DA               	addwfc	fsr2h,f,c
  2954  000C5E  2ADE               	incf	postinc2,f,c
  2955  000C60  0E00               	movlw	0
  2956  000C62  22DD               	addwfc	postdec2,f,c
  2957  000C64                     l996:
  2958  000C64  0012               	return		;funcret
  2959  000C66                     __end_of_fputc:
  2960                           	opt callstack 0
  2961                           
  2962 ;; *************** function _putch *****************
  2963 ;; Defined at:
  2964 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  c               1    wreg     unsigned char 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  c               1    0[COMRAM] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2978 ;;      Params:         0       0       0       0
  2979 ;;      Locals:         0       0       0       0
  2980 ;;      Temps:          0       0       0       0
  2981 ;;      Totals:         0       0       0       0
  2982 ;;Total ram usage:        0 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    1
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_fputc
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text10
  2993  0011F6                     __ptext10:
  2994                           	opt callstack 0
  2995  0011F6                     _putch:
  2996                           	opt callstack 25
  2997  0011F6  0012               	return		;funcret
  2998  0011F8                     __end_of_putch:
  2999                           	opt callstack 0
  3000                           
  3001 ;; *************** function _abs *****************
  3002 ;; Defined at:
  3003 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  a               2   21[COMRAM] int 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;		None
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  2   21[COMRAM] int 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3017 ;;      Params:         2       0       0       0
  3018 ;;      Locals:         0       0       0       0
  3019 ;;      Temps:          2       0       0       0
  3020 ;;      Totals:         4       0       0       0
  3021 ;;Total ram usage:        4 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    1
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_dtoa
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text11
  3032  00101E                     __ptext11:
  3033                           	opt callstack 0
  3034  00101E                     _abs:
  3035                           	opt callstack 25
  3036  00101E  BE17               	btfsc	(abs@a+1)^0,7,c
  3037  001020  EF1C  F008         	goto	u860
  3038  001024  5017               	movf	(abs@a+1)^0,w,c
  3039  001026  E106               	bnz	u861
  3040  001028  0416               	decf	abs@a^0,w,c
  3041  00102A  B0D8               	btfsc	status,0,c
  3042  00102C  EF1A  F008         	goto	u861
  3043  001030  EF1C  F008         	goto	u860
  3044  001034                     u861:
  3045  001034  EF2A  F008         	goto	l981
  3046  001038                     u860:
  3047  001038  C016  F018         	movff	abs@a,??_abs
  3048  00103C  C017  F019         	movff	abs@a+1,??_abs+1
  3049  001040  1E18               	comf	??_abs^0,f,c
  3050  001042  1E19               	comf	(??_abs+1)^0,f,c
  3051  001044  4A18               	infsnz	??_abs^0,f,c
  3052  001046  2A19               	incf	(??_abs+1)^0,f,c
  3053  001048  C018  F016         	movff	??_abs,?_abs
  3054  00104C  C019  F017         	movff	??_abs+1,?_abs+1
  3055  001050  EF2E  F008         	goto	l984
  3056  001054                     l981:
  3057  001054  C016  F016         	movff	abs@a,?_abs
  3058  001058  C017  F017         	movff	abs@a+1,?_abs+1
  3059  00105C                     l984:
  3060  00105C  0012               	return		;funcret
  3061  00105E                     __end_of_abs:
  3062                           	opt callstack 0
  3063                           
  3064 ;; *************** function ___aomod *****************
  3065 ;; Defined at:
  3066 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  dividend        8    3[COMRAM] long long 
  3069 ;;  divisor         8   11[COMRAM] long long 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  sign            1   20[COMRAM] unsigned char 
  3072 ;;  counter         1   19[COMRAM] unsigned char 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  8    3[COMRAM] long long 
  3075 ;; Registers used:
  3076 ;;		wreg, status,2, status,0
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3082 ;;      Params:        16       0       0       0
  3083 ;;      Locals:         2       0       0       0
  3084 ;;      Temps:          0       0       0       0
  3085 ;;      Totals:        18       0       0       0
  3086 ;;Total ram usage:       18 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    1
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_dtoa
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text12
  3097  000A38                     __ptext12:
  3098                           	opt callstack 0
  3099  000A38                     ___aomod:
  3100                           	opt callstack 25
  3101  000A38  0E00               	movlw	0
  3102  000A3A  6E15               	movwf	___aomod@sign^0,c
  3103  000A3C  BE0B               	btfsc	(___aomod@dividend+7)^0,7,c
  3104  000A3E  EF25  F005         	goto	u940
  3105  000A42  EF23  F005         	goto	u941
  3106  000A46                     u941:
  3107  000A46  EF37  F005         	goto	l1732
  3108  000A4A                     u940:
  3109  000A4A  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  3110  000A4C  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  3111  000A4E  1E09               	comf	(___aomod@dividend+5)^0,f,c
  3112  000A50  1E08               	comf	(___aomod@dividend+4)^0,f,c
  3113  000A52  1E07               	comf	(___aomod@dividend+3)^0,f,c
  3114  000A54  1E06               	comf	(___aomod@dividend+2)^0,f,c
  3115  000A56  1E05               	comf	(___aomod@dividend+1)^0,f,c
  3116  000A58  6C04               	negf	___aomod@dividend^0,c
  3117  000A5A  0E00               	movlw	0
  3118  000A5C  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  3119  000A5E  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  3120  000A60  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  3121  000A62  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  3122  000A64  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  3123  000A66  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  3124  000A68  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  3125  000A6A  0E01               	movlw	1
  3126  000A6C  6E15               	movwf	___aomod@sign^0,c
  3127  000A6E                     l1732:
  3128  000A6E  BE13               	btfsc	(___aomod@divisor+7)^0,7,c
  3129  000A70  EF3E  F005         	goto	u950
  3130  000A74  EF3C  F005         	goto	u951
  3131  000A78                     u951:
  3132  000A78  EF4E  F005         	goto	l1736
  3133  000A7C                     u950:
  3134  000A7C  1E13               	comf	(___aomod@divisor+7)^0,f,c
  3135  000A7E  1E12               	comf	(___aomod@divisor+6)^0,f,c
  3136  000A80  1E11               	comf	(___aomod@divisor+5)^0,f,c
  3137  000A82  1E10               	comf	(___aomod@divisor+4)^0,f,c
  3138  000A84  1E0F               	comf	(___aomod@divisor+3)^0,f,c
  3139  000A86  1E0E               	comf	(___aomod@divisor+2)^0,f,c
  3140  000A88  1E0D               	comf	(___aomod@divisor+1)^0,f,c
  3141  000A8A  6C0C               	negf	___aomod@divisor^0,c
  3142  000A8C  0E00               	movlw	0
  3143  000A8E  220D               	addwfc	(___aomod@divisor+1)^0,f,c
  3144  000A90  220E               	addwfc	(___aomod@divisor+2)^0,f,c
  3145  000A92  220F               	addwfc	(___aomod@divisor+3)^0,f,c
  3146  000A94  2210               	addwfc	(___aomod@divisor+4)^0,f,c
  3147  000A96  2211               	addwfc	(___aomod@divisor+5)^0,f,c
  3148  000A98  2212               	addwfc	(___aomod@divisor+6)^0,f,c
  3149  000A9A  2213               	addwfc	(___aomod@divisor+7)^0,f,c
  3150  000A9C                     l1736:
  3151  000A9C  500C               	movf	___aomod@divisor^0,w,c
  3152  000A9E  100D               	iorwf	(___aomod@divisor+1)^0,w,c
  3153  000AA0  100E               	iorwf	(___aomod@divisor+2)^0,w,c
  3154  000AA2  100F               	iorwf	(___aomod@divisor+3)^0,w,c
  3155  000AA4  1010               	iorwf	(___aomod@divisor+4)^0,w,c
  3156  000AA6  1011               	iorwf	(___aomod@divisor+5)^0,w,c
  3157  000AA8  1012               	iorwf	(___aomod@divisor+6)^0,w,c
  3158  000AAA  1013               	iorwf	(___aomod@divisor+7)^0,w,c
  3159  000AAC  B4D8               	btfsc	status,2,c
  3160  000AAE  EF5B  F005         	goto	u961
  3161  000AB2  EF5D  F005         	goto	u960
  3162  000AB6                     u961:
  3163  000AB6  EFA5  F005         	goto	l1752
  3164  000ABA                     u960:
  3165  000ABA  0E01               	movlw	1
  3166  000ABC  6E14               	movwf	___aomod@counter^0,c
  3167  000ABE  EF6B  F005         	goto	l1742
  3168  000AC2                     l1740:
  3169  000AC2  90D8               	bcf	status,0,c
  3170  000AC4  360C               	rlcf	___aomod@divisor^0,f,c
  3171  000AC6  360D               	rlcf	(___aomod@divisor+1)^0,f,c
  3172  000AC8  360E               	rlcf	(___aomod@divisor+2)^0,f,c
  3173  000ACA  360F               	rlcf	(___aomod@divisor+3)^0,f,c
  3174  000ACC  3610               	rlcf	(___aomod@divisor+4)^0,f,c
  3175  000ACE  3611               	rlcf	(___aomod@divisor+5)^0,f,c
  3176  000AD0  3612               	rlcf	(___aomod@divisor+6)^0,f,c
  3177  000AD2  3613               	rlcf	(___aomod@divisor+7)^0,f,c
  3178  000AD4  2A14               	incf	___aomod@counter^0,f,c
  3179  000AD6                     l1742:
  3180  000AD6  AE13               	btfss	(___aomod@divisor+7)^0,7,c
  3181  000AD8  EF70  F005         	goto	u971
  3182  000ADC  EF72  F005         	goto	u970
  3183  000AE0                     u971:
  3184  000AE0  EF61  F005         	goto	l1740
  3185  000AE4                     u970:
  3186  000AE4                     l1744:
  3187  000AE4  500C               	movf	___aomod@divisor^0,w,c
  3188  000AE6  5C04               	subwf	___aomod@dividend^0,w,c
  3189  000AE8  500D               	movf	(___aomod@divisor+1)^0,w,c
  3190  000AEA  5805               	subwfb	(___aomod@dividend+1)^0,w,c
  3191  000AEC  500E               	movf	(___aomod@divisor+2)^0,w,c
  3192  000AEE  5806               	subwfb	(___aomod@dividend+2)^0,w,c
  3193  000AF0  500F               	movf	(___aomod@divisor+3)^0,w,c
  3194  000AF2  5807               	subwfb	(___aomod@dividend+3)^0,w,c
  3195  000AF4  5010               	movf	(___aomod@divisor+4)^0,w,c
  3196  000AF6  5808               	subwfb	(___aomod@dividend+4)^0,w,c
  3197  000AF8  5011               	movf	(___aomod@divisor+5)^0,w,c
  3198  000AFA  5809               	subwfb	(___aomod@dividend+5)^0,w,c
  3199  000AFC  5012               	movf	(___aomod@divisor+6)^0,w,c
  3200  000AFE  580A               	subwfb	(___aomod@dividend+6)^0,w,c
  3201  000B00  5013               	movf	(___aomod@divisor+7)^0,w,c
  3202  000B02  580B               	subwfb	(___aomod@dividend+7)^0,w,c
  3203  000B04  A0D8               	btfss	status,0,c
  3204  000B06  EF87  F005         	goto	u981
  3205  000B0A  EF89  F005         	goto	u980
  3206  000B0E                     u981:
  3207  000B0E  EF99  F005         	goto	l1748
  3208  000B12                     u980:
  3209  000B12  500C               	movf	___aomod@divisor^0,w,c
  3210  000B14  5E04               	subwf	___aomod@dividend^0,f,c
  3211  000B16  500D               	movf	(___aomod@divisor+1)^0,w,c
  3212  000B18  5A05               	subwfb	(___aomod@dividend+1)^0,f,c
  3213  000B1A  500E               	movf	(___aomod@divisor+2)^0,w,c
  3214  000B1C  5A06               	subwfb	(___aomod@dividend+2)^0,f,c
  3215  000B1E  500F               	movf	(___aomod@divisor+3)^0,w,c
  3216  000B20  5A07               	subwfb	(___aomod@dividend+3)^0,f,c
  3217  000B22  5010               	movf	(___aomod@divisor+4)^0,w,c
  3218  000B24  5A08               	subwfb	(___aomod@dividend+4)^0,f,c
  3219  000B26  5011               	movf	(___aomod@divisor+5)^0,w,c
  3220  000B28  5A09               	subwfb	(___aomod@dividend+5)^0,f,c
  3221  000B2A  5012               	movf	(___aomod@divisor+6)^0,w,c
  3222  000B2C  5A0A               	subwfb	(___aomod@dividend+6)^0,f,c
  3223  000B2E  5013               	movf	(___aomod@divisor+7)^0,w,c
  3224  000B30  5A0B               	subwfb	(___aomod@dividend+7)^0,f,c
  3225  000B32                     l1748:
  3226  000B32  90D8               	bcf	status,0,c
  3227  000B34  3213               	rrcf	(___aomod@divisor+7)^0,f,c
  3228  000B36  3212               	rrcf	(___aomod@divisor+6)^0,f,c
  3229  000B38  3211               	rrcf	(___aomod@divisor+5)^0,f,c
  3230  000B3A  3210               	rrcf	(___aomod@divisor+4)^0,f,c
  3231  000B3C  320F               	rrcf	(___aomod@divisor+3)^0,f,c
  3232  000B3E  320E               	rrcf	(___aomod@divisor+2)^0,f,c
  3233  000B40  320D               	rrcf	(___aomod@divisor+1)^0,f,c
  3234  000B42  320C               	rrcf	___aomod@divisor^0,f,c
  3235  000B44  2E14               	decfsz	___aomod@counter^0,f,c
  3236  000B46  EF72  F005         	goto	l1744
  3237  000B4A                     l1752:
  3238  000B4A  5015               	movf	___aomod@sign^0,w,c
  3239  000B4C  B4D8               	btfsc	status,2,c
  3240  000B4E  EFAB  F005         	goto	u991
  3241  000B52  EFAD  F005         	goto	u990
  3242  000B56                     u991:
  3243  000B56  EFBD  F005         	goto	l1756
  3244  000B5A                     u990:
  3245  000B5A  1E0B               	comf	(___aomod@dividend+7)^0,f,c
  3246  000B5C  1E0A               	comf	(___aomod@dividend+6)^0,f,c
  3247  000B5E  1E09               	comf	(___aomod@dividend+5)^0,f,c
  3248  000B60  1E08               	comf	(___aomod@dividend+4)^0,f,c
  3249  000B62  1E07               	comf	(___aomod@dividend+3)^0,f,c
  3250  000B64  1E06               	comf	(___aomod@dividend+2)^0,f,c
  3251  000B66  1E05               	comf	(___aomod@dividend+1)^0,f,c
  3252  000B68  6C04               	negf	___aomod@dividend^0,c
  3253  000B6A  0E00               	movlw	0
  3254  000B6C  2205               	addwfc	(___aomod@dividend+1)^0,f,c
  3255  000B6E  2206               	addwfc	(___aomod@dividend+2)^0,f,c
  3256  000B70  2207               	addwfc	(___aomod@dividend+3)^0,f,c
  3257  000B72  2208               	addwfc	(___aomod@dividend+4)^0,f,c
  3258  000B74  2209               	addwfc	(___aomod@dividend+5)^0,f,c
  3259  000B76  220A               	addwfc	(___aomod@dividend+6)^0,f,c
  3260  000B78  220B               	addwfc	(___aomod@dividend+7)^0,f,c
  3261  000B7A                     l1756:
  3262  000B7A  C004  F004         	movff	___aomod@dividend,?___aomod
  3263  000B7E  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  3264  000B82  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  3265  000B86  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  3266  000B8A  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  3267  000B8E  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  3268  000B92  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  3269  000B96  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  3270  000B9A  0012               	return		;funcret
  3271  000B9C                     __end_of___aomod:
  3272                           	opt callstack 0
  3273                           
  3274 ;; *************** function ___aodiv *****************
  3275 ;; Defined at:
  3276 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  dividend        8    3[COMRAM] long long 
  3279 ;;  divisor         8   11[COMRAM] long long 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  quotient        8   21[COMRAM] long long 
  3282 ;;  sign            1   20[COMRAM] unsigned char 
  3283 ;;  counter         1   19[COMRAM] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  8    3[COMRAM] long long 
  3286 ;; Registers used:
  3287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3293 ;;      Params:        16       0       0       0
  3294 ;;      Locals:        10       0       0       0
  3295 ;;      Temps:          0       0       0       0
  3296 ;;      Totals:        26       0       0       0
  3297 ;;Total ram usage:       26 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    1
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_dtoa
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text13
  3308  0008B0                     __ptext13:
  3309                           	opt callstack 0
  3310  0008B0                     ___aodiv:
  3311                           	opt callstack 25
  3312  0008B0  0E00               	movlw	0
  3313  0008B2  6E15               	movwf	___aodiv@sign^0,c
  3314  0008B4  BE13               	btfsc	(___aodiv@divisor+7)^0,7,c
  3315  0008B6  EF61  F004         	goto	u870
  3316  0008BA  EF5F  F004         	goto	u871
  3317  0008BE                     u871:
  3318  0008BE  EF73  F004         	goto	l1688
  3319  0008C2                     u870:
  3320  0008C2  1E13               	comf	(___aodiv@divisor+7)^0,f,c
  3321  0008C4  1E12               	comf	(___aodiv@divisor+6)^0,f,c
  3322  0008C6  1E11               	comf	(___aodiv@divisor+5)^0,f,c
  3323  0008C8  1E10               	comf	(___aodiv@divisor+4)^0,f,c
  3324  0008CA  1E0F               	comf	(___aodiv@divisor+3)^0,f,c
  3325  0008CC  1E0E               	comf	(___aodiv@divisor+2)^0,f,c
  3326  0008CE  1E0D               	comf	(___aodiv@divisor+1)^0,f,c
  3327  0008D0  6C0C               	negf	___aodiv@divisor^0,c
  3328  0008D2  0E00               	movlw	0
  3329  0008D4  220D               	addwfc	(___aodiv@divisor+1)^0,f,c
  3330  0008D6  220E               	addwfc	(___aodiv@divisor+2)^0,f,c
  3331  0008D8  220F               	addwfc	(___aodiv@divisor+3)^0,f,c
  3332  0008DA  2210               	addwfc	(___aodiv@divisor+4)^0,f,c
  3333  0008DC  2211               	addwfc	(___aodiv@divisor+5)^0,f,c
  3334  0008DE  2212               	addwfc	(___aodiv@divisor+6)^0,f,c
  3335  0008E0  2213               	addwfc	(___aodiv@divisor+7)^0,f,c
  3336  0008E2  0E01               	movlw	1
  3337  0008E4  6E15               	movwf	___aodiv@sign^0,c
  3338  0008E6                     l1688:
  3339  0008E6  BE0B               	btfsc	(___aodiv@dividend+7)^0,7,c
  3340  0008E8  EF7A  F004         	goto	u880
  3341  0008EC  EF78  F004         	goto	u881
  3342  0008F0                     u881:
  3343  0008F0  EF8C  F004         	goto	l1694
  3344  0008F4                     u880:
  3345  0008F4  1E0B               	comf	(___aodiv@dividend+7)^0,f,c
  3346  0008F6  1E0A               	comf	(___aodiv@dividend+6)^0,f,c
  3347  0008F8  1E09               	comf	(___aodiv@dividend+5)^0,f,c
  3348  0008FA  1E08               	comf	(___aodiv@dividend+4)^0,f,c
  3349  0008FC  1E07               	comf	(___aodiv@dividend+3)^0,f,c
  3350  0008FE  1E06               	comf	(___aodiv@dividend+2)^0,f,c
  3351  000900  1E05               	comf	(___aodiv@dividend+1)^0,f,c
  3352  000902  6C04               	negf	___aodiv@dividend^0,c
  3353  000904  0E00               	movlw	0
  3354  000906  2205               	addwfc	(___aodiv@dividend+1)^0,f,c
  3355  000908  2206               	addwfc	(___aodiv@dividend+2)^0,f,c
  3356  00090A  2207               	addwfc	(___aodiv@dividend+3)^0,f,c
  3357  00090C  2208               	addwfc	(___aodiv@dividend+4)^0,f,c
  3358  00090E  2209               	addwfc	(___aodiv@dividend+5)^0,f,c
  3359  000910  220A               	addwfc	(___aodiv@dividend+6)^0,f,c
  3360  000912  220B               	addwfc	(___aodiv@dividend+7)^0,f,c
  3361  000914  0E01               	movlw	1
  3362  000916  1A15               	xorwf	___aodiv@sign^0,f,c
  3363  000918                     l1694:
  3364  000918  EE20  F016         	lfsr	2,___aodiv@quotient
  3365  00091C  0E07               	movlw	7
  3366  00091E                     u891:
  3367  00091E  6ADE               	clrf	postinc2,c
  3368  000920  06E8               	decf	wreg,f,c
  3369  000922  E2FD               	bc	u891
  3370  000924  500C               	movf	___aodiv@divisor^0,w,c
  3371  000926  100D               	iorwf	(___aodiv@divisor+1)^0,w,c
  3372  000928  100E               	iorwf	(___aodiv@divisor+2)^0,w,c
  3373  00092A  100F               	iorwf	(___aodiv@divisor+3)^0,w,c
  3374  00092C  1010               	iorwf	(___aodiv@divisor+4)^0,w,c
  3375  00092E  1011               	iorwf	(___aodiv@divisor+5)^0,w,c
  3376  000930  1012               	iorwf	(___aodiv@divisor+6)^0,w,c
  3377  000932  1013               	iorwf	(___aodiv@divisor+7)^0,w,c
  3378  000934  B4D8               	btfsc	status,2,c
  3379  000936  EF9F  F004         	goto	u901
  3380  00093A  EFA1  F004         	goto	u900
  3381  00093E                     u901:
  3382  00093E  EFF3  F004         	goto	l1716
  3383  000942                     u900:
  3384  000942  0E01               	movlw	1
  3385  000944  6E14               	movwf	___aodiv@counter^0,c
  3386  000946  EFAF  F004         	goto	l1702
  3387  00094A                     l1700:
  3388  00094A  90D8               	bcf	status,0,c
  3389  00094C  360C               	rlcf	___aodiv@divisor^0,f,c
  3390  00094E  360D               	rlcf	(___aodiv@divisor+1)^0,f,c
  3391  000950  360E               	rlcf	(___aodiv@divisor+2)^0,f,c
  3392  000952  360F               	rlcf	(___aodiv@divisor+3)^0,f,c
  3393  000954  3610               	rlcf	(___aodiv@divisor+4)^0,f,c
  3394  000956  3611               	rlcf	(___aodiv@divisor+5)^0,f,c
  3395  000958  3612               	rlcf	(___aodiv@divisor+6)^0,f,c
  3396  00095A  3613               	rlcf	(___aodiv@divisor+7)^0,f,c
  3397  00095C  2A14               	incf	___aodiv@counter^0,f,c
  3398  00095E                     l1702:
  3399  00095E  AE13               	btfss	(___aodiv@divisor+7)^0,7,c
  3400  000960  EFB4  F004         	goto	u911
  3401  000964  EFB6  F004         	goto	u910
  3402  000968                     u911:
  3403  000968  EFA5  F004         	goto	l1700
  3404  00096C                     u910:
  3405  00096C                     l1704:
  3406  00096C  90D8               	bcf	status,0,c
  3407  00096E  3616               	rlcf	___aodiv@quotient^0,f,c
  3408  000970  3617               	rlcf	(___aodiv@quotient+1)^0,f,c
  3409  000972  3618               	rlcf	(___aodiv@quotient+2)^0,f,c
  3410  000974  3619               	rlcf	(___aodiv@quotient+3)^0,f,c
  3411  000976  361A               	rlcf	(___aodiv@quotient+4)^0,f,c
  3412  000978  361B               	rlcf	(___aodiv@quotient+5)^0,f,c
  3413  00097A  361C               	rlcf	(___aodiv@quotient+6)^0,f,c
  3414  00097C  361D               	rlcf	(___aodiv@quotient+7)^0,f,c
  3415  00097E  500C               	movf	___aodiv@divisor^0,w,c
  3416  000980  5C04               	subwf	___aodiv@dividend^0,w,c
  3417  000982  500D               	movf	(___aodiv@divisor+1)^0,w,c
  3418  000984  5805               	subwfb	(___aodiv@dividend+1)^0,w,c
  3419  000986  500E               	movf	(___aodiv@divisor+2)^0,w,c
  3420  000988  5806               	subwfb	(___aodiv@dividend+2)^0,w,c
  3421  00098A  500F               	movf	(___aodiv@divisor+3)^0,w,c
  3422  00098C  5807               	subwfb	(___aodiv@dividend+3)^0,w,c
  3423  00098E  5010               	movf	(___aodiv@divisor+4)^0,w,c
  3424  000990  5808               	subwfb	(___aodiv@dividend+4)^0,w,c
  3425  000992  5011               	movf	(___aodiv@divisor+5)^0,w,c
  3426  000994  5809               	subwfb	(___aodiv@dividend+5)^0,w,c
  3427  000996  5012               	movf	(___aodiv@divisor+6)^0,w,c
  3428  000998  580A               	subwfb	(___aodiv@dividend+6)^0,w,c
  3429  00099A  5013               	movf	(___aodiv@divisor+7)^0,w,c
  3430  00099C  580B               	subwfb	(___aodiv@dividend+7)^0,w,c
  3431  00099E  A0D8               	btfss	status,0,c
  3432  0009A0  EFD4  F004         	goto	u921
  3433  0009A4  EFD6  F004         	goto	u920
  3434  0009A8                     u921:
  3435  0009A8  EFE7  F004         	goto	l1712
  3436  0009AC                     u920:
  3437  0009AC  500C               	movf	___aodiv@divisor^0,w,c
  3438  0009AE  5E04               	subwf	___aodiv@dividend^0,f,c
  3439  0009B0  500D               	movf	(___aodiv@divisor+1)^0,w,c
  3440  0009B2  5A05               	subwfb	(___aodiv@dividend+1)^0,f,c
  3441  0009B4  500E               	movf	(___aodiv@divisor+2)^0,w,c
  3442  0009B6  5A06               	subwfb	(___aodiv@dividend+2)^0,f,c
  3443  0009B8  500F               	movf	(___aodiv@divisor+3)^0,w,c
  3444  0009BA  5A07               	subwfb	(___aodiv@dividend+3)^0,f,c
  3445  0009BC  5010               	movf	(___aodiv@divisor+4)^0,w,c
  3446  0009BE  5A08               	subwfb	(___aodiv@dividend+4)^0,f,c
  3447  0009C0  5011               	movf	(___aodiv@divisor+5)^0,w,c
  3448  0009C2  5A09               	subwfb	(___aodiv@dividend+5)^0,f,c
  3449  0009C4  5012               	movf	(___aodiv@divisor+6)^0,w,c
  3450  0009C6  5A0A               	subwfb	(___aodiv@dividend+6)^0,f,c
  3451  0009C8  5013               	movf	(___aodiv@divisor+7)^0,w,c
  3452  0009CA  5A0B               	subwfb	(___aodiv@dividend+7)^0,f,c
  3453  0009CC  8016               	bsf	___aodiv@quotient^0,0,c
  3454  0009CE                     l1712:
  3455  0009CE  90D8               	bcf	status,0,c
  3456  0009D0  3213               	rrcf	(___aodiv@divisor+7)^0,f,c
  3457  0009D2  3212               	rrcf	(___aodiv@divisor+6)^0,f,c
  3458  0009D4  3211               	rrcf	(___aodiv@divisor+5)^0,f,c
  3459  0009D6  3210               	rrcf	(___aodiv@divisor+4)^0,f,c
  3460  0009D8  320F               	rrcf	(___aodiv@divisor+3)^0,f,c
  3461  0009DA  320E               	rrcf	(___aodiv@divisor+2)^0,f,c
  3462  0009DC  320D               	rrcf	(___aodiv@divisor+1)^0,f,c
  3463  0009DE  320C               	rrcf	___aodiv@divisor^0,f,c
  3464  0009E0  2E14               	decfsz	___aodiv@counter^0,f,c
  3465  0009E2  EFB6  F004         	goto	l1704
  3466  0009E6                     l1716:
  3467  0009E6  5015               	movf	___aodiv@sign^0,w,c
  3468  0009E8  B4D8               	btfsc	status,2,c
  3469  0009EA  EFF9  F004         	goto	u931
  3470  0009EE  EFFB  F004         	goto	u930
  3471  0009F2                     u931:
  3472  0009F2  EF0B  F005         	goto	l1720
  3473  0009F6                     u930:
  3474  0009F6  1E1D               	comf	(___aodiv@quotient+7)^0,f,c
  3475  0009F8  1E1C               	comf	(___aodiv@quotient+6)^0,f,c
  3476  0009FA  1E1B               	comf	(___aodiv@quotient+5)^0,f,c
  3477  0009FC  1E1A               	comf	(___aodiv@quotient+4)^0,f,c
  3478  0009FE  1E19               	comf	(___aodiv@quotient+3)^0,f,c
  3479  000A00  1E18               	comf	(___aodiv@quotient+2)^0,f,c
  3480  000A02  1E17               	comf	(___aodiv@quotient+1)^0,f,c
  3481  000A04  6C16               	negf	___aodiv@quotient^0,c
  3482  000A06  0E00               	movlw	0
  3483  000A08  2217               	addwfc	(___aodiv@quotient+1)^0,f,c
  3484  000A0A  2218               	addwfc	(___aodiv@quotient+2)^0,f,c
  3485  000A0C  2219               	addwfc	(___aodiv@quotient+3)^0,f,c
  3486  000A0E  221A               	addwfc	(___aodiv@quotient+4)^0,f,c
  3487  000A10  221B               	addwfc	(___aodiv@quotient+5)^0,f,c
  3488  000A12  221C               	addwfc	(___aodiv@quotient+6)^0,f,c
  3489  000A14  221D               	addwfc	(___aodiv@quotient+7)^0,f,c
  3490  000A16                     l1720:
  3491  000A16  C016  F004         	movff	___aodiv@quotient,?___aodiv
  3492  000A1A  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  3493  000A1E  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  3494  000A22  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  3495  000A26  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  3496  000A2A  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  3497  000A2E  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  3498  000A32  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  3499  000A36  0012               	return		;funcret
  3500  000A38                     __end_of___aodiv:
  3501                           	opt callstack 0
  3502                           
  3503 ;; *************** function _configureTimer5 *****************
  3504 ;; Defined at:
  3505 ;;		line 358 in file "newmain.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		None
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3519 ;;      Params:         0       0       0       0
  3520 ;;      Locals:         0       0       0       0
  3521 ;;      Temps:          0       0       0       0
  3522 ;;      Totals:         0       0       0       0
  3523 ;;Total ram usage:        0 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    1
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text14
  3534  0011B4                     __ptext14:
  3535                           	opt callstack 0
  3536  0011B4                     _configureTimer5:
  3537                           	opt callstack 29
  3538  0011B4                     
  3539                           ;newmain.c: 359:     T5CONbits.T5PS1 = 1;
  3540  0011B4  88B7               	bsf	183,4,c	;volatile
  3541                           
  3542                           ;newmain.c: 360:     T5CONbits.T5PS0 = 1;
  3543  0011B6  86B7               	bsf	183,3,c	;volatile
  3544                           
  3545                           ;newmain.c: 361:     T5CONbits.T5MOD = 0;
  3546  0011B8  9AB7               	bcf	183,5,c	;volatile
  3547                           
  3548                           ;newmain.c: 362:     T5CONbits.TMR5ON = 1;
  3549  0011BA  80B7               	bsf	183,0,c	;volatile
  3550                           
  3551                           ;newmain.c: 363:     PIE3bits.TMR5IE = 1;
  3552  0011BC  80A3               	bsf	163,0,c	;volatile
  3553                           
  3554                           ;newmain.c: 364:     TMR5 = timer5ReloadValue;
  3555  0011BE  C0CF  FF87         	movff	_timer5ReloadValue,3975	;volatile
  3556  0011C2  C0D0  FF88         	movff	_timer5ReloadValue+1,3976	;volatile
  3557  0011C6  0012               	return		;funcret
  3558  0011C8                     __end_of_configureTimer5:
  3559                           	opt callstack 0
  3560                           
  3561 ;; *************** function _configureTimer1 *****************
  3562 ;; Defined at:
  3563 ;;		line 347 in file "newmain.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3577 ;;      Params:         0       0       0       0
  3578 ;;      Locals:         0       0       0       0
  3579 ;;      Temps:          0       0       0       0
  3580 ;;      Totals:         0       0       0       0
  3581 ;;Total ram usage:        0 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    1
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text15
  3592  0011C8                     __ptext15:
  3593                           	opt callstack 0
  3594  0011C8                     _configureTimer1:
  3595                           	opt callstack 29
  3596  0011C8                     
  3597                           ;newmain.c: 349:     T1CONbits.T1CKPS1 = 1;
  3598  0011C8  8ACD               	bsf	205,5,c	;volatile
  3599                           
  3600                           ;newmain.c: 350:     T1CONbits.T1CKPS0 = 1;
  3601  0011CA  88CD               	bsf	205,4,c	;volatile
  3602                           
  3603                           ;newmain.c: 352:     T1CONbits.TMR1CS = 0;
  3604  0011CC  92CD               	bcf	205,1,c	;volatile
  3605                           
  3606                           ;newmain.c: 353:     T1CONbits.TMR1ON = 1;
  3607  0011CE  80CD               	bsf	205,0,c	;volatile
  3608                           
  3609                           ;newmain.c: 354:     PIE1bits.TMR1IE = 1;
  3610  0011D0  809D               	bsf	157,0,c	;volatile
  3611  0011D2                     
  3612                           ;newmain.c: 355:     TMR1 = 0;
  3613  0011D2  0E00               	movlw	0
  3614  0011D4  6ECF               	movwf	207,c	;volatile
  3615  0011D6  0E00               	movlw	0
  3616  0011D8  6ECE               	movwf	206,c	;volatile
  3617  0011DA  0012               	return		;funcret
  3618  0011DC                     __end_of_configureTimer1:
  3619                           	opt callstack 0
  3620                           
  3621 ;; *************** function _configureTimer0 *****************
  3622 ;; Defined at:
  3623 ;;		line 329 in file "newmain.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;		None
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;		None
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  1    wreg      void 
  3630 ;; Registers used:
  3631 ;;		None
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3637 ;;      Params:         0       0       0       0
  3638 ;;      Locals:         0       0       0       0
  3639 ;;      Temps:          0       0       0       0
  3640 ;;      Totals:         0       0       0       0
  3641 ;;Total ram usage:        0 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    1
  3644 ;; This function calls:
  3645 ;;		Nothing
  3646 ;; This function is called by:
  3647 ;;		_main
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text16
  3652  00119E                     __ptext16:
  3653                           	opt callstack 0
  3654  00119E                     _configureTimer0:
  3655                           	opt callstack 29
  3656  00119E                     
  3657                           ;newmain.c: 333:     T0CONbits.PSA = 0;
  3658  00119E  96D5               	bcf	213,3,c	;volatile
  3659                           
  3660                           ;newmain.c: 334:     T0CONbits.T0SE = 0;
  3661  0011A0  98D5               	bcf	213,4,c	;volatile
  3662                           
  3663                           ;newmain.c: 335:     T0CONbits.T0CS = 0;
  3664  0011A2  9AD5               	bcf	213,5,c	;volatile
  3665                           
  3666                           ;newmain.c: 336:     T0CONbits.T016BIT = 0;
  3667  0011A4  9CD5               	bcf	213,6,c	;volatile
  3668                           
  3669                           ;newmain.c: 337:     T0CONbits.TMR0ON = 1;
  3670  0011A6  8ED5               	bsf	213,7,c	;volatile
  3671                           
  3672                           ;newmain.c: 338:     T0CONbits.T0PS0 = 0;
  3673  0011A8  90D5               	bcf	213,0,c	;volatile
  3674                           
  3675                           ;newmain.c: 339:     T0CONbits.T0PS1 = 1;
  3676  0011AA  82D5               	bsf	213,1,c	;volatile
  3677                           
  3678                           ;newmain.c: 340:     T0CONbits.T0PS2 = 0;
  3679  0011AC  94D5               	bcf	213,2,c	;volatile
  3680                           
  3681                           ;newmain.c: 341:     INTCONbits.TMR0IE = 1;
  3682  0011AE  8AF2               	bsf	242,5,c	;volatile
  3683                           
  3684                           ;newmain.c: 342:     INTCON2bits.TMR0IP = 0;
  3685  0011B0  94F1               	bcf	241,2,c	;volatile
  3686  0011B2  0012               	return		;funcret
  3687  0011B4                     __end_of_configureTimer0:
  3688                           	opt callstack 0
  3689                           
  3690 ;; *************** function _configurePWM *****************
  3691 ;; Defined at:
  3692 ;;		line 147 in file "newmain.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3706 ;;      Params:         0       0       0       0
  3707 ;;      Locals:         0       0       0       0
  3708 ;;      Temps:          0       0       0       0
  3709 ;;      Totals:         0       0       0       0
  3710 ;;Total ram usage:        0 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    1
  3713 ;; This function calls:
  3714 ;;		Nothing
  3715 ;; This function is called by:
  3716 ;;		_main
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text17
  3721  00109C                     __ptext17:
  3722                           	opt callstack 0
  3723  00109C                     _configurePWM:
  3724                           	opt callstack 29
  3725  00109C                     
  3726                           ;newmain.c: 148:     LATB = 0;
  3727  00109C  0E00               	movlw	0
  3728  00109E  6E8A               	movwf	138,c	;volatile
  3729                           
  3730                           ;newmain.c: 149:     TRISB = 0;
  3731  0010A0  0E00               	movlw	0
  3732  0010A2  6E93               	movwf	147,c	;volatile
  3733                           
  3734                           ;newmain.c: 150:     PORTB = 0;
  3735  0010A4  0E00               	movlw	0
  3736  0010A6  6E81               	movwf	129,c	;volatile
  3737  0010A8                     
  3738                           ;newmain.c: 160:     PTCON0bits.PTMOD0 = 0;
  3739  0010A8  907F               	bcf	127,0,c	;volatile
  3740  0010AA                     
  3741                           ;newmain.c: 161:     PTCON0bits.PTMOD1 = 0;
  3742  0010AA  927F               	bcf	127,1,c	;volatile
  3743  0010AC                     
  3744                           ;newmain.c: 174:     PTCON1bits.PTEN = 0;
  3745  0010AC  9E7E               	bcf	126,7,c	;volatile
  3746  0010AE                     
  3747                           ;newmain.c: 175:     PTCON1bits.PTDIR = 0;
  3748  0010AE  9C7E               	bcf	126,6,c	;volatile
  3749  0010B0                     
  3750                           ;newmain.c: 202:     PWMCON0bits.PWMEN2 = 1;
  3751  0010B0  8C6F               	bsf	111,6,c	;volatile
  3752  0010B2                     
  3753                           ;newmain.c: 203:     PWMCON0bits.PWMEN1 = 0;
  3754  0010B2  9A6F               	bcf	111,5,c	;volatile
  3755  0010B4                     
  3756                           ;newmain.c: 204:     PWMCON0bits.PWMEN0 = 0;
  3757  0010B4  986F               	bcf	111,4,c	;volatile
  3758  0010B6                     
  3759                           ;newmain.c: 206:     PWMCON0bits.PMOD0 = 0;
  3760  0010B6  906F               	bcf	111,0,c	;volatile
  3761  0010B8                     
  3762                           ;newmain.c: 207:     PWMCON0bits.PMOD1 = 0;
  3763  0010B8  926F               	bcf	111,1,c	;volatile
  3764  0010BA                     
  3765                           ;newmain.c: 208:     PWMCON0bits.PMOD2 = 0;
  3766  0010BA  946F               	bcf	111,2,c	;volatile
  3767  0010BC                     
  3768                           ;newmain.c: 216:     PWMCON1bits.UDIS = 0;
  3769  0010BC  926E               	bcf	110,1,c	;volatile
  3770  0010BE                     
  3771                           ;newmain.c: 217:     PWMCON1bits.OSYNC = 1;
  3772  0010BE  806E               	bsf	110,0,c	;volatile
  3773                           
  3774                           ;newmain.c: 222:     PTPERH = 0x01;
  3775  0010C0  0E01               	movlw	1
  3776  0010C2  6E7A               	movwf	122,c	;volatile
  3777                           
  3778                           ;newmain.c: 223:     PTPERL = 0xF3;
  3779  0010C4  0EF3               	movlw	243
  3780  0010C6  6E7B               	movwf	123,c	;volatile
  3781                           
  3782                           ;newmain.c: 229:     PDC0H = 0x00;
  3783  0010C8  0E00               	movlw	0
  3784  0010CA  6E78               	movwf	120,c	;volatile
  3785                           
  3786                           ;newmain.c: 230:     PDC0L = 0x13;
  3787  0010CC  0E13               	movlw	19
  3788  0010CE  6E79               	movwf	121,c	;volatile
  3789  0010D0                     
  3790                           ;newmain.c: 240:     OVDCOND = 0xff;
  3791  0010D0  686B               	setf	107,c	;volatile
  3792                           
  3793                           ;newmain.c: 250:     OVDCONS = 0;
  3794  0010D2  0E00               	movlw	0
  3795  0010D4  6E6A               	movwf	106,c	;volatile
  3796  0010D6  0012               	return		;funcret
  3797  0010D8                     __end_of_configurePWM:
  3798                           	opt callstack 0
  3799                           
  3800 ;; *************** function _configureInterrupts *****************
  3801 ;; Defined at:
  3802 ;;		line 265 in file "newmain.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		None
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3816 ;;      Params:         0       0       0       0
  3817 ;;      Locals:         0       0       0       0
  3818 ;;      Temps:          0       0       0       0
  3819 ;;      Totals:         0       0       0       0
  3820 ;;Total ram usage:        0 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    1
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_main
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text18
  3831  0011EC                     __ptext18:
  3832                           	opt callstack 0
  3833  0011EC                     _configureInterrupts:
  3834                           	opt callstack 29
  3835  0011EC                     
  3836                           ;newmain.c: 285:     INTCONbits.GIE = 1;
  3837  0011EC  8EF2               	bsf	242,7,c	;volatile
  3838                           
  3839                           ;newmain.c: 286:     INTCONbits.PEIE = 1;
  3840  0011EE  8CF2               	bsf	242,6,c	;volatile
  3841  0011F0  0012               	return		;funcret
  3842  0011F2                     __end_of_configureInterrupts:
  3843                           	opt callstack 0
  3844                           
  3845 ;; *************** function _configureADC *****************
  3846 ;; Defined at:
  3847 ;;		line 296 in file "newmain.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;		None
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3861 ;;      Params:         0       0       0       0
  3862 ;;      Locals:         0       0       0       0
  3863 ;;      Temps:          0       0       0       0
  3864 ;;      Totals:         0       0       0       0
  3865 ;;Total ram usage:        0 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    1
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text19
  3876  001178                     __ptext19:
  3877                           	opt callstack 0
  3878  001178                     _configureADC:
  3879                           	opt callstack 29
  3880  001178                     
  3881                           ;newmain.c: 298:     ADCON0bits.ACONV = 1;
  3882  001178  8AC2               	bsf	194,5,c	;volatile
  3883                           
  3884                           ;newmain.c: 299:     ADCON0bits.ACSCH = 0;
  3885  00117A  98C2               	bcf	194,4,c	;volatile
  3886                           
  3887                           ;newmain.c: 300:     ADCON0bits.ACMOD1 = 0;
  3888  00117C  96C2               	bcf	194,3,c	;volatile
  3889                           
  3890                           ;newmain.c: 301:     ADCON0bits.ACMOD0 = 0;
  3891  00117E  94C2               	bcf	194,2,c	;volatile
  3892  001180                     
  3893                           ;newmain.c: 303:     ADCON1 = 0;
  3894  001180  0E00               	movlw	0
  3895  001182  6EC1               	movwf	193,c	;volatile
  3896  001184                     
  3897                           ;newmain.c: 305:     ADCON2bits.ACQT2 = 1;
  3898  001184  8AC0               	bsf	192,5,c	;volatile
  3899  001186                     
  3900                           ;newmain.c: 306:     ADCON2bits.ACQT1 = 1;
  3901  001186  88C0               	bsf	192,4,c	;volatile
  3902  001188                     
  3903                           ;newmain.c: 309:     ADCON2bits.ADCS2 = 1;
  3904  001188  84C0               	bsf	192,2,c	;volatile
  3905  00118A                     
  3906                           ;newmain.c: 310:     ADCON2bits.ADCS1 = 1;
  3907  00118A  82C0               	bsf	192,1,c	;volatile
  3908  00118C                     
  3909                           ;newmain.c: 313:     ADCON3bits.ADRS1 = 1;
  3910  00118C  8E9A               	bsf	154,7,c	;volatile
  3911  00118E                     
  3912                           ;newmain.c: 315:     ADCHSbits.GASEL1 = 0;
  3913  00118E  9299               	bcf	153,1,c	;volatile
  3914  001190                     
  3915                           ;newmain.c: 316:     ADCHSbits.GASEL0 = 0;
  3916  001190  9099               	bcf	153,0,c	;volatile
  3917  001192                     
  3918                           ;newmain.c: 318:     ANSEL0bits.ANS0 = 1;
  3919  001192  80B8               	bsf	184,0,c	;volatile
  3920  001194                     
  3921                           ;newmain.c: 319:     TRISAbits.TRISA0 = 1;
  3922  001194  8092               	bsf	146,0,c	;volatile
  3923  001196                     
  3924                           ;newmain.c: 322:     PIE1bits.ADIE = 0;
  3925  001196  9C9D               	bcf	157,6,c	;volatile
  3926  001198                     
  3927                           ;newmain.c: 324:     ADCON0bits.ADON = 1;
  3928  001198  80C2               	bsf	194,0,c	;volatile
  3929  00119A                     
  3930                           ;newmain.c: 326:     ADCON0bits.GODONE = 1;
  3931  00119A  82C2               	bsf	194,1,c	;volatile
  3932  00119C  0012               	return		;funcret
  3933  00119E                     __end_of_configureADC:
  3934                           	opt callstack 0
  3935                           
  3936 ;; *************** function ___lwmod *****************
  3937 ;; Defined at:
  3938 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwmod.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  dividend        2    3[COMRAM] unsigned int 
  3941 ;;  divisor         2    5[COMRAM] unsigned int 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  counter         1    7[COMRAM] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  2    3[COMRAM] unsigned int 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3953 ;;      Params:         4       0       0       0
  3954 ;;      Locals:         1       0       0       0
  3955 ;;      Temps:          0       0       0       0
  3956 ;;      Totals:         5       0       0       0
  3957 ;;Total ram usage:        5 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    1
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text20
  3968  000E2E                     __ptext20:
  3969                           	opt callstack 0
  3970  000E2E                     ___lwmod:
  3971                           	opt callstack 29
  3972  000E2E  5006               	movf	___lwmod@divisor^0,w,c
  3973  000E30  1007               	iorwf	(___lwmod@divisor+1)^0,w,c
  3974  000E32  B4D8               	btfsc	status,2,c
  3975  000E34  EF1E  F007         	goto	u1251
  3976  000E38  EF20  F007         	goto	u1250
  3977  000E3C                     u1251:
  3978  000E3C  EF44  F007         	goto	l807
  3979  000E40                     u1250:
  3980  000E40  0E01               	movlw	1
  3981  000E42  6E08               	movwf	___lwmod@counter^0,c
  3982  000E44  EF28  F007         	goto	l2030
  3983  000E48                     l2028:
  3984  000E48  90D8               	bcf	status,0,c
  3985  000E4A  3606               	rlcf	___lwmod@divisor^0,f,c
  3986  000E4C  3607               	rlcf	(___lwmod@divisor+1)^0,f,c
  3987  000E4E  2A08               	incf	___lwmod@counter^0,f,c
  3988  000E50                     l2030:
  3989  000E50  AE07               	btfss	(___lwmod@divisor+1)^0,7,c
  3990  000E52  EF2D  F007         	goto	u1261
  3991  000E56  EF2F  F007         	goto	u1260
  3992  000E5A                     u1261:
  3993  000E5A  EF24  F007         	goto	l2028
  3994  000E5E                     u1260:
  3995  000E5E                     l2032:
  3996  000E5E  5006               	movf	___lwmod@divisor^0,w,c
  3997  000E60  5C04               	subwf	___lwmod@dividend^0,w,c
  3998  000E62  5007               	movf	(___lwmod@divisor+1)^0,w,c
  3999  000E64  5805               	subwfb	(___lwmod@dividend+1)^0,w,c
  4000  000E66  A0D8               	btfss	status,0,c
  4001  000E68  EF38  F007         	goto	u1271
  4002  000E6C  EF3A  F007         	goto	u1270
  4003  000E70                     u1271:
  4004  000E70  EF3E  F007         	goto	l2036
  4005  000E74                     u1270:
  4006  000E74  5006               	movf	___lwmod@divisor^0,w,c
  4007  000E76  5E04               	subwf	___lwmod@dividend^0,f,c
  4008  000E78  5007               	movf	(___lwmod@divisor+1)^0,w,c
  4009  000E7A  5A05               	subwfb	(___lwmod@dividend+1)^0,f,c
  4010  000E7C                     l2036:
  4011  000E7C  90D8               	bcf	status,0,c
  4012  000E7E  3207               	rrcf	(___lwmod@divisor+1)^0,f,c
  4013  000E80  3206               	rrcf	___lwmod@divisor^0,f,c
  4014  000E82  2E08               	decfsz	___lwmod@counter^0,f,c
  4015  000E84  EF2F  F007         	goto	l2032
  4016  000E88                     l807:
  4017  000E88  C004  F004         	movff	___lwmod@dividend,?___lwmod
  4018  000E8C  C005  F005         	movff	___lwmod@dividend+1,?___lwmod+1
  4019  000E90  0012               	return		;funcret
  4020  000E92                     __end_of___lwmod:
  4021                           	opt callstack 0
  4022                           
  4023 ;; *************** function ___lwdiv *****************
  4024 ;; Defined at:
  4025 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwdiv.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  dividend        2    3[COMRAM] unsigned int 
  4028 ;;  divisor         2    5[COMRAM] unsigned int 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  quotient        2    7[COMRAM] unsigned int 
  4031 ;;  counter         1    9[COMRAM] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  2    3[COMRAM] unsigned int 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4041 ;;      Params:         4       0       0       0
  4042 ;;      Locals:         3       0       0       0
  4043 ;;      Temps:          0       0       0       0
  4044 ;;      Totals:         7       0       0       0
  4045 ;;Total ram usage:        7 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    1
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_main
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text21
  4056  000DBA                     __ptext21:
  4057                           	opt callstack 0
  4058  000DBA                     ___lwdiv:
  4059                           	opt callstack 29
  4060  000DBA  0E00               	movlw	0
  4061  000DBC  6E09               	movwf	(___lwdiv@quotient+1)^0,c
  4062  000DBE  0E00               	movlw	0
  4063  000DC0  6E08               	movwf	___lwdiv@quotient^0,c
  4064  000DC2  5006               	movf	___lwdiv@divisor^0,w,c
  4065  000DC4  1007               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4066  000DC6  B4D8               	btfsc	status,2,c
  4067  000DC8  EFE8  F006         	goto	u1221
  4068  000DCC  EFEA  F006         	goto	u1220
  4069  000DD0                     u1221:
  4070  000DD0  EF12  F007         	goto	l797
  4071  000DD4                     u1220:
  4072  000DD4  0E01               	movlw	1
  4073  000DD6  6E0A               	movwf	___lwdiv@counter^0,c
  4074  000DD8  EFF2  F006         	goto	l2010
  4075  000DDC                     l2008:
  4076  000DDC  90D8               	bcf	status,0,c
  4077  000DDE  3606               	rlcf	___lwdiv@divisor^0,f,c
  4078  000DE0  3607               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4079  000DE2  2A0A               	incf	___lwdiv@counter^0,f,c
  4080  000DE4                     l2010:
  4081  000DE4  AE07               	btfss	(___lwdiv@divisor+1)^0,7,c
  4082  000DE6  EFF7  F006         	goto	u1231
  4083  000DEA  EFF9  F006         	goto	u1230
  4084  000DEE                     u1231:
  4085  000DEE  EFEE  F006         	goto	l2008
  4086  000DF2                     u1230:
  4087  000DF2                     l2012:
  4088  000DF2  90D8               	bcf	status,0,c
  4089  000DF4  3608               	rlcf	___lwdiv@quotient^0,f,c
  4090  000DF6  3609               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4091  000DF8  5006               	movf	___lwdiv@divisor^0,w,c
  4092  000DFA  5C04               	subwf	___lwdiv@dividend^0,w,c
  4093  000DFC  5007               	movf	(___lwdiv@divisor+1)^0,w,c
  4094  000DFE  5805               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4095  000E00  A0D8               	btfss	status,0,c
  4096  000E02  EF05  F007         	goto	u1241
  4097  000E06  EF07  F007         	goto	u1240
  4098  000E0A                     u1241:
  4099  000E0A  EF0C  F007         	goto	l2020
  4100  000E0E                     u1240:
  4101  000E0E  5006               	movf	___lwdiv@divisor^0,w,c
  4102  000E10  5E04               	subwf	___lwdiv@dividend^0,f,c
  4103  000E12  5007               	movf	(___lwdiv@divisor+1)^0,w,c
  4104  000E14  5A05               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4105  000E16  8008               	bsf	___lwdiv@quotient^0,0,c
  4106  000E18                     l2020:
  4107  000E18  90D8               	bcf	status,0,c
  4108  000E1A  3207               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4109  000E1C  3206               	rrcf	___lwdiv@divisor^0,f,c
  4110  000E1E  2E0A               	decfsz	___lwdiv@counter^0,f,c
  4111  000E20  EFF9  F006         	goto	l2012
  4112  000E24                     l797:
  4113  000E24  C008  F004         	movff	___lwdiv@quotient,?___lwdiv
  4114  000E28  C009  F005         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4115  000E2C  0012               	return		;funcret
  4116  000E2E                     __end_of___lwdiv:
  4117                           	opt callstack 0
  4118                           
  4119 ;; *************** function _LCD_Initialize *****************
  4120 ;; Defined at:
  4121 ;;		line 48 in file "lcd.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4135 ;;      Params:         0       0       0       0
  4136 ;;      Locals:         0       0       0       0
  4137 ;;      Temps:          2       0       0       0
  4138 ;;      Totals:         2       0       0       0
  4139 ;;Total ram usage:        2 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    3
  4142 ;; This function calls:
  4143 ;;		_LCDPutCmd
  4144 ;; This function is called by:
  4145 ;;		_main
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text22
  4150  000F46                     __ptext22:
  4151                           	opt callstack 0
  4152  000F46                     _LCD_Initialize:
  4153                           	opt callstack 27
  4154  000F46                     
  4155                           ;lcd.c: 51:     TRISCbits.RC0 = 0;
  4156  000F46  9094               	bcf	148,0,c	;volatile
  4157                           
  4158                           ;lcd.c: 52:     TRISCbits.RC1 = 0;
  4159  000F48  9294               	bcf	148,1,c	;volatile
  4160                           
  4161                           ;lcd.c: 53:     TRISCbits.RC2 = 0;
  4162  000F4A  9494               	bcf	148,2,c	;volatile
  4163                           
  4164                           ;lcd.c: 54:     TRISCbits.RC3 = 0;
  4165  000F4C  9694               	bcf	148,3,c	;volatile
  4166                           
  4167                           ;lcd.c: 55:     TRISDbits.RD0 = 0;
  4168  000F4E  9095               	bcf	149,0,c	;volatile
  4169                           
  4170                           ;lcd.c: 56:     TRISDbits.RD1 = 0;
  4171  000F50  9295               	bcf	149,1,c	;volatile
  4172                           
  4173                           ;lcd.c: 59:     PORTCbits.RC0 = 0;
  4174  000F52  9082               	bcf	130,0,c	;volatile
  4175                           
  4176                           ;lcd.c: 60:     PORTCbits.RC1 = 0;
  4177  000F54  9282               	bcf	130,1,c	;volatile
  4178                           
  4179                           ;lcd.c: 61:     PORTCbits.RC2 = 0;
  4180  000F56  9482               	bcf	130,2,c	;volatile
  4181                           
  4182                           ;lcd.c: 62:     PORTCbits.RC3 = 0;
  4183  000F58  9682               	bcf	130,3,c	;volatile
  4184                           
  4185                           ;lcd.c: 63:     PORTDbits.RD0 = 0;
  4186  000F5A  9083               	bcf	131,0,c	;volatile
  4187                           
  4188                           ;lcd.c: 64:     PORTDbits.RD1 = 0;
  4189  000F5C  9283               	bcf	131,1,c	;volatile
  4190  000F5E                     
  4191                           ;lcd.c: 71:     _delay((unsigned long)((20)*(40000000/4000.0)));
  4192  000F5E  0E02               	movlw	2
  4193  000F60  6E0A               	movwf	(??_LCD_Initialize+1)^0,c
  4194  000F62  0E04               	movlw	4
  4195  000F64  6E09               	movwf	??_LCD_Initialize^0,c
  4196  000F66  0EBA               	movlw	186
  4197  000F68                     u1697:
  4198  000F68  2EE8               	decfsz	wreg,f,c
  4199  000F6A  D7FE               	bra	u1697
  4200  000F6C  2E09               	decfsz	??_LCD_Initialize^0,f,c
  4201  000F6E  D7FC               	bra	u1697
  4202  000F70  2E0A               	decfsz	(??_LCD_Initialize+1)^0,f,c
  4203  000F72  D7FA               	bra	u1697
  4204  000F74  F000 F000          	nop2	
  4205  000F78                     
  4206                           ;lcd.c: 74:     LCDPutCmd(0x32);
  4207  000F78  0E32               	movlw	50
  4208  000F7A  EC2F  F008         	call	_LCDPutCmd
  4209  000F7E                     
  4210                           ;lcd.c: 77:     LCDPutCmd(0x28);
  4211  000F7E  0E28               	movlw	40
  4212  000F80  EC2F  F008         	call	_LCDPutCmd
  4213  000F84                     
  4214                           ;lcd.c: 80:     LCDPutCmd(0x0C);
  4215  000F84  0E0C               	movlw	12
  4216  000F86  EC2F  F008         	call	_LCDPutCmd
  4217  000F8A                     
  4218                           ;lcd.c: 82:     LCDPutCmd(0x01);
  4219  000F8A  0E01               	movlw	1
  4220  000F8C  EC2F  F008         	call	_LCDPutCmd
  4221  000F90                     
  4222                           ;lcd.c: 85:     LCDPutCmd(0x06);
  4223  000F90  0E06               	movlw	6
  4224  000F92  EC2F  F008         	call	_LCDPutCmd
  4225  000F96  0012               	return		;funcret
  4226  000F98                     __end_of_LCD_Initialize:
  4227                           	opt callstack 0
  4228                           
  4229 ;; *************** function _LCDPutCmd *****************
  4230 ;; Defined at:
  4231 ;;		line 132 in file "lcd.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  ch              1    wreg     unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  ch              1    7[COMRAM] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4245 ;;      Params:         0       0       0       0
  4246 ;;      Locals:         1       0       0       0
  4247 ;;      Temps:          1       0       0       0
  4248 ;;      Totals:         2       0       0       0
  4249 ;;Total ram usage:        2 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    2
  4252 ;; This function calls:
  4253 ;;		_LCDWriteNibble
  4254 ;; This function is called by:
  4255 ;;		_main
  4256 ;;		_LCD_Initialize
  4257 ;;		_LCDGoto
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text23
  4262  00105E                     __ptext23:
  4263                           	opt callstack 0
  4264  00105E                     _LCDPutCmd:
  4265                           	opt callstack 27
  4266                           
  4267                           ;incstack = 0
  4268                           ;LCDPutCmd@ch stored from wreg
  4269  00105E  6E08               	movwf	LCDPutCmd@ch^0,c
  4270  001060                     
  4271                           ;lcd.c: 133:     _delay((unsigned long)((5)*(40000000/4000.0)));
  4272  001060  0E41               	movlw	65
  4273  001062  6E07               	movwf	??_LCDPutCmd^0,c
  4274  001064  0EEE               	movlw	238
  4275  001066                     u1707:
  4276  001066  2EE8               	decfsz	wreg,f,c
  4277  001068  D7FE               	bra	u1707
  4278  00106A  2E07               	decfsz	??_LCDPutCmd^0,f,c
  4279  00106C  D7FC               	bra	u1707
  4280  00106E  F000 F000          	nop2	
  4281  001072                     
  4282                           ;lcd.c: 136:     LCDWriteNibble(ch, 0);
  4283  001072  0E00               	movlw	0
  4284  001074  6E04               	movwf	LCDWriteNibble@rs^0,c
  4285  001076  5008               	movf	LCDPutCmd@ch^0,w,c
  4286  001078  EC94  F006         	call	_LCDWriteNibble
  4287  00107C                     
  4288                           ;lcd.c: 139:     ch = (ch << 4);
  4289  00107C  3808               	swapf	LCDPutCmd@ch^0,w,c
  4290  00107E  0BF0               	andlw	240
  4291  001080  6E08               	movwf	LCDPutCmd@ch^0,c
  4292  001082                     
  4293                           ;lcd.c: 141:     _delay((unsigned long)((1)*(40000000/4000.0)));
  4294  001082  0E0D               	movlw	13
  4295  001084  6E07               	movwf	??_LCDPutCmd^0,c
  4296  001086  0EFC               	movlw	252
  4297  001088                     u1717:
  4298  001088  2EE8               	decfsz	wreg,f,c
  4299  00108A  D7FE               	bra	u1717
  4300  00108C  2E07               	decfsz	??_LCDPutCmd^0,f,c
  4301  00108E  D7FC               	bra	u1717
  4302  001090                     
  4303                           ;lcd.c: 144:     LCDWriteNibble(ch, 0);
  4304  001090  0E00               	movlw	0
  4305  001092  6E04               	movwf	LCDWriteNibble@rs^0,c
  4306  001094  5008               	movf	LCDPutCmd@ch^0,w,c
  4307  001096  EC94  F006         	call	_LCDWriteNibble
  4308  00109A  0012               	return		;funcret
  4309  00109C                     __end_of_LCDPutCmd:
  4310                           	opt callstack 0
  4311                           
  4312 ;; *************** function _LCDPutStr *****************
  4313 ;; Defined at:
  4314 ;;		line 147 in file "lcd.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  str             2    8[COMRAM] PTR const unsigned char 
  4317 ;;		 -> main@str1(16), 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  i               1   10[COMRAM] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4329 ;;      Params:         2       0       0       0
  4330 ;;      Locals:         1       0       0       0
  4331 ;;      Temps:          0       0       0       0
  4332 ;;      Totals:         3       0       0       0
  4333 ;;Total ram usage:        3 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    3
  4336 ;; This function calls:
  4337 ;;		_LCDPutChar
  4338 ;; This function is called by:
  4339 ;;		_main
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text24
  4344  0010D8                     __ptext24:
  4345                           	opt callstack 0
  4346  0010D8                     _LCDPutStr:
  4347                           	opt callstack 27
  4348  0010D8                     
  4349                           ;lcd.c: 148:     uint8_t i = 0;
  4350  0010D8  0E00               	movlw	0
  4351  0010DA  6E0B               	movwf	LCDPutStr@i^0,c
  4352                           
  4353                           ;lcd.c: 151:     while (str[i]) {
  4354  0010DC  EF7A  F008         	goto	l2000
  4355  0010E0                     l1996:
  4356                           
  4357                           ;lcd.c: 153:         LCDPutChar(str[i++]);
  4358  0010E0  500B               	movf	LCDPutStr@i^0,w,c
  4359  0010E2  2409               	addwf	LCDPutStr@str^0,w,c
  4360  0010E4  6ED9               	movwf	fsr2l,c
  4361  0010E6  0E00               	movlw	0
  4362  0010E8  200A               	addwfc	(LCDPutStr@str+1)^0,w,c
  4363  0010EA  6EDA               	movwf	fsr2h,c
  4364  0010EC  50DF               	movf	indf2,w,c
  4365  0010EE  ECA4  F008         	call	_LCDPutChar
  4366  0010F2  2A0B               	incf	LCDPutStr@i^0,f,c
  4367  0010F4                     l2000:
  4368                           
  4369                           ;lcd.c: 151:     while (str[i]) {
  4370  0010F4  500B               	movf	LCDPutStr@i^0,w,c
  4371  0010F6  2409               	addwf	LCDPutStr@str^0,w,c
  4372  0010F8  6ED9               	movwf	fsr2l,c
  4373  0010FA  0E00               	movlw	0
  4374  0010FC  200A               	addwfc	(LCDPutStr@str+1)^0,w,c
  4375  0010FE  6EDA               	movwf	fsr2h,c
  4376  001100  50DF               	movf	indf2,w,c
  4377  001102  A4D8               	btfss	status,2,c
  4378  001104  EF86  F008         	goto	u1211
  4379  001108  EF88  F008         	goto	u1210
  4380  00110C                     u1211:
  4381  00110C  EF70  F008         	goto	l1996
  4382  001110                     u1210:
  4383  001110  0012               	return		;funcret
  4384  001112                     __end_of_LCDPutStr:
  4385                           	opt callstack 0
  4386                           
  4387 ;; *************** function _LCDPutChar *****************
  4388 ;; Defined at:
  4389 ;;		line 119 in file "lcd.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  ch              1    wreg     unsigned char 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  ch              1    7[COMRAM] unsigned char 
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2, status,0, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4403 ;;      Params:         0       0       0       0
  4404 ;;      Locals:         1       0       0       0
  4405 ;;      Temps:          1       0       0       0
  4406 ;;      Totals:         2       0       0       0
  4407 ;;Total ram usage:        2 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    2
  4410 ;; This function calls:
  4411 ;;		_LCDWriteNibble
  4412 ;; This function is called by:
  4413 ;;		_main
  4414 ;;		_LCDPutStr
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text25
  4419  001148                     __ptext25:
  4420                           	opt callstack 0
  4421  001148                     _LCDPutChar:
  4422                           	opt callstack 27
  4423                           
  4424                           ;incstack = 0
  4425                           ;LCDPutChar@ch stored from wreg
  4426  001148  6E08               	movwf	LCDPutChar@ch^0,c
  4427  00114A                     
  4428                           ;lcd.c: 120:     _delay((unsigned long)((5)*(40000000/4000.0)));
  4429  00114A  0E41               	movlw	65
  4430  00114C  6E07               	movwf	??_LCDPutChar^0,c
  4431  00114E  0EEE               	movlw	238
  4432  001150                     u1727:
  4433  001150  2EE8               	decfsz	wreg,f,c
  4434  001152  D7FE               	bra	u1727
  4435  001154  2E07               	decfsz	??_LCDPutChar^0,f,c
  4436  001156  D7FC               	bra	u1727
  4437  001158  F000 F000          	nop2	
  4438  00115C                     
  4439                           ;lcd.c: 123:     LCDWriteNibble(ch, 1);
  4440  00115C  0E01               	movlw	1
  4441  00115E  6E04               	movwf	LCDWriteNibble@rs^0,c
  4442  001160  5008               	movf	LCDPutChar@ch^0,w,c
  4443  001162  EC94  F006         	call	_LCDWriteNibble
  4444  001166                     
  4445                           ;lcd.c: 126:     ch = (ch << 4);
  4446  001166  3808               	swapf	LCDPutChar@ch^0,w,c
  4447  001168  0BF0               	andlw	240
  4448  00116A  6E08               	movwf	LCDPutChar@ch^0,c
  4449  00116C                     
  4450                           ;lcd.c: 129:     LCDWriteNibble(ch, 1);
  4451  00116C  0E01               	movlw	1
  4452  00116E  6E04               	movwf	LCDWriteNibble@rs^0,c
  4453  001170  5008               	movf	LCDPutChar@ch^0,w,c
  4454  001172  EC94  F006         	call	_LCDWriteNibble
  4455  001176  0012               	return		;funcret
  4456  001178                     __end_of_LCDPutChar:
  4457                           	opt callstack 0
  4458                           
  4459 ;; *************** function _LCDWriteNibble *****************
  4460 ;; Defined at:
  4461 ;;		line 89 in file "lcd.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;  ch              1    wreg     unsigned char 
  4464 ;;  rs              1    3[COMRAM] unsigned char 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;  ch              1    5[COMRAM] unsigned char 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4476 ;;      Params:         1       0       0       0
  4477 ;;      Locals:         1       0       0       0
  4478 ;;      Temps:          1       0       0       0
  4479 ;;      Totals:         3       0       0       0
  4480 ;;Total ram usage:        3 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    1
  4483 ;; This function calls:
  4484 ;;		Nothing
  4485 ;; This function is called by:
  4486 ;;		_LCDPutChar
  4487 ;;		_LCDPutCmd
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text26
  4492  000D28                     __ptext26:
  4493                           	opt callstack 0
  4494  000D28                     _LCDWriteNibble:
  4495                           	opt callstack 27
  4496                           
  4497                           ;incstack = 0
  4498                           ;LCDWriteNibble@ch stored from wreg
  4499  000D28  6E06               	movwf	LCDWriteNibble@ch^0,c
  4500  000D2A                     
  4501                           ;lcd.c: 91:     ch = (ch >> 4);
  4502  000D2A  3806               	swapf	LCDWriteNibble@ch^0,w,c
  4503  000D2C  0B0F               	andlw	15
  4504  000D2E  6E06               	movwf	LCDWriteNibble@ch^0,c
  4505                           
  4506                           ;lcd.c: 94:     ch = (ch & 0x0F);
  4507  000D30  5006               	movf	LCDWriteNibble@ch^0,w,c
  4508  000D32  0B0F               	andlw	15
  4509  000D34  6E06               	movwf	LCDWriteNibble@ch^0,c
  4510                           
  4511                           ;lcd.c: 95:     PORTCbits.RC2 = ch & 0xF1;
  4512  000D36  C006  F005         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  4513  000D3A  0EF1               	movlw	241
  4514  000D3C  1605               	andwf	??_LCDWriteNibble^0,f,c
  4515  000D3E  4605               	rlncf	??_LCDWriteNibble^0,f,c
  4516  000D40  4605               	rlncf	??_LCDWriteNibble^0,f,c
  4517  000D42  5082               	movf	130,w,c	;volatile
  4518  000D44  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4519  000D46  0BFB               	andlw	-5
  4520  000D48  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4521  000D4A  6E82               	movwf	130,c	;volatile
  4522                           
  4523                           ;lcd.c: 96:     PORTCbits.RC3 = (ch & 0xF2) >> 1;
  4524  000D4C  C006  F005         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  4525  000D50  90D8               	bcf	status,0,c
  4526  000D52  3205               	rrcf	??_LCDWriteNibble^0,f,c
  4527  000D54  0E79               	movlw	121
  4528  000D56  1605               	andwf	??_LCDWriteNibble^0,f,c
  4529  000D58  4605               	rlncf	??_LCDWriteNibble^0,f,c
  4530  000D5A  4605               	rlncf	??_LCDWriteNibble^0,f,c
  4531  000D5C  4605               	rlncf	??_LCDWriteNibble^0,f,c
  4532  000D5E  5082               	movf	130,w,c	;volatile
  4533  000D60  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4534  000D62  0BF7               	andlw	-9
  4535  000D64  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4536  000D66  6E82               	movwf	130,c	;volatile
  4537                           
  4538                           ;lcd.c: 97:     PORTDbits.RD0 = (ch & 0xF4) >> 2;
  4539  000D68  C006  F005         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  4540  000D6C  90D8               	bcf	status,0,c
  4541  000D6E  3205               	rrcf	??_LCDWriteNibble^0,f,c
  4542  000D70  90D8               	bcf	status,0,c
  4543  000D72  3205               	rrcf	??_LCDWriteNibble^0,f,c
  4544  000D74  0E3D               	movlw	61
  4545  000D76  1605               	andwf	??_LCDWriteNibble^0,f,c
  4546  000D78  5083               	movf	131,w,c	;volatile
  4547  000D7A  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4548  000D7C  0BFE               	andlw	-2
  4549  000D7E  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4550  000D80  6E83               	movwf	131,c	;volatile
  4551                           
  4552                           ;lcd.c: 98:     PORTDbits.RD1 = (ch & 0xF8) >> 3;
  4553  000D82  C006  F005         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  4554  000D86  90D8               	bcf	status,0,c
  4555  000D88  3205               	rrcf	??_LCDWriteNibble^0,f,c
  4556  000D8A  90D8               	bcf	status,0,c
  4557  000D8C  3205               	rrcf	??_LCDWriteNibble^0,f,c
  4558  000D8E  90D8               	bcf	status,0,c
  4559  000D90  3205               	rrcf	??_LCDWriteNibble^0,f,c
  4560  000D92  0E1F               	movlw	31
  4561  000D94  1605               	andwf	??_LCDWriteNibble^0,f,c
  4562  000D96  4605               	rlncf	??_LCDWriteNibble^0,f,c
  4563  000D98  5083               	movf	131,w,c	;volatile
  4564  000D9A  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4565  000D9C  0BFD               	andlw	-3
  4566  000D9E  1805               	xorwf	??_LCDWriteNibble^0,w,c
  4567  000DA0  6E83               	movwf	131,c	;volatile
  4568  000DA2                     
  4569                           ;lcd.c: 107:     PORTCbits.RC0 = rs;
  4570  000DA2  B004               	btfsc	LCDWriteNibble@rs^0,0,c
  4571  000DA4  D002               	bra	u1155
  4572  000DA6  9082               	bcf	130,0,c	;volatile
  4573  000DA8  D001               	bra	u1156
  4574  000DAA                     u1155:
  4575  000DAA  8082               	bsf	130,0,c	;volatile
  4576  000DAC                     u1156:
  4577  000DAC                     
  4578                           ;lcd.c: 113:     PORTCbits.RC1 = 1;
  4579  000DAC  8282               	bsf	130,1,c	;volatile
  4580  000DAE                     
  4581                           ;lcd.c: 114:     _delay((unsigned long)((1)*(40000000/4000000.0)));
  4582  000DAE  0E03               	movlw	3
  4583  000DB0                     u1737:
  4584  000DB0  2EE8               	decfsz	wreg,f,c
  4585  000DB2  D7FE               	bra	u1737
  4586  000DB4  F000               	nop	
  4587  000DB6                     
  4588                           ;lcd.c: 116:     PORTCbits.RC1 = 0;
  4589  000DB6  9282               	bcf	130,1,c	;volatile
  4590  000DB8  0012               	return		;funcret
  4591  000DBA                     __end_of_LCDWriteNibble:
  4592                           	opt callstack 0
  4593                           
  4594 ;; *************** function _tcInt *****************
  4595 ;; Defined at:
  4596 ;;		line 489 in file "newmain.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, status,2
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4610 ;;      Params:         0       0       0       0
  4611 ;;      Locals:         0       0       0       0
  4612 ;;      Temps:          3       0       0       0
  4613 ;;      Totals:         3       0       0       0
  4614 ;;Total ram usage:        3 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		Interrupt level 1
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	intcodelo
  4624  000018                     __pintcodelo:
  4625                           	opt callstack 0
  4626  000018                     _tcInt:
  4627                           	opt callstack 22
  4628                           
  4629                           ;incstack = 0
  4630  000018  805B               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  4631  00001A  CFD8 F001          	movff	status,??_tcInt
  4632  00001E  CFE8 F002          	movff	wreg,??_tcInt+1
  4633  000022  CFE0 F003          	movff	bsr,??_tcInt+2
  4634  000026                     
  4635                           ;newmain.c: 490:     if (INTCONbits.TMR0IF) {
  4636  000026  A4F2               	btfss	242,2,c	;volatile
  4637  000028  EF18  F000         	goto	i1u145_21
  4638  00002C  EF1A  F000         	goto	i1u145_20
  4639  000030                     i1u145_21:
  4640  000030  EF22  F000         	goto	i1l2194
  4641  000034                     i1u145_20:
  4642  000034                     
  4643                           ;newmain.c: 491:         INTCONbits.TMR0IF = 0;
  4644  000034  94F2               	bcf	242,2,c	;volatile
  4645  000036                     
  4646                           ;newmain.c: 492:         shouldUpdateDutyCycle = 1;
  4647  000036  0E01               	movlw	1
  4648  000038  0100               	movlb	0	; () banked
  4649  00003A  6FA6               	movwf	_shouldUpdateDutyCycle& (0+255),b	;volatile
  4650  00003C                     
  4651                           ; BSR set to: 0
  4652                           ;newmain.c: 496:         TMR0 = timer0ReloadValue;
  4653  00003C  C0CD  FFD6         	movff	_timer0ReloadValue,4054	;volatile
  4654  000040  C0CE  FFD7         	movff	_timer0ReloadValue+1,4055	;volatile
  4655  000044                     i1l2194:
  4656                           
  4657                           ;newmain.c: 499:     if (PIR1bits.TMR1IF) {
  4658  000044  A09E               	btfss	158,0,c	;volatile
  4659  000046  EF27  F000         	goto	i1u146_21
  4660  00004A  EF29  F000         	goto	i1u146_20
  4661  00004E                     i1u146_21:
  4662  00004E  EF31  F000         	goto	i1l2200
  4663  000052                     i1u146_20:
  4664  000052                     
  4665                           ;newmain.c: 500:         PIR1bits.TMR1IF = 0;
  4666  000052  909E               	bcf	158,0,c	;volatile
  4667  000054                     
  4668                           ;newmain.c: 501:         TMR1 = 0;
  4669  000054  0E00               	movlw	0
  4670  000056  6ECF               	movwf	207,c	;volatile
  4671  000058  0E00               	movlw	0
  4672  00005A  6ECE               	movwf	206,c	;volatile
  4673                           
  4674                           ;newmain.c: 503:         shouldDisplay = 1;
  4675  00005C  0E01               	movlw	1
  4676  00005E  0100               	movlb	0	; () banked
  4677  000060  6FA5               	movwf	_shouldDisplay& (0+255),b	;volatile
  4678  000062                     i1l2200:
  4679                           
  4680                           ;newmain.c: 507:     if (PIR3bits.TMR5IF) {
  4681  000062  A0A4               	btfss	164,0,c	;volatile
  4682  000064  EF36  F000         	goto	i1u147_21
  4683  000068  EF38  F000         	goto	i1u147_20
  4684  00006C                     i1u147_21:
  4685  00006C  EF40  F000         	goto	i1l191
  4686  000070                     i1u147_20:
  4687  000070                     
  4688                           ;newmain.c: 508:         PIR3bits.TMR5IF = 0;
  4689  000070  90A4               	bcf	164,0,c	;volatile
  4690                           
  4691                           ;newmain.c: 509:         TMR5 = timer5ReloadValue;
  4692  000072  C0CF  FF87         	movff	_timer5ReloadValue,3975	;volatile
  4693  000076  C0D0  FF88         	movff	_timer5ReloadValue+1,3976	;volatile
  4694  00007A                     
  4695                           ;newmain.c: 510:         shouldUpdateTimer0Preload = 1;
  4696  00007A  0E01               	movlw	1
  4697  00007C  0100               	movlb	0	; () banked
  4698  00007E  6FA4               	movwf	_shouldUpdateTimer0Preload& (0+255),b	;volatile
  4699  000080                     i1l191:
  4700  000080  C003  FFE0         	movff	??_tcInt+2,bsr
  4701  000084  C002  FFE8         	movff	??_tcInt+1,wreg
  4702  000088  C001  FFD8         	movff	??_tcInt,status
  4703  00008C  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  4704  00008E  0010               	retfie	
  4705  000090                     __end_of_tcInt:
  4706                           	opt callstack 0
  4707                           
  4708                           	psect	rparam
  4709  0000                     
  4710                           	psect	temp
  4711  00005B                     btemp:
  4712                           	opt callstack 0
  4713  00005B                     	ds	1
  4714  0000                     int$flags	set	btemp
  4715  0000                     wtemp8	set	btemp+1
  4716  0000                     ttemp5	set	btemp+1
  4717  0000                     ttemp6	set	btemp+4
  4718  0000                     ttemp7	set	btemp+8
  4719                           tosu	equ	0xFFF
  4720                           tosh	equ	0xFFE
  4721                           tosl	equ	0xFFD
  4722                           stkptr	equ	0xFFC
  4723                           pclatu	equ	0xFFB
  4724                           pclath	equ	0xFFA
  4725                           pcl	equ	0xFF9
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           indf0	equ	0xFEF
  4733                           postinc0	equ	0xFEE
  4734                           postdec0	equ	0xFED
  4735                           preinc0	equ	0xFEC
  4736                           plusw0	equ	0xFEB
  4737                           fsr0h	equ	0xFEA
  4738                           fsr0l	equ	0xFE9
  4739                           wreg	equ	0xFE8
  4740                           indf1	equ	0xFE7
  4741                           postinc1	equ	0xFE6
  4742                           postdec1	equ	0xFE5
  4743                           preinc1	equ	0xFE4
  4744                           plusw1	equ	0xFE3
  4745                           fsr1h	equ	0xFE2
  4746                           fsr1l	equ	0xFE1
  4747                           bsr	equ	0xFE0
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           preinc2	equ	0xFDC
  4752                           plusw2	equ	0xFDB
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    722
    Data        16
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     86      90
    BANK0           160     60     123
    BANK1           256      0       0
    BANK2           244      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@str1(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@str1(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1854_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@str1(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@str1(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 16
		 -> main@str1(BANK0[16]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_Initialize->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble

Critical Paths under _tcInt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf

Critical Paths under _tcInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tcInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tcInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   10280
                                             84 COMRAM     2     2      0
                                             22 BANK0     38    38      0
                         _LCDPutChar
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
                            ___lwdiv
                            ___lwmod
                       _configureADC
                _configureInterrupts
                       _configurePWM
                    _configureTimer0
                    _configureTimer1
                    _configureTimer5
                            _sprintf
                           _startPWM
 ---------------------------------------------------------------------------------
 (1) _startPWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6710
                                              6 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6224
                                             82 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             66 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             30 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _configureTimer5                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureTimer1                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureTimer0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configurePWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureInterrupts                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     311
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     466
                                              3 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       2     2      0     527
                                              8 COMRAM     2     2      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     527
                                              6 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            3     1      2     693
                                              8 COMRAM     3     1      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           2     2      0     527
                                              6 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       3     2      1     460
                                              3 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _tcInt                                                3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDPutChar
     _LCDWriteNibble
   _LCDPutCmd
     _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   ___lwdiv
   ___lwmod
   _configureADC
   _configureInterrupts
   _configurePWM
   _configureTimer0
   _configureTimer1
   _configureTimer5
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
   _startPWM

 _tcInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F3      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            F4      0       0       8        0.0%
BANK2               F4      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3C      7B       4       76.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     56      5A       1       95.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D5       5        0.0%
DATA                 0      0      D5      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jan 09 11:47:59 2020

               ?_configureADC 0001                 ?_configurePWM 0001                _LCD_Initialize 0F46  
                 ?_LCDPutChar 0001                            _d1 00D6                            bsr 000FE0  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l212 1176                           l221 1110  
                         l133 10D6                           l206 0F96                           l142 11F0  
                         l302 0EEA                           l215 109A                           l151 11DA  
                         l303 0EF2                           l136 11F4                           l209 0DB8  
                         l145 119C                           l154 11C6                           l148 11B2  
                         l420 0A36                           l261 0CEC                           l263 0D26  
                         l271 04C4                           l433 0B9A                           l258 0CAA  
                         l269 04BC                           l296 08AE                           l289 06FA  
                         l804 0E2C                           l814 0E90                           l807 0E88  
                         l797 0E24                           l981 1054                           l984 105C  
                         l996 0C64                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                         u800 0FDA                           u801 0FD6                           u810 113A  
                         u811 1136                           u900 0942                           u820 0C74  
                         u901 093E                           u821 0C70                           u910 096C  
                         u830 0C96                           u911 0968                           u831 0C92  
                         u920 09AC                           u760 0BAE                           u840 0CEC  
                         u921 09A8                           u761 0BAA                           u841 0CE8  
                         u930 09F6                           u770 0BC0                           u850 0CFA  
                         u931 09F2                           u771 0BBC                           u851 0CF6  
                         u940 0A4A                           u860 1038                           u780 0BE8  
                         u941 0A46                           u861 1034                           u781 0BE4  
                         u870 08C2                           u950 0A7C                           u790 0C1E  
                         u871 08BE                           u951 0A78                           u791 0C1A  
                         u880 08F4                           u960 0ABA                           u881 08F0  
                         u961 0AB6                           u970 0AE4                           u891 091E  
                         u971 0AE0                           u980 0B12                           u981 0B0E  
                         u990 0B5A                           u991 0B56                           _abs 101E  
                         _pad 0C66                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                        l1011 0F44                          l1004 0FDA                          l1020 1146  
                        l1014 11F6                          l2000 10F4                          l2010 0DE4  
                        l2002 0DBA                          ?_abs 0016                          l2020 0E18  
                        l2012 0DF2                          l2004 0DC2                          l2022 0E1E  
                        l2014 0DF8                          l2006 0DD4                          l2030 0E50  
                        l2016 0E0E                          l2008 0DDC                          l2032 0E5E  
                        l2024 0E2E                          l2018 0E16                          l2034 0E74  
                        l2026 0E40                          l2036 0E7C                          l2028 0E48  
                        l2220 0E92                          l2300 01DA                          l2038 0E82  
                        l2222 0E9A                          l2230 0F06                          l2310 01F4  
                        l2302 01DC                          l2224 0EA8                          l2232 0F0E  
                        l2320 025A                          l2312 0206                          l2304 01DE  
                        l2240 0094                          l2226 0ECE                          l2234 0F16  
                        l2330 02A2                          l2322 0266                          l2314 021E  
                        l2306 01E0                          l2250 00A8                          l2242 0098  
                        l1700 094A                          l2236 0F32                          l2228 0EF4  
                        l2340 02F2                          l2332 02BE                          l2324 026C  
                        l2316 0236                          l2308 01E4                          l2260 00B8  
                        l2252 00AC                          l2244 009C                          l1710 09CC  
                        l1702 095E                          l1630 0BE8                          l1622 0B9C  
                        l2350 0334                          l2342 0318                          l2334 02C2  
                        l2326 0274                          l2318 023C                          l2270 00D2  
                        l2262 00BA                          l2254 00B0                          l2246 00A0  
                        l1720 0A16                          l1712 09CE                          l1704 096C  
                        l1632 0C1E                          l1624 0BAE                          l1640 0FB6  
                        l1800 064E                          l2360 036A                          l2352 033C  
                        l2344 0320                          l2336 02D4                          l2328 027E  
                        l2280 010A                          l2272 00E2                          l2264 00BC  
                        l2256 00B4                          l2248 00A4                          l1714 09E0  
                        l1706 097E                          l1730 0A6A                          l1626 0BC0  
                        l1642 0FBA                          l1650 113A                          l1810 069C  
                        l1802 0668                          l2370 03A8                          l2362 036E  
                        l2354 0344                          l2346 032E                          l2290 017C  
                        l2282 010E                          l2274 00E6                          l2266 00BE  
                        l2258 00B6                          l1900 109C                          l1708 09AC  
                        l1716 09E6                          l1740 0AC2                          l1732 0A6E  
                        l1724 0A38                          l1628 0BCA                          l1636 0F98  
                        l1644 1112                          l1660 0C96                          l1812 06AE  
                        l1804 0676                          l2380 03EA                          l2364 038A  
                        l2372 03C4                          l2348 0332                          l2356 0348  
                        l2292 0180                          l2284 0138                          l2276 00F6  
                        l2268 00C0                          l1830 0DB6                          l1822 0D2A  
                        l1910 10B0                          l1902 10A8                          l1718 09F6  
                        l1750 0B44                          l1742 0AD6                          l1734 0A7C  
                        l1726 0A3C                          l1638 0FA4                          l1646 111E  
                        l1670 0CFA                          l1662 0CA2                          l1654 0C66  
                        l1814 06BA                          l1806 0688                          l2382 0410  
                        l2374 03C6                          l2366 0390                          l2358 0358  
                        l2294 0196                          l2286 013C                          l2278 00FA  
                        l1824 0DA2                          l1920 10BA                          l1912 10B2  
                        l1904 10AA                          l1680 08B0                          l1744 0AE4  
                        l1752 0B4A                          l1736 0A9C                          l1728 0A4A  
                        l1648 1122                          l1672 0D0E                          l1664 0CB6  
                        l1656 0C74                          l1816 06C2                          l1808 0696  
                        l1760 041E                          l1840 0744                          l1832 06FC  
                        l2384 0414                          l2368 03A6                          l2376 03CA  
                        l2296 01C0                          l2288 0152                          l1826 0DAC  
                        l1930 11EC                          l1922 10BC                          l1914 10B4  
                        l1906 10AC                          l1690 08F4                          l1682 08B4  
                        l1754 0B5A                          l1746 0B12                          l1738 0ABA  
                        l1666 0CCA                          l1658 0C88                          l1818 06D2  
                        l1770 0496                          l1762 043E                          l1850 080C  
                        l1842 0768                          l1834 0720                          l2378 03D8  
                        l2298 01C4                          l1828 0DAE                          l1940 1188  
                        l1932 1178                          l1924 10BE                          l1916 10B6  
                        l1908 10AE                          l1692 0914                          l1684 08C2  
                        l1756 0B7A                          l1748 0B32                          l1676 101E  
                        l1668 0CCE                          l1780 04F2                          l1772 04B0  
                        l1764 0466                          l1852 0830                          l1860 085E  
                        l1844 078C                          l1836 072E                          l1950 1192  
                        l1942 118A                          l1934 1180                          l1926 10D0  
                        l1918 10B8                          l1694 0918                          l1686 08E2  
                        l1678 1038                          l1790 0592                          l1782 04FA  
                        l1774 04CC                          l1766 0486                          l1862 086C  
                        l1854 083E                          l1846 07D4                          l1838 0740  
                        l1880 1082                          l1952 1194                          l1944 118C  
                        l1936 1184                          l1960 119E                          l1696 0924  
                        l1688 08E6                          l1792 0598                          l1784 0504  
                        l1776 04DE                          l1768 0494                          l1856 0852  
                        l1928 11F2                          l1890 116C                          l1882 1090  
                        l1874 1060                          l1970 0F5E                          l1954 1196  
                        l1946 118E                          l1938 1186                          l1962 11C8  
                        l1698 0942                          l1786 050A                          l1794 05FC  
                        l1778 04EC                          l1866 0878                          l1884 114A  
                        l1876 1072                          l1980 0F90                          l1972 0F78  
                        l1956 1198                          l1948 1190                          l1964 11D2  
                        l1796 0616                          l1788 058C                          l1868 089C  
                        l1886 115C                          l1878 107C                          l1974 0F7E  
                        l1958 119A                          l1966 11B4                          l1798 0634  
                        ?_pad 0014                          l1888 1166                          l1976 0F84  
                        l1968 0F46                          l1994 10D8                          l1978 0F8A  
                        l1996 10E0                          l1998 10F2                          STR_1 3DBB  
                        u1000 044E                          u1001 0448                          u1010 0450  
                        u1100 0668                          u1020 0466                          u1101 0664  
                        u1021 0462                          u1110 0676                          u1030 0494  
                        u1111 0672                          u1031 0490                          u1120 0688  
                        u1040 04B0                          u1121 0684                          u1041 04AC  
                        u1210 1110                          u1130 0696                          u1050 04DE  
                        u1211 110C                          u1131 0692                          u1051 04DA  
                        u1220 0DD4                          u1140 06AE                          u1060 04EC  
                        u1221 0DD0                          u1141 06AA                          u1061 04E8  
                        u1230 0DF2                          u1070 0616                          u1231 0DEE  
                        u1071 0612                          u1240 0E0E                          u1080 0634  
                        u1160 0720                          u1241 0E0A                          u1081 0630  
                        u1161 071C                          u1250 0E40                          u1090 064E  
                        u1170 0768                          u1155 0DAA                          u1251 0E3C  
                        u1091 064A                          u1171 0764                          u1156 0DAC  
                        u1260 0E5E                          u1180 078C                          u1261 0E5A  
                        u1181 0788                          u1270 0E74                          u1190 0830  
                        u1510 0EEA                          _LATB 000F8A                          u1271 0E70  
                        u1191 082C                          u1511 0EE6                          u1600 02D4  
                        u1520 00D2                          u1601 02D0                          u1521 00CE  
                        u1610 02EE                          u1530 00E2                          u1611 02EA  
                        u1531 00DE                          u1620 032E                          u1540 00F6  
                        u1621 032A                          u1541 00F2                          u1630 0358  
                        u1550 010A                          u1631 0354                          u1551 0106  
                        u1640 036A                          u1560 01F4                          u1641 0366  
                        u1561 01F0                          u1650 038A                          u1570 0206  
                        u1707 1066                          u1651 0386                          u1571 0202  
                        u1660 03A6                          u1580 021E                          u1717 1088  
                        u1661 03A2                          u1581 021A                          u1670 03D8  
                        u1590 0236                          u1727 1150                          u1671 03D4  
                        u1591 0232                          u1680 03EA                          u1737 0DB0  
                        u1681 03E6                          u1697 0F68                          _TMR0 000FD6  
                        _TMR1 000FCE                          _TMR5 000F87              ?_configureTimer0 0001  
            ?_configureTimer1 0001              ?_configureTimer5 0001                          abs@a 0016  
                        _dbuf 00AB                          _main 0094                          _dtoa 041E  
                        _prec 0057                          _nout 00A0                          pad@i 001B  
                        pad@p 0018                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf2 000FDF                          fsr1l 000FE1                          pad@w 001D  
                        fsr2l 000FD9                          btemp 005B            __size_of_LCDPutCmd 003E  
                        prodh 000FF4                          prodl 000FF3                          start 0090  
          __size_of_LCDPutStr 003A                 __CFG_IESO$OFF 000000        __end_of_LCD_Initialize 0F98  
              ??_configureADC 0004                ??_configurePWM 0004                 __CFG_HPOL$LOW 000000  
                ___param_bank 000000             _timer0ReloadValue 00CD                         ??_abs 0018  
               __CFG_LPOL$LOW 000000                         ??_pad 001A                   LCDPutCmd@ch 0008  
                main@noDigits 0096               __end_of___aodiv 0A38                         ?_main 0001  
                       ?_dtoa 001F               __end_of___aomod 0B9C                         _PDC0H 000F78  
                       _PDC1H 000F76                         _PDC0L 000F79                         _PDC2H 000F74  
                       _PDC1L 000F77                         _PDC2L 000F75               __end_of___lwdiv 0E2E  
                       i1l191 0080               __end_of___lwmod 0E92                  vfpfcnvrt@fmt 0045  
                       _PORTB 000F81                         _TRISB 000F93                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       _flags 0059                         _tcInt 0018                         _fputc 0B9C  
                       _fputs 0F98                         pad@fp 0014                         _width 00A2  
                       _putch 11F6                         main@i 0099                         dtoa@d 0021  
                       dtoa@i 0041                         dtoa@n 0039                         dtoa@p 0033  
                       dtoa@s 0037                         dtoa@w 0035                __CFG_BOREN$OFF 000000  
                       tablat 000FF5           __size_of_LCDPutChar 0030                         ttemp5 005C  
                       ttemp6 005F                         ttemp7 0063                         status 000FD8  
                       wtemp8 005C               __end_of_sprintf 0F46                __CFG_MCLRE$OFF 000000  
             ?_LCD_Initialize 0001               __initialization 0FDC                  __end_of_main 041E  
                __end_of_dtoa 06FC   __end_of_configureInterrupts 11F2                __CFG_OSC$HSPLL 000000  
                      ??_main 0055                        ??_dtoa 0029                 __activetblptr 000002  
           __end_of_LCDPutCmd 109C                  LCDPutChar@ch 0008             __end_of_LCDPutStr 1112  
                      _ADCON1 000FC1                        ?_tcInt 0001                        ?_fputc 0004  
                      ?_fputs 000D                        _ADRESH 000FC4                        ?_putch 0001  
                      i1l2200 0062                        i1l2202 0070                    _PrevADRESH 00D5  
                      i1l2204 007A                        i1l2190 0036                        i1l2192 003C  
                      i1l2194 0044                        i1l2186 0026                        i1l2196 0052  
                      i1l2188 0034                        i1l2198 0054                __CFG_WDTEN$OFF 000000  
              __CFG_WINEN$OFF 000000                        _PTPERH 000F7A                  LCDPutStr@str 0009  
                      _PTPERL 000F7B                _LCDWriteNibble 0D28                __CFG_SSPMX$RC7 000000  
                vfprintf@cfmt 0053                     ??___aodiv 0014                     ??___aomod 0014  
                      _digits 3DB1                     ??___lwdiv 0008                     ??___lwmod 0008  
                      clear_0 1002                        pad@buf 0016                        dtoa@fp 001F  
                      _strlen 1112                        fputc@c 0004                        fputs@c 0011  
                      fputs@i 0012                        fputs@s 000D                  __mediumconst 3AE8  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
        __end_of_configureADC 119E              __end_of_startPWM 11F6                        putch@c 0001  
            __end_of_vfprintf 0EF4          __end_of_configurePWM 10D8             _timer5ReloadValue 00CF  
                   ??_sprintf 0055        __end_of_LCDWriteNibble 0DBA                    __accesstop 0060  
     __end_of__initialization 1010               __CFG_FLTAMX$RC1 000000                    _adcPercent 00D3  
               ___rparam_used 000001               __CFG_T1OSCMX$ON 000000                __pcstackCOMRAM 0001  
                __pidataBANK0 11DC                 __end_of_tcInt 0090                 __end_of_fputc 0C66  
                ??_LCDPutChar 0007                 __end_of_fputs 0FDC                 __end_of_putch 11F8  
   _shouldUpdateTimer0Preload 00A4           _timer5OverflowCount 00A9                       ??_tcInt 0001  
                     ??_fputc 0008                       ??_fputs 0011                       ??_putch 0004  
                  __pbssBANK0 009C               ?_LCDWriteNibble 0004            __end_of_LCDPutChar 1178  
             __CFG_WDPS$32768 000000                       ?_strlen 0004               __CFG_PWM4MX$RB5 000000  
          __size_of_vfpfcnvrt 01B4                       _OVDCOND 000F6B                       _OVDCONS 000F6A  
                   _ADCHSbits 000F99               __CFG_PWMPIN$OFF 000000              ??_LCD_Initialize 0009  
             __CFG_PWRTEN$OFF 000000                       __Hparam 0000                       __Lparam 0000  
    __size_of_configureTimer0 0016      __size_of_configureTimer1 0014      __size_of_configureTimer5 0014  
                     ___aodiv 08B0                       ___aomod 0A38                     ?_startPWM 0001  
                     ___lwdiv 0DBA                       ___lwmod 0E2E                     ?_vfprintf 0060  
              _prevAdcPercent 00D1               __CFG_STVREN$OFF 000000                       __pcinit 0FDC  
                     __ramtop 0300                       __ptext0 0094                       __ptext1 11F2  
                     __ptext2 0EF4                       __ptext3 0E92                       __ptext4 06FC  
                     __ptext5 041E                       __ptext6 0C66                       __ptext7 1112  
                     __ptext8 0F98                       __ptext9 0B9C                     _T0CONbits 000FD5  
       __size_of_configureADC 0026               __size_of_strlen 0036                     _T1CONbits 000FCD  
       __size_of_configurePWM 003C                  __size_of_abs 0040                  __size_of_pad 00C2  
                   _T5CONbits 000FB7                     _LCDPutCmd 105E                       _sprintf 0EF4  
                   _LCDPutStr 10D8          end_of_initialization 1010                       fputc@fp 0006  
               __Lmediumconst 3AE8                       fputs@fp 000F             __end_of_vfpfcnvrt 08B0  
                     postdec1 000FE5                       postdec2 000FDD                  _configureADC 1178  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
                _configurePWM 109C                    ??_startPWM 0004                    ??_vfprintf 0053  
                     strlen@a 0006                       strlen@s 0004                     _PORTAbits 000F80  
                   _PORTCbits 000F82                     _PORTDbits 000F83                     _TRISAbits 000F92  
         _timer0PreloadValues 3CE9                     _TRISCbits 000F94                     _TRISDbits 000F95  
__size_of_configureInterrupts 0006                    ?_LCDPutCmd 0001                    ?_LCDPutStr 0009  
            __CFG_EXCLKMX$RC3 000000                   vfpfcnvrt@ap 0047                   vfpfcnvrt@fp 0043  
                  LCDPutStr@i 000B                   vfpfcnvrt@ll 004B                __end_of_digits 3DBB  
           ??_configureTimer0 0004             ??_configureTimer1 0004             ??_configureTimer5 0004  
              __end_of_strlen 1148           start_initialization 0FDC              ??_LCDWriteNibble 0005  
                 __end_of_abs 105E                   __end_of_pad 0D28                   vfprintf@fmt 0062  
                 __pdataBANK0 00CB                      ??_strlen 0006           _currentPreloadIndex 00A7  
                 __pbssCOMRAM 0057                 __pcstackBANK0 0060              ___aodiv@dividend 0004  
                 ??_LCDPutCmd 0007                   ??_LCDPutStr 000B              ___lwdiv@dividend 0004  
                   _dtoa$1393 0031                     _maxADCVal 00D9                 __pmediumconst 3AE8  
                    ?___aodiv 0004                      ?___aomod 0004              ___aodiv@quotient 0016  
                    ?___lwdiv 0004                      ?___lwmod 0004              LCDWriteNibble@ch 0006  
            LCDWriteNibble@rs 0004                   __pintcodelo 0018             __size_of_startPWM 0004  
           __size_of_vfprintf 0062              ___lwdiv@quotient 0008         _shouldUpdateDutyCycle 00A6  
                    ?_sprintf 0066                __size_of_tcInt 0078                __size_of_fputc 00CA  
              __size_of_fputs 0044                     _dutyCycle 009C                __size_of_putch 0002  
                    _PIE1bits 000F9D                      _PIE3bits 000FA3                      i1u145_20 0034  
                    i1u145_21 0030                      i1u146_20 0052                      i1u146_21 004E  
                    i1u147_20 0070                      i1u147_21 006C                      _PIR1bits 000F9E  
                    _PIR3bits 000FA4           _configureInterrupts 11EC                     _vfpfcnvrt 06FC  
                  _ADCON0bits 000FC2                    _ADCON2bits 000FC0                    _ADCON3bits 000F9A  
        ?_configureInterrupts 0001         _prevTimer0ReloadValue 00CB                   _INTCON2bits 000FF1  
                   copy_data0 0FF0                      __Hrparam 0000               _configureTimer0 119E  
             _configureTimer1 11C8               _configureTimer5 11B4                    vfprintf@ap 0064  
                    __Lrparam 0000                    vfprintf@fp 0060       __size_of_LCD_Initialize 0052  
            __size_of___aodiv 0188              __size_of___aomod 0164                    ?_vfpfcnvrt 0043  
            __size_of___lwdiv 0074              __size_of___lwmod 0064                    _ANSEL0bits 000FB8  
             ___aodiv@divisor 000C               ___aodiv@counter 0014                    sprintf@fmt 0068  
       ??_configureInterrupts 0004               ___lwdiv@divisor 0006               ___lwdiv@counter 000A  
                    __ptext10 11F6                      __ptext11 101E                      __ptext20 0E2E  
                    __ptext12 0A38                      __ptext21 0DBA                      __ptext13 08B0  
                    __ptext22 0F46                      __ptext14 11B4                      __ptext23 105E  
                    __ptext15 11C8                      __ptext24 10D8                      __ptext16 119E  
                    __ptext25 1148                      __ptext17 109C                      __ptext26 0D28  
                    __ptext18 11EC                      __ptext19 1178              __size_of_sprintf 0052  
               __size_of_main 038A                 __size_of_dtoa 02DE           __end_of_sinusValues 3CE9  
                    int$flags 005B                      _startPWM 11F2     main@timer0ReloadValueCopy 0097  
                    _vfprintf 0E92                    _LCDPutChar 1148                      main@duty 009B  
                    main@str1 0086                      main@str2 0076              ___aomod@dividend 0004  
                 _refreshTime 00A8                    _INTCONbits 000FF2                 _shouldDisplay 00A5  
                    intlevel1 0000                     sprintf@ap 006E   __end_of_timer0PreloadValues 3DB1  
     __end_of_configureTimer0 11B4       __end_of_configureTimer1 11DC       __end_of_configureTimer5 11C8  
            ___lwmod@dividend 0004                   _PWMCON0bits 000F6F                   _PWMCON1bits 000F6E  
             ___aomod@divisor 000C                   ??_vfpfcnvrt 0049               ___aomod@counter 0014  
                  _PTCON0bits 000F7F                    _PTCON1bits 000F7E                      sprintf@f 0070  
                    sprintf@s 0066               ___lwmod@divisor 0006               ___lwmod@counter 0008  
                ___aodiv@sign 0015                   _sinusIndex1 00AA                   _sinusIndex2 00D8  
                 _sinusIndex3 00D7                   _sinusValues 3AE9       __size_of_LCDWriteNibble 0092  
                ___aomod@sign 0015  
