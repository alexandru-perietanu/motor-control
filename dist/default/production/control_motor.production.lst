

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jan 04 01:36:08 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 2.10
    44                           ; Generated 31/07/2019 GMT
    45                           ; 
    46                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4431 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  00103C                     __pidataCOMRAM:
    80                           	opt callstack 0
    81                           
    82                           ;initializer for _timer0ReloadValue
    83  00103C  EC77               	dw	60535
    84                           
    85                           ;initializer for _timer5ReloadValue
    86  00103E  0BDB               	dw	3035
    87                           
    88                           ;initializer for _prevAdcPercent
    89  001040  0065               	dw	101
    90                           
    91                           ;initializer for _PrevADRESH
    92  001042  41                 	db	65
    93                           
    94                           ;initializer for _d1
    95  001043  01                 	db	1
    96                           
    97                           ;initializer for _sinusIndex3
    98  001044  AA                 	db	170
    99                           
   100                           ;initializer for _sinusIndex2
   101  001045  55                 	db	85
   102                           
   103                           	psect	idataBANK0
   104  001046                     __pidataBANK0:
   105                           	opt callstack 0
   106                           
   107                           ;initializer for _maxADCVal
   108  001046  00FF               	dw	255
   109                           
   110                           	psect	mediumconst
   111  003D24                     __pmediumconst:
   112                           	opt callstack 0
   113  003D24  00                 	db	0
   114  003D25                     _sinusValues:
   115                           	opt callstack 0
   116  003D25  03C0               	dw	960
   117  003D27  03D6               	dw	982
   118  003D29  03EC               	dw	1004
   119  003D2B  0402               	dw	1026
   120  003D2D  0419               	dw	1049
   121  003D2F  042F               	dw	1071
   122  003D31  0445               	dw	1093
   123  003D33  045B               	dw	1115
   124  003D35  0471               	dw	1137
   125  003D37  0488               	dw	1160
   126  003D39  049E               	dw	1182
   127  003D3B  04BB               	dw	1211
   128  003D3D  04D2               	dw	1234
   129  003D3F  04E0               	dw	1248
   130  003D41  04F7               	dw	1271
   131  003D43  050D               	dw	1293
   132  003D45  0523               	dw	1315
   133  003D47  0539               	dw	1337
   134  003D49  054F               	dw	1359
   135  003D4B  0566               	dw	1382
   136  003D4D  057C               	dw	1404
   137  003D4F  058B               	dw	1419
   138  003D51  05A1               	dw	1441
   139  003D53  05B7               	dw	1463
   140  003D55  05C6               	dw	1478
   141  003D57  05DC               	dw	1500
   142  003D59  05EB               	dw	1515
   143  003D5B  0601               	dw	1537
   144  003D5D  0610               	dw	1552
   145  003D5F  0626               	dw	1574
   146  003D61  0635               	dw	1589
   147  003D63  0644               	dw	1604
   148  003D65  065A               	dw	1626
   149  003D67  0669               	dw	1641
   150  003D69  0677               	dw	1655
   151  003D6B  0686               	dw	1670
   152  003D6D  0695               	dw	1685
   153  003D6F  06A4               	dw	1700
   154  003D71  06B3               	dw	1715
   155  003D73  06C1               	dw	1729
   156  003D75  06C9               	dw	1737
   157  003D77  06D8               	dw	1752
   158  003D79  06E6               	dw	1766
   159  003D7B  06EE               	dw	1774
   160  003D7D  06FD               	dw	1789
   161  003D7F  0704               	dw	1796
   162  003D81  0713               	dw	1811
   163  003D83  071A               	dw	1818
   164  003D85  0722               	dw	1826
   165  003D87  0729               	dw	1833
   166  003D89  0730               	dw	1840
   167  003D8B  0738               	dw	1848
   168  003D8D  073F               	dw	1855
   169  003D8F  0747               	dw	1863
   170  003D91  074E               	dw	1870
   171  003D93  0755               	dw	1877
   172  003D95  0755               	dw	1877
   173  003D97  075D               	dw	1885
   174  003D99  075D               	dw	1885
   175  003D9B  0764               	dw	1892
   176  003D9D  0764               	dw	1892
   177  003D9F  0764               	dw	1892
   178  003DA1  0764               	dw	1892
   179  003DA3  0764               	dw	1892
   180  003DA5  0764               	dw	1892
   181  003DA7  0764               	dw	1892
   182  003DA9  0764               	dw	1892
   183  003DAB  0764               	dw	1892
   184  003DAD  0764               	dw	1892
   185  003DAF  075D               	dw	1885
   186  003DB1  075D               	dw	1885
   187  003DB3  0755               	dw	1877
   188  003DB5  0755               	dw	1877
   189  003DB7  074E               	dw	1870
   190  003DB9  0747               	dw	1863
   191  003DBB  0747               	dw	1863
   192  003DBD  073F               	dw	1855
   193  003DBF  0738               	dw	1848
   194  003DC1  0730               	dw	1840
   195  003DC3  0729               	dw	1833
   196  003DC5  071A               	dw	1818
   197  003DC7  0713               	dw	1811
   198  003DC9  070B               	dw	1803
   199  003DCB  06FD               	dw	1789
   200  003DCD  06F5               	dw	1781
   201  003DCF  06E6               	dw	1766
   202  003DD1  06DF               	dw	1759
   203  003DD3  06D0               	dw	1744
   204  003DD5  06C1               	dw	1729
   205  003DD7  06BA               	dw	1722
   206  003DD9  06AB               	dw	1707
   207  003DDB  069C               	dw	1692
   208  003DDD  068E               	dw	1678
   209  003DDF  067F               	dw	1663
   210  003DE1  0670               	dw	1648
   211  003DE3  0661               	dw	1633
   212  003DE5  064B               	dw	1611
   213  003DE7  063C               	dw	1596
   214  003DE9  062D               	dw	1581
   215  003DEB  061F               	dw	1567
   216  003DED  0608               	dw	1544
   217  003DEF  05FA               	dw	1530
   218  003DF1  05E3               	dw	1507
   219  003DF3  05D5               	dw	1493
   220  003DF5  05BE               	dw	1470
   221  003DF7  05A8               	dw	1448
   222  003DF9  0599               	dw	1433
   223  003DFB  0583               	dw	1411
   224  003DFD  056D               	dw	1389
   225  003DFF  0557               	dw	1367
   226  003E01  0548               	dw	1352
   227  003E03  0532               	dw	1330
   228  003E05  051C               	dw	1308
   229  003E07  0505               	dw	1285
   230  003E09  04EF               	dw	1263
   231  003E0B  04D9               	dw	1241
   232  003E0D  04C3               	dw	1219
   233  003E0F  04AD               	dw	1197
   234  003E11  0496               	dw	1174
   235  003E13  0480               	dw	1152
   236  003E15  046A               	dw	1130
   237  003E17  0454               	dw	1108
   238  003E19  043E               	dw	1086
   239  003E1B  0427               	dw	1063
   240  003E1D  040A               	dw	1034
   241  003E1F  03F4               	dw	1012
   242  003E21  03DD               	dw	989
   243  003E23  03C7               	dw	967
   244  003E25  03B1               	dw	945
   245  003E27  039B               	dw	923
   246  003E29  0385               	dw	901
   247  003E2B  036E               	dw	878
   248  003E2D  0351               	dw	849
   249  003E2F  033B               	dw	827
   250  003E31  0324               	dw	804
   251  003E33  030E               	dw	782
   252  003E35  02F8               	dw	760
   253  003E37  02E2               	dw	738
   254  003E39  02CC               	dw	716
   255  003E3B  02B5               	dw	693
   256  003E3D  029F               	dw	671
   257  003E3F  0289               	dw	649
   258  003E41  0273               	dw	627
   259  003E43  025D               	dw	605
   260  003E45  0246               	dw	582
   261  003E47  0230               	dw	560
   262  003E49  0221               	dw	545
   263  003E4B  020B               	dw	523
   264  003E4D  01F5               	dw	501
   265  003E4F  01DF               	dw	479
   266  003E51  01D0               	dw	464
   267  003E53  01BA               	dw	442
   268  003E55  01A4               	dw	420
   269  003E57  0195               	dw	405
   270  003E59  017F               	dw	383
   271  003E5B  0170               	dw	368
   272  003E5D  015A               	dw	346
   273  003E5F  014B               	dw	331
   274  003E61  013C               	dw	316
   275  003E63  012D               	dw	301
   276  003E65  0117               	dw	279
   277  003E67  0108               	dw	264
   278  003E69  00F9               	dw	249
   279  003E6B  00EB               	dw	235
   280  003E6D  00DC               	dw	220
   281  003E6F  00CD               	dw	205
   282  003E71  00BE               	dw	190
   283  003E73  00B7               	dw	183
   284  003E75  00A8               	dw	168
   285  003E77  0099               	dw	153
   286  003E79  0092               	dw	146
   287  003E7B  0083               	dw	131
   288  003E7D  007C               	dw	124
   289  003E7F  006D               	dw	109
   290  003E81  0065               	dw	101
   291  003E83  005E               	dw	94
   292  003E85  004F               	dw	79
   293  003E87  0048               	dw	72
   294  003E89  0040               	dw	64
   295  003E8B  0039               	dw	57
   296  003E8D  0032               	dw	50
   297  003E8F  0032               	dw	50
   298  003E91  002A               	dw	42
   299  003E93  0023               	dw	35
   300  003E95  0023               	dw	35
   301  003E97  001B               	dw	27
   302  003E99  001B               	dw	27
   303  003E9B  0014               	dw	20
   304  003E9D  0014               	dw	20
   305  003E9F  0014               	dw	20
   306  003EA1  0014               	dw	20
   307  003EA3  0014               	dw	20
   308  003EA5  0014               	dw	20
   309  003EA7  0014               	dw	20
   310  003EA9  0014               	dw	20
   311  003EAB  0014               	dw	20
   312  003EAD  0014               	dw	20
   313  003EAF  001B               	dw	27
   314  003EB1  001B               	dw	27
   315  003EB3  0023               	dw	35
   316  003EB5  0023               	dw	35
   317  003EB7  002A               	dw	42
   318  003EB9  0032               	dw	50
   319  003EBB  0039               	dw	57
   320  003EBD  0040               	dw	64
   321  003EBF  0048               	dw	72
   322  003EC1  004F               	dw	79
   323  003EC3  0057               	dw	87
   324  003EC5  005E               	dw	94
   325  003EC7  0065               	dw	101
   326  003EC9  0074               	dw	116
   327  003ECB  007C               	dw	124
   328  003ECD  008A               	dw	138
   329  003ECF  0092               	dw	146
   330  003ED1  00A1               	dw	161
   331  003ED3  00AF               	dw	175
   332  003ED5  00B7               	dw	183
   333  003ED7  00C6               	dw	198
   334  003ED9  00D4               	dw	212
   335  003EDB  00E3               	dw	227
   336  003EDD  00F2               	dw	242
   337  003EDF  0101               	dw	257
   338  003EE1  0110               	dw	272
   339  003EE3  011E               	dw	286
   340  003EE5  0135               	dw	309
   341  003EE7  0143               	dw	323
   342  003EE9  0152               	dw	338
   343  003EEB  0168               	dw	360
   344  003EED  0177               	dw	375
   345  003EEF  018D               	dw	397
   346  003EF1  019C               	dw	412
   347  003EF3  01B2               	dw	434
   348  003EF5  01C1               	dw	449
   349  003EF7  01D7               	dw	471
   350  003EF9  01EE               	dw	494
   351  003EFB  01FC               	dw	508
   352  003EFD  0213               	dw	531
   353  003EFF  0229               	dw	553
   354  003F01  023F               	dw	575
   355  003F03  0255               	dw	597
   356  003F05  026B               	dw	619
   357  003F07  0282               	dw	642
   358  003F09  0298               	dw	664
   359  003F0B  02A7               	dw	679
   360  003F0D  02BD               	dw	701
   361  003F0F  02DA               	dw	730
   362  003F11  02F1               	dw	753
   363  003F13  0307               	dw	775
   364  003F15  031D               	dw	797
   365  003F17  0333               	dw	819
   366  003F19  0349               	dw	841
   367  003F1B  0360               	dw	864
   368  003F1D  0376               	dw	886
   369  003F1F  038C               	dw	908
   370  003F21  03A2               	dw	930
   371  003F23  03B8               	dw	952
   372  003F25                     __end_of_sinusValues:
   373                           	opt callstack 0
   374  003F25                     _timer0PreloadValues:
   375                           	opt callstack 0
   376  003F25  EC77               	dw	60535
   377  003F27  F63B               	dw	63035
   378  003F29  F97C               	dw	63868
   379  003F2B  FB1D               	dw	64285
   380  003F2D  FC17               	dw	64535
   381  003F2F  FCBD               	dw	64701
   382  003F31  FD34               	dw	64820
   383  003F33  FD8E               	dw	64910
   384  003F35  FDD3               	dw	64979
   385  003F37  FE0B               	dw	65035
   386  003F39  FE38               	dw	65080
   387  003F3B  FE5E               	dw	65118
   388  003F3D  FE7E               	dw	65150
   389  003F3F  FE99               	dw	65177
   390  003F41  FEB1               	dw	65201
   391  003F43  FEC6               	dw	65222
   392  003F45  FED8               	dw	65240
   393  003F47  FEE9               	dw	65257
   394  003F49  FEF7               	dw	65271
   395  003F4B  FF05               	dw	65285
   396  003F4D  FF10               	dw	65296
   397  003F4F  FF1B               	dw	65307
   398  003F51  FF25               	dw	65317
   399  003F53  FF2E               	dw	65326
   400  003F55  FF37               	dw	65335
   401  003F57  FF3E               	dw	65342
   402  003F59  FF45               	dw	65349
   403  003F5B  FF4C               	dw	65356
   404  003F5D  FF52               	dw	65362
   405  003F5F  FF58               	dw	65368
   406  003F61  FF5D               	dw	65373
   407  003F63  FF62               	dw	65378
   408  003F65  FF67               	dw	65383
   409  003F67  FF6B               	dw	65387
   410  003F69  FF70               	dw	65392
   411  003F6B  FF74               	dw	65396
   412  003F6D  FF77               	dw	65399
   413  003F6F  FF7B               	dw	65403
   414  003F71  FF7E               	dw	65406
   415  003F73  FF82               	dw	65410
   416  003F75  FF85               	dw	65413
   417  003F77  FF87               	dw	65415
   418  003F79  FF8A               	dw	65418
   419  003F7B  FF8D               	dw	65421
   420  003F7D  FF8F               	dw	65423
   421  003F7F  FF92               	dw	65426
   422  003F81  FF94               	dw	65428
   423  003F83  FF96               	dw	65430
   424  003F85  FF98               	dw	65432
   425  003F87  FF9B               	dw	65435
   426  003F89  FF9C               	dw	65436
   427  003F8B  FF9E               	dw	65438
   428  003F8D  FFA0               	dw	65440
   429  003F8F  FFA2               	dw	65442
   430  003F91  FFA4               	dw	65444
   431  003F93  FFA5               	dw	65445
   432  003F95  FFA7               	dw	65447
   433  003F97  FFA8               	dw	65448
   434  003F99  FFAA               	dw	65450
   435  003F9B  FFAB               	dw	65451
   436  003F9D  FFAD               	dw	65453
   437  003F9F  FFAE               	dw	65454
   438  003FA1  FFAF               	dw	65455
   439  003FA3  FFB0               	dw	65456
   440  003FA5  FFB2               	dw	65458
   441  003FA7  FFB3               	dw	65459
   442  003FA9  FFB4               	dw	65460
   443  003FAB  FFB5               	dw	65461
   444  003FAD  FFB6               	dw	65462
   445  003FAF  FFB7               	dw	65463
   446  003FB1  FFB8               	dw	65464
   447  003FB3  FFB9               	dw	65465
   448  003FB5  FFBA               	dw	65466
   449  003FB7  FFBB               	dw	65467
   450  003FB9  FFBC               	dw	65468
   451  003FBB  FFBD               	dw	65469
   452  003FBD  FFBE               	dw	65470
   453  003FBF  FFBE               	dw	65470
   454  003FC1  FFBF               	dw	65471
   455  003FC3  FFC0               	dw	65472
   456  003FC5  FFC1               	dw	65473
   457  003FC7  FFC2               	dw	65474
   458  003FC9  FFC2               	dw	65474
   459  003FCB  FFC3               	dw	65475
   460  003FCD  FFC4               	dw	65476
   461  003FCF  FFC4               	dw	65476
   462  003FD1  FFC5               	dw	65477
   463  003FD3  FFC6               	dw	65478
   464  003FD5  FFC6               	dw	65478
   465  003FD7  FFC7               	dw	65479
   466  003FD9  FFC8               	dw	65480
   467  003FDB  FFC8               	dw	65480
   468  003FDD  FFC9               	dw	65481
   469  003FDF  FFC9               	dw	65481
   470  003FE1  FFCA               	dw	65482
   471  003FE3  FFCA               	dw	65482
   472  003FE5  FFCB               	dw	65483
   473  003FE7  FFCB               	dw	65483
   474  003FE9  FFCC               	dw	65484
   475  003FEB  FFCD               	dw	65485
   476  003FED                     __end_of_timer0PreloadValues:
   477                           	opt callstack 0
   478  003FED                     _digits:
   479                           	opt callstack 0
   480  003FED  30                 	db	48
   481  003FEE  31                 	db	49
   482  003FEF  32                 	db	50
   483  003FF0  33                 	db	51
   484  003FF1  34                 	db	52
   485  003FF2  35                 	db	53
   486  003FF3  36                 	db	54
   487  003FF4  37                 	db	55
   488  003FF5  38                 	db	56
   489  003FF6  39                 	db	57
   490  003FF7                     __end_of_digits:
   491                           	opt callstack 0
   492  0000                     _TMR5	set	3975
   493  0000                     _TMR1	set	4046
   494  0000                     _TMR0	set	4054
   495  0000                     _PORTDbits	set	3971
   496  0000                     _PORTCbits	set	3970
   497  0000                     _TRISDbits	set	3989
   498  0000                     _TRISCbits	set	3988
   499  0000                     _ADRESH	set	4036
   500  0000                     _PDC2L	set	3957
   501  0000                     _PDC2H	set	3956
   502  0000                     _PDC1L	set	3959
   503  0000                     _PDC1H	set	3958
   504  0000                     _PIR3bits	set	4004
   505  0000                     _PORTAbits	set	3968
   506  0000                     _T5CONbits	set	4023
   507  0000                     _T1CONbits	set	4045
   508  0000                     _T0CONbits	set	4053
   509  0000                     _PIR1bits	set	3998
   510  0000                     _PIE1bits	set	3997
   511  0000                     _TRISAbits	set	3986
   512  0000                     _ANSEL0bits	set	4024
   513  0000                     _ADCHSbits	set	3993
   514  0000                     _ADCON3bits	set	3994
   515  0000                     _ADCON2bits	set	4032
   516  0000                     _ADCON1	set	4033
   517  0000                     _ADCON0bits	set	4034
   518  0000                     _INTCONbits	set	4082
   519  0000                     _OVDCONS	set	3946
   520  0000                     _OVDCOND	set	3947
   521  0000                     _PIE3bits	set	4003
   522  0000                     _PDC0L	set	3961
   523  0000                     _PDC0H	set	3960
   524  0000                     _PTPERL	set	3963
   525  0000                     _PTPERH	set	3962
   526  0000                     _PWMCON1bits	set	3950
   527  0000                     _PWMCON0bits	set	3951
   528  0000                     _PTCON1bits	set	3966
   529  0000                     _PTCON0bits	set	3967
   530  0000                     _PORTB	set	3969
   531  0000                     _TRISB	set	3987
   532  0000                     _LATB	set	3978
   533  003FF7                     STR_1:
   534  003FF7  61                 	db	97	;'a'
   535  003FF8  61                 	db	97	;'a'
   536  003FF9  61                 	db	97	;'a'
   537  003FFA  61                 	db	97	;'a'
   538  003FFB  00                 	db	0
   539  003FFC                     STR_2:
   540  003FFC  25                 	db	37
   541  003FFD  64                 	db	100	;'d'
   542  003FFE  00                 	db	0
   543                           
   544                           ; #config settings
   545  003FFF  00                 	db	0	; dummy byte at the end
   546  0000                     
   547                           	psect	cinit
   548  000D60                     __pcinit:
   549                           	opt callstack 0
   550  000D60                     start_initialization:
   551                           	opt callstack 0
   552  000D60                     __initialization:
   553                           	opt callstack 0
   554                           
   555                           ; Initialize objects allocated to BANK0 (2 bytes)
   556                           ; load TBLPTR registers with __pidataBANK0
   557  000D60  0E46               	movlw	low __pidataBANK0
   558  000D62  6EF6               	movwf	tblptrl,c
   559  000D64  0E10               	movlw	high __pidataBANK0
   560  000D66  6EF7               	movwf	tblptrh,c
   561  000D68  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   562  000D6A  6EF8               	movwf	tblptru,c
   563  000D6C  0009               	tblrd		*+	;fetch initializer
   564  000D6E  CFF5 F0D7          	movff	tablat,__pdataBANK0
   565  000D72  0009               	tblrd		*+	;fetch initializer
   566  000D74  CFF5 F0D8          	movff	tablat,__pdataBANK0+1
   567                           
   568                           ; Initialize objects allocated to COMRAM (10 bytes)
   569                           ; load TBLPTR registers with __pidataCOMRAM
   570  000D78  0E3C               	movlw	low __pidataCOMRAM
   571  000D7A  6EF6               	movwf	tblptrl,c
   572  000D7C  0E10               	movlw	high __pidataCOMRAM
   573  000D7E  6EF7               	movwf	tblptrh,c
   574  000D80  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   575  000D82  6EF8               	movwf	tblptru,c
   576  000D84  EE00  F03D         	lfsr	0,__pdataCOMRAM
   577  000D88  EE10 F00A          	lfsr	1,10
   578  000D8C                     copy_data0:
   579  000D8C  0009               	tblrd		*+
   580  000D8E  CFF5 FFEE          	movff	tablat,postinc0
   581  000D92  50E5               	movf	postdec1,w,c
   582  000D94  50E1               	movf	fsr1l,w,c
   583  000D96  E1FA               	bnz	copy_data0
   584                           
   585                           ; Clear objects allocated to BANK0 (43 bytes)
   586  000D98  EE00  F0AC         	lfsr	0,__pbssBANK0
   587  000D9C  0E2B               	movlw	43
   588  000D9E                     clear_0:
   589  000D9E  6AEE               	clrf	postinc0,c
   590  000DA0  06E8               	decf	wreg,f,c
   591  000DA2  E1FD               	bnz	clear_0
   592                           
   593                           ; Clear objects allocated to COMRAM (7 bytes)
   594  000DA4  EE00  F047         	lfsr	0,__pbssCOMRAM
   595  000DA8  0E07               	movlw	7
   596  000DAA                     clear_1:
   597  000DAA  6AEE               	clrf	postinc0,c
   598  000DAC  06E8               	decf	wreg,f,c
   599  000DAE  E1FD               	bnz	clear_1
   600  000DB0                     end_of_initialization:
   601                           	opt callstack 0
   602  000DB0                     __end_of__initialization:
   603                           	opt callstack 0
   604  000DB0  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   605  000DB2  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   606  000DB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   607  000DB6  6EF8               	movwf	tblptru,c
   608  000DB8  0100               	movlb	0
   609  000DBA  EFCD  F007         	goto	_main	;jump to C main() function
   610                           
   611                           	psect	bssCOMRAM
   612  000047                     __pbssCOMRAM:
   613                           	opt callstack 0
   614  000047                     _prec:
   615                           	opt callstack 0
   616  000047                     	ds	2
   617  000049                     _flags:
   618                           	opt callstack 0
   619  000049                     	ds	2
   620  00004B                     _refreshTime:
   621                           	opt callstack 0
   622  00004B                     	ds	1
   623  00004C                     _timer5OverflowCount:
   624                           	opt callstack 0
   625  00004C                     	ds	1
   626  00004D                     _sinusIndex1:
   627                           	opt callstack 0
   628  00004D                     	ds	1
   629                           
   630                           	psect	dataCOMRAM
   631  00003D                     __pdataCOMRAM:
   632                           	opt callstack 0
   633  00003D                     _timer0ReloadValue:
   634                           	opt callstack 0
   635  00003D                     	ds	2
   636  00003F                     _timer5ReloadValue:
   637                           	opt callstack 0
   638  00003F                     	ds	2
   639  000041                     _prevAdcPercent:
   640                           	opt callstack 0
   641  000041                     	ds	2
   642  000043                     _PrevADRESH:
   643                           	opt callstack 0
   644  000043                     	ds	1
   645  000044                     _d1:
   646                           	opt callstack 0
   647  000044                     	ds	1
   648  000045                     _sinusIndex3:
   649                           	opt callstack 0
   650  000045                     	ds	1
   651  000046                     _sinusIndex2:
   652                           	opt callstack 0
   653  000046                     	ds	1
   654                           
   655                           	psect	bssBANK0
   656  0000AC                     __pbssBANK0:
   657                           	opt callstack 0
   658  0000AC                     _dutyCycle:
   659                           	opt callstack 0
   660  0000AC                     	ds	4
   661  0000B0                     _nout:
   662                           	opt callstack 0
   663  0000B0                     	ds	2
   664  0000B2                     _width:
   665                           	opt callstack 0
   666  0000B2                     	ds	2
   667  0000B4                     _adcPercent:
   668                           	opt callstack 0
   669  0000B4                     	ds	2
   670  0000B6                     _shouldDisplay:
   671                           	opt callstack 0
   672  0000B6                     	ds	1
   673  0000B7                     _dbuf:
   674                           	opt callstack 0
   675  0000B7                     	ds	32
   676                           
   677                           	psect	dataBANK0
   678  0000D7                     __pdataBANK0:
   679                           	opt callstack 0
   680  0000D7                     _maxADCVal:
   681                           	opt callstack 0
   682  0000D7                     	ds	2
   683                           
   684                           	psect	cstackBANK0
   685  000060                     __pcstackBANK0:
   686                           	opt callstack 0
   687  000060                     ??_dtoa:
   688                           
   689                           ; 1 bytes @ 0x0
   690  000060                     	ds	8
   691  000068                     _dtoa$1353:
   692                           	opt callstack 0
   693                           
   694                           ; 2 bytes @ 0x8
   695  000068                     	ds	2
   696  00006A                     dtoa@p:
   697                           	opt callstack 0
   698                           
   699                           ; 2 bytes @ 0xA
   700  00006A                     	ds	2
   701  00006C                     dtoa@w:
   702                           	opt callstack 0
   703                           
   704                           ; 2 bytes @ 0xC
   705  00006C                     	ds	2
   706  00006E                     dtoa@s:
   707                           	opt callstack 0
   708                           
   709                           ; 2 bytes @ 0xE
   710  00006E                     	ds	2
   711  000070                     dtoa@n:
   712                           	opt callstack 0
   713                           
   714                           ; 8 bytes @ 0x10
   715  000070                     	ds	8
   716  000078                     dtoa@i:
   717                           	opt callstack 0
   718                           
   719                           ; 2 bytes @ 0x18
   720  000078                     	ds	2
   721  00007A                     ??_vfpfcnvrt:
   722                           
   723                           ; 1 bytes @ 0x1A
   724  00007A                     	ds	2
   725  00007C                     vfpfcnvrt@ll:
   726                           	opt callstack 0
   727                           
   728                           ; 8 bytes @ 0x1C
   729  00007C                     	ds	8
   730  000084                     ?_vfprintf:
   731                           	opt callstack 0
   732  000084                     vfprintf@fp:
   733                           	opt callstack 0
   734                           
   735                           ; 2 bytes @ 0x24
   736  000084                     	ds	2
   737  000086                     vfprintf@fmt:
   738                           	opt callstack 0
   739                           
   740                           ; 2 bytes @ 0x26
   741  000086                     	ds	2
   742  000088                     vfprintf@ap:
   743                           	opt callstack 0
   744                           
   745                           ; 2 bytes @ 0x28
   746  000088                     	ds	2
   747  00008A                     vfprintf@cfmt:
   748                           	opt callstack 0
   749                           
   750                           ; 2 bytes @ 0x2A
   751  00008A                     	ds	2
   752  00008C                     ?_sprintf:
   753                           	opt callstack 0
   754  00008C                     sprintf@s:
   755                           	opt callstack 0
   756                           
   757                           ; 2 bytes @ 0x2C
   758  00008C                     	ds	2
   759  00008E                     sprintf@fmt:
   760                           	opt callstack 0
   761                           
   762                           ; 2 bytes @ 0x2E
   763  00008E                     	ds	6
   764  000094                     sprintf@ap:
   765                           	opt callstack 0
   766                           
   767                           ; 2 bytes @ 0x34
   768  000094                     	ds	2
   769  000096                     sprintf@f:
   770                           	opt callstack 0
   771                           
   772                           ; 6 bytes @ 0x36
   773  000096                     	ds	6
   774  00009C                     display@str1:
   775                           	opt callstack 0
   776                           
   777                           ; 16 bytes @ 0x3C
   778  00009C                     	ds	16
   779                           
   780                           	psect	cstackCOMRAM
   781  000001                     __pcstackCOMRAM:
   782                           	opt callstack 0
   783  000001                     ??_handlePWMDutyCycle:
   784  000001                     ?___lwdiv:
   785                           	opt callstack 0
   786  000001                     ___lwdiv@dividend:
   787                           	opt callstack 0
   788                           
   789                           ; 2 bytes @ 0x0
   790  000001                     	ds	2
   791  000003                     handlePWMDutyCycle@duty:
   792                           	opt callstack 0
   793  000003                     ___lwdiv@divisor:
   794                           	opt callstack 0
   795                           
   796                           ; 2 bytes @ 0x2
   797  000003                     	ds	2
   798  000005                     ___lwdiv@quotient:
   799                           	opt callstack 0
   800                           
   801                           ; 2 bytes @ 0x4
   802  000005                     	ds	2
   803  000007                     ___lwdiv@counter:
   804                           	opt callstack 0
   805                           
   806                           ; 1 bytes @ 0x6
   807  000007                     	ds	1
   808  000008                     ??_handleTimer0Preload:
   809                           
   810                           ; 1 bytes @ 0x7
   811  000008                     	ds	1
   812  000009                     ??_tcInt:
   813                           
   814                           ; 1 bytes @ 0x8
   815  000009                     	ds	9
   816  000012                     ?_strlen:
   817                           	opt callstack 0
   818  000012                     ?___aodiv:
   819                           	opt callstack 0
   820  000012                     ?___aomod:
   821                           	opt callstack 0
   822  000012                     LCDWriteNibble@rs:
   823                           	opt callstack 0
   824  000012                     fputc@c:
   825                           	opt callstack 0
   826  000012                     strlen@s:
   827                           	opt callstack 0
   828  000012                     ___aodiv@dividend:
   829                           	opt callstack 0
   830  000012                     ___aomod@dividend:
   831                           	opt callstack 0
   832                           
   833                           ; 8 bytes @ 0x11
   834  000012                     	ds	1
   835  000013                     ??_LCDWriteNibble:
   836                           
   837                           ; 1 bytes @ 0x12
   838  000013                     	ds	1
   839  000014                     LCDWriteNibble@ch:
   840                           	opt callstack 0
   841  000014                     fputc@fp:
   842                           	opt callstack 0
   843  000014                     strlen@a:
   844                           	opt callstack 0
   845                           
   846                           ; 2 bytes @ 0x13
   847  000014                     	ds	1
   848  000015                     ??_LCDPutCmd:
   849  000015                     ??_LCDPutChar:
   850                           
   851                           ; 1 bytes @ 0x14
   852  000015                     	ds	1
   853  000016                     ??_fputc:
   854  000016                     LCDPutChar@ch:
   855                           	opt callstack 0
   856  000016                     LCDPutCmd@ch:
   857                           	opt callstack 0
   858                           
   859                           ; 1 bytes @ 0x15
   860  000016                     	ds	1
   861  000017                     ??_LCD_Initialize:
   862  000017                     LCDPutStr@str:
   863                           	opt callstack 0
   864                           
   865                           ; 2 bytes @ 0x16
   866  000017                     	ds	2
   867  000019                     ??_LCDPutStr:
   868                           
   869                           ; 1 bytes @ 0x18
   870  000019                     	ds	1
   871  00001A                     ___aodiv@divisor:
   872                           	opt callstack 0
   873  00001A                     ___aomod@divisor:
   874                           	opt callstack 0
   875                           
   876                           ; 8 bytes @ 0x19
   877  00001A                     	ds	1
   878  00001B                     LCDPutStr@i:
   879                           	opt callstack 0
   880  00001B                     fputs@s:
   881                           	opt callstack 0
   882                           
   883                           ; 2 bytes @ 0x1A
   884  00001B                     	ds	2
   885  00001D                     fputs@fp:
   886                           	opt callstack 0
   887                           
   888                           ; 2 bytes @ 0x1C
   889  00001D                     	ds	2
   890  00001F                     fputs@c:
   891                           	opt callstack 0
   892                           
   893                           ; 1 bytes @ 0x1E
   894  00001F                     	ds	1
   895  000020                     fputs@i:
   896                           	opt callstack 0
   897                           
   898                           ; 2 bytes @ 0x1F
   899  000020                     	ds	2
   900  000022                     ?_pad:
   901                           	opt callstack 0
   902  000022                     ___aodiv@counter:
   903                           	opt callstack 0
   904  000022                     ___aomod@counter:
   905                           	opt callstack 0
   906  000022                     pad@fp:
   907                           	opt callstack 0
   908                           
   909                           ; 2 bytes @ 0x21
   910  000022                     	ds	1
   911  000023                     ___aodiv@sign:
   912                           	opt callstack 0
   913  000023                     ___aomod@sign:
   914                           	opt callstack 0
   915                           
   916                           ; 1 bytes @ 0x22
   917  000023                     	ds	1
   918  000024                     ?_abs:
   919                           	opt callstack 0
   920  000024                     pad@buf:
   921                           	opt callstack 0
   922  000024                     abs@a:
   923                           	opt callstack 0
   924  000024                     ___aodiv@quotient:
   925                           	opt callstack 0
   926                           
   927                           ; 8 bytes @ 0x23
   928  000024                     	ds	2
   929  000026                     ??_abs:
   930  000026                     pad@p:
   931                           	opt callstack 0
   932                           
   933                           ; 2 bytes @ 0x25
   934  000026                     	ds	2
   935  000028                     ??_pad:
   936                           
   937                           ; 1 bytes @ 0x27
   938  000028                     	ds	1
   939  000029                     pad@i:
   940                           	opt callstack 0
   941                           
   942                           ; 2 bytes @ 0x28
   943  000029                     	ds	2
   944  00002B                     pad@w:
   945                           	opt callstack 0
   946                           
   947                           ; 2 bytes @ 0x2A
   948  00002B                     	ds	2
   949  00002D                     ?_dtoa:
   950                           	opt callstack 0
   951  00002D                     dtoa@fp:
   952                           	opt callstack 0
   953                           
   954                           ; 2 bytes @ 0x2C
   955  00002D                     	ds	2
   956  00002F                     dtoa@d:
   957                           	opt callstack 0
   958                           
   959                           ; 8 bytes @ 0x2E
   960  00002F                     	ds	8
   961  000037                     ?_vfpfcnvrt:
   962                           	opt callstack 0
   963  000037                     vfpfcnvrt@fp:
   964                           	opt callstack 0
   965                           
   966                           ; 2 bytes @ 0x36
   967  000037                     	ds	2
   968  000039                     vfpfcnvrt@fmt:
   969                           	opt callstack 0
   970                           
   971                           ; 2 bytes @ 0x38
   972  000039                     	ds	2
   973  00003B                     vfpfcnvrt@ap:
   974                           	opt callstack 0
   975                           
   976                           ; 2 bytes @ 0x3A
   977  00003B                     	ds	2
   978  00003D                     
   979                           ; 1 bytes @ 0x3C
   980 ;;
   981 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   982 ;;
   983 ;; *************** function _main *****************
   984 ;; Defined at:
   985 ;;		line 360 in file "newmain.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;		None
   988 ;; Auto vars:     Size  Location     Type
   989 ;;		None
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   999 ;;      Params:         0       0       0       0
  1000 ;;      Locals:         0       0       0       0
  1001 ;;      Temps:          0       0       0       0
  1002 ;;      Totals:         0       0       0       0
  1003 ;;Total ram usage:        0 bytes
  1004 ;; Hardware stack levels required when called:   12
  1005 ;; This function calls:
  1006 ;;		_LCDPutCmd
  1007 ;;		_LCDPutStr
  1008 ;;		_LCD_Initialize
  1009 ;;		_display
  1010 ;; This function is called by:
  1011 ;;		Startup code after reset
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text0
  1016  000F9A                     __ptext0:
  1017                           	opt callstack 0
  1018  000F9A                     _main:
  1019                           	opt callstack 19
  1020  000F9A                     
  1021                           ;newmain.c: 362:     LCD_Initialize();
  1022  000F9A  EC08  F007         	call	_LCD_Initialize	;wreg free
  1023                           
  1024                           ;newmain.c: 363:     LCDPutCmd(0x01);
  1025  000F9E  0E01               	movlw	1
  1026  000FA0  ECAE  F007         	call	_LCDPutCmd
  1027  000FA4                     
  1028                           ;newmain.c: 364:     LCDPutStr("aaaa");
  1029  000FA4  0EF7               	movlw	low STR_1
  1030  000FA6  6E17               	movwf	LCDPutStr@str^0,c
  1031  000FA8  0E3F               	movlw	high STR_1
  1032  000FAA  6E18               	movwf	(LCDPutStr@str+1)^0,c
  1033  000FAC  ECD9  F005         	call	_LCDPutStr	;wreg free
  1034  000FB0                     
  1035                           ;newmain.c: 375:     TRISAbits.TRISA2 = 0;
  1036  000FB0  9492               	bcf	146,2,c	;volatile
  1037  000FB2                     
  1038                           ;newmain.c: 376:     TRISAbits.RA2 = 0;
  1039  000FB2  9492               	bcf	146,2,c	;volatile
  1040  000FB4                     
  1041                           ;newmain.c: 377:     ANSEL0bits.ANS2 = 0;
  1042  000FB4  94B8               	bcf	184,2,c	;volatile
  1043  000FB6                     
  1044                           ;newmain.c: 378:     PORTAbits.RA2 = 1;
  1045  000FB6  8480               	bsf	128,2,c	;volatile
  1046  000FB8                     l2134:
  1047                           
  1048                           ;newmain.c: 384:         if (shouldDisplay) {
  1049  000FB8  0100               	movlb	0	; () banked
  1050  000FBA  51B6               	movf	_shouldDisplay& (0+255),w,b	;volatile
  1051  000FBC  B4D8               	btfsc	status,2,c
  1052  000FBE  EFE3  F007         	goto	u1561
  1053  000FC2  EFE5  F007         	goto	u1560
  1054  000FC6                     u1561:
  1055  000FC6  EFDC  F007         	goto	l2134
  1056  000FCA                     u1560:
  1057  000FCA                     
  1058                           ; BSR set to: 0
  1059                           ;newmain.c: 385:             display();
  1060  000FCA  EC8F  F007         	call	_display	;wreg free
  1061  000FCE  EFDC  F007         	goto	l2134
  1062  000FD2  EF7D  F000         	goto	start
  1063  000FD6                     __end_of_main:
  1064                           	opt callstack 0
  1065                           
  1066 ;; *************** function _display *****************
  1067 ;; Defined at:
  1068 ;;		line 439 in file "newmain.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  str1           16   60[BANK0 ] unsigned char [16]
  1073 ;;  str2           16    0        unsigned char [16]
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1083 ;;      Params:         0       0       0       0
  1084 ;;      Locals:         0      16       0       0
  1085 ;;      Temps:          0       0       0       0
  1086 ;;      Totals:         0      16       0       0
  1087 ;;Total ram usage:       16 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; Hardware stack levels required when called:   11
  1090 ;; This function calls:
  1091 ;;		_LCDPutChar
  1092 ;;		_LCDPutCmd
  1093 ;;		_LCDPutStr
  1094 ;;		_sprintf
  1095 ;; This function is called by:
  1096 ;;		_main
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text1
  1101  000F1E                     __ptext1:
  1102                           	opt callstack 0
  1103  000F1E                     _display:
  1104                           	opt callstack 19
  1105  000F1E                     
  1106                           ;newmain.c: 441:     char str1[16];;newmain.c: 442:     char str2[16];;newmain.c: 444:  
      +                             LCDPutCmd(0x01);
  1107  000F1E  0E01               	movlw	1
  1108  000F20  ECAE  F007         	call	_LCDPutCmd
  1109  000F24                     
  1110                           ;newmain.c: 445:     sprintf(str1, "%d", adcPercent);
  1111  000F24  0E9C               	movlw	low display@str1
  1112  000F26  0100               	movlb	0	; () banked
  1113  000F28  6F8C               	movwf	sprintf@s& (0+255),b
  1114  000F2A  0E00               	movlw	high display@str1
  1115  000F2C  6F8D               	movwf	(sprintf@s+1)& (0+255),b
  1116  000F2E  0EFC               	movlw	low STR_2
  1117  000F30  6F8E               	movwf	sprintf@fmt& (0+255),b
  1118  000F32  0E3F               	movlw	high STR_2
  1119  000F34  6F8F               	movwf	(sprintf@fmt+1)& (0+255),b
  1120  000F36  C0B4  F090         	movff	_adcPercent,?_sprintf+4	;volatile
  1121  000F3A  C0B5  F091         	movff	_adcPercent+1,?_sprintf+5	;volatile
  1122  000F3E  ECDF  F006         	call	_sprintf	;wreg free
  1123  000F42                     
  1124                           ;newmain.c: 446:     LCDPutStr(str1);
  1125  000F42  0E9C               	movlw	low display@str1
  1126  000F44  6E17               	movwf	LCDPutStr@str^0,c
  1127  000F46  0E00               	movlw	high display@str1
  1128  000F48  6E18               	movwf	(LCDPutStr@str+1)^0,c
  1129  000F4A  ECD9  F005         	call	_LCDPutStr	;wreg free
  1130  000F4E                     
  1131                           ;newmain.c: 447:     LCDPutChar(' ');
  1132  000F4E  0E20               	movlw	32
  1133  000F50  EC06  F008         	call	_LCDPutChar
  1134  000F54                     
  1135                           ;newmain.c: 459:     shouldDisplay = 0;
  1136  000F54  0E00               	movlw	0
  1137  000F56  0100               	movlb	0	; () banked
  1138  000F58  6FB6               	movwf	_shouldDisplay& (0+255),b	;volatile
  1139  000F5A                     
  1140                           ; BSR set to: 0
  1141  000F5A  0012               	return		;funcret
  1142  000F5C                     __end_of_display:
  1143                           	opt callstack 0
  1144                           
  1145 ;; *************** function _sprintf *****************
  1146 ;; Defined at:
  1147 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  s               2   44[BANK0 ] PTR unsigned char 
  1150 ;;		 -> display@str1(16), 
  1151 ;;  fmt             2   46[BANK0 ] PTR const unsigned char 
  1152 ;;		 -> STR_2(3), 
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;  f               6   54[BANK0 ] struct _IO_FILE
  1155 ;;  ap              2   52[BANK0 ] PTR void [1]
  1156 ;;		 -> ?_sprintf(2), 
  1157 ;;  ret             2    0        int 
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  2   44[BANK0 ] int 
  1160 ;; Registers used:
  1161 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1167 ;;      Params:         0       6       0       0
  1168 ;;      Locals:         0      10       0       0
  1169 ;;      Temps:          0       0       0       0
  1170 ;;      Totals:         0      16       0       0
  1171 ;;Total ram usage:       16 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:   10
  1174 ;; This function calls:
  1175 ;;		_vfprintf
  1176 ;; This function is called by:
  1177 ;;		_display
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text2
  1182  000DBE                     __ptext2:
  1183                           	opt callstack 0
  1184  000DBE                     _sprintf:
  1185                           	opt callstack 19
  1186  000DBE  0E90               	movlw	low (?_sprintf+4)
  1187  000DC0  0100               	movlb	0	; () banked
  1188  000DC2  6F94               	movwf	sprintf@ap& (0+255),b
  1189  000DC4  0E00               	movlw	high (?_sprintf+4)
  1190  000DC6  6F95               	movwf	(sprintf@ap+1)& (0+255),b
  1191  000DC8  C08C  F096         	movff	sprintf@s,sprintf@f
  1192  000DCC  C08D  F097         	movff	sprintf@s+1,sprintf@f+1
  1193  000DD0                     
  1194                           ; BSR set to: 0
  1195  000DD0  0E00               	movlw	0
  1196  000DD2  6F99               	movwf	(sprintf@f+3)& (0+255),b
  1197  000DD4  0E00               	movlw	0
  1198  000DD6  6F98               	movwf	(sprintf@f+2)& (0+255),b
  1199  000DD8                     
  1200                           ; BSR set to: 0
  1201  000DD8  0E00               	movlw	0
  1202  000DDA  6F9B               	movwf	(sprintf@f+5)& (0+255),b
  1203  000DDC  0E00               	movlw	0
  1204  000DDE  6F9A               	movwf	(sprintf@f+4)& (0+255),b
  1205  000DE0                     
  1206                           ; BSR set to: 0
  1207  000DE0  0E96               	movlw	low sprintf@f
  1208  000DE2  6F84               	movwf	vfprintf@fp& (0+255),b
  1209  000DE4  0E00               	movlw	high sprintf@f
  1210  000DE6  6F85               	movwf	(vfprintf@fp+1)& (0+255),b
  1211  000DE8  C08E  F086         	movff	sprintf@fmt,vfprintf@fmt
  1212  000DEC  C08F  F087         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1213  000DF0  0E94               	movlw	low sprintf@ap
  1214  000DF2  6F88               	movwf	vfprintf@ap& (0+255),b
  1215  000DF4  0E00               	movlw	high sprintf@ap
  1216  000DF6  6F89               	movwf	(vfprintf@ap+1)& (0+255),b
  1217  000DF8  EC4F  F006         	call	_vfprintf	;wreg free
  1218  000DFC  0100               	movlb	0	; () banked
  1219  000DFE  5198               	movf	(sprintf@f+2)& (0+255),w,b
  1220  000E00  258C               	addwf	sprintf@s& (0+255),w,b
  1221  000E02  6ED9               	movwf	fsr2l,c
  1222  000E04  5199               	movf	(sprintf@f+3)& (0+255),w,b
  1223  000E06  218D               	addwfc	(sprintf@s+1)& (0+255),w,b
  1224  000E08  6EDA               	movwf	fsr2h,c
  1225  000E0A  0E00               	movlw	0
  1226  000E0C  6EDF               	movwf	indf2,c
  1227  000E0E                     
  1228                           ; BSR set to: 0
  1229  000E0E  0012               	return		;funcret
  1230  000E10                     __end_of_sprintf:
  1231                           	opt callstack 0
  1232                           
  1233 ;; *************** function _vfprintf *****************
  1234 ;; Defined at:
  1235 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  fp              2   36[BANK0 ] PTR struct _IO_FILE
  1238 ;;		 -> sprintf@f(6), 
  1239 ;;  fmt             2   38[BANK0 ] PTR const unsigned char 
  1240 ;;		 -> STR_2(3), 
  1241 ;;  ap              2   40[BANK0 ] PTR PTR void 
  1242 ;;		 -> sprintf@ap(2), 
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  cfmt            2   42[BANK0 ] PTR unsigned char 
  1245 ;;		 -> STR_2(3), 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  2   36[BANK0 ] int 
  1248 ;; Registers used:
  1249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1255 ;;      Params:         0       6       0       0
  1256 ;;      Locals:         0       2       0       0
  1257 ;;      Temps:          0       0       0       0
  1258 ;;      Totals:         0       8       0       0
  1259 ;;Total ram usage:        8 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    9
  1262 ;; This function calls:
  1263 ;;		_vfpfcnvrt
  1264 ;; This function is called by:
  1265 ;;		_sprintf
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text3
  1270  000C9E                     __ptext3:
  1271                           	opt callstack 0
  1272  000C9E                     _vfprintf:
  1273                           	opt callstack 19
  1274  000C9E                     
  1275                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1276  000C9E  C086  F08A         	movff	vfprintf@fmt,vfprintf@cfmt
  1277  000CA2  C087  F08B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1278  000CA6                     
  1279                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1280  000CA6  0E00               	movlw	0
  1281  000CA8  0100               	movlb	0	; () banked
  1282  000CAA  6FB1               	movwf	(_nout+1)& (0+255),b
  1283  000CAC  0E00               	movlw	0
  1284  000CAE  6FB0               	movwf	_nout& (0+255),b
  1285                           
  1286                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1287  000CB0  EF6D  F006         	goto	l2098
  1288  000CB4                     l2096:
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1292  000CB4  C084  F037         	movff	vfprintf@fp,vfpfcnvrt@fp
  1293  000CB8  C085  F038         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1294  000CBC  0E8A               	movlw	low vfprintf@cfmt
  1295  000CBE  6E39               	movwf	vfpfcnvrt@fmt^0,c
  1296  000CC0  0E00               	movlw	high vfprintf@cfmt
  1297  000CC2  6E3A               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1298  000CC4  C088  F03B         	movff	vfprintf@ap,vfpfcnvrt@ap
  1299  000CC8  C089  F03C         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1300  000CCC  ECF0  F001         	call	_vfpfcnvrt	;wreg free
  1301  000CD0  5037               	movf	?_vfpfcnvrt^0,w,c
  1302  000CD2  0100               	movlb	0	; () banked
  1303  000CD4  27B0               	addwf	_nout& (0+255),f,b
  1304  000CD6  5038               	movf	(?_vfpfcnvrt+1)^0,w,c
  1305  000CD8  23B1               	addwfc	(_nout+1)& (0+255),f,b
  1306  000CDA                     l2098:
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1310  000CDA  C08A  FFF6         	movff	vfprintf@cfmt,tblptrl
  1311  000CDE  C08B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1312  000CE2                     	if	0	;tblptru may be non-zero
  1313  000CE2                     	endif
  1314  000CE2                     	if	0	;tblptru may be non-zero
  1315  000CE2                     	endif
  1316  000CE2  0008               	tblrd		*
  1317  000CE4  50F5               	movf	tablat,w,c
  1318  000CE6  0900               	iorlw	0
  1319  000CE8  A4D8               	btfss	status,2,c
  1320  000CEA  EF79  F006         	goto	u1551
  1321  000CEE  EF7B  F006         	goto	u1550
  1322  000CF2                     u1551:
  1323  000CF2  EF5A  F006         	goto	l2096
  1324  000CF6                     u1550:
  1325  000CF6                     
  1326                           ; BSR set to: 0
  1327                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1328  000CF6  C0B0  F084         	movff	_nout,?_vfprintf
  1329  000CFA  C0B1  F085         	movff	_nout+1,?_vfprintf+1
  1330  000CFE                     
  1331                           ; BSR set to: 0
  1332  000CFE  0012               	return		;funcret
  1333  000D00                     __end_of_vfprintf:
  1334                           	opt callstack 0
  1335                           
  1336 ;; *************** function _vfpfcnvrt *****************
  1337 ;; Defined at:
  1338 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  fp              2   54[COMRAM] PTR struct _IO_FILE
  1341 ;;		 -> sprintf@f(6), 
  1342 ;;  fmt             2   56[COMRAM] PTR PTR unsigned char 
  1343 ;;		 -> vfprintf@cfmt(2), 
  1344 ;;  ap              2   58[COMRAM] PTR PTR void 
  1345 ;;		 -> sprintf@ap(2), 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  ll              8   28[BANK0 ] long long 
  1348 ;;  llu             8    0        unsigned long long 
  1349 ;;  f               4    0        unsigned long long 
  1350 ;;  vp              3    0        PTR void 
  1351 ;;  ct              3    0        unsigned char [3]
  1352 ;;  cp              3    0        PTR unsigned char 
  1353 ;;  i               2    0        int 
  1354 ;;  done            2    0        int 
  1355 ;;  c               1    0        unsigned char 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  2   54[COMRAM] int 
  1358 ;; Registers used:
  1359 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1365 ;;      Params:         6       0       0       0
  1366 ;;      Locals:         0       8       0       0
  1367 ;;      Temps:          0       2       0       0
  1368 ;;      Totals:         6      10       0       0
  1369 ;;Total ram usage:       16 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; Hardware stack levels required when called:    8
  1372 ;; This function calls:
  1373 ;;		_dtoa
  1374 ;;		_fputc
  1375 ;; This function is called by:
  1376 ;;		_vfprintf
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text4
  1381  0003E0                     __ptext4:
  1382                           	opt callstack 0
  1383  0003E0                     _vfpfcnvrt:
  1384                           	opt callstack 19
  1385  0003E0                     
  1386                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1387  0003E0  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1388  0003E4  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1389  0003E8  CFDE FFF6          	movff	postinc2,tblptrl
  1390  0003EC  CFDD FFF7          	movff	postdec2,tblptrh
  1391  0003F0                     	if	0	;tblptru may be non-zero
  1392  0003F0                     	endif
  1393  0003F0                     	if	0	;tblptru may be non-zero
  1394  0003F0                     	endif
  1395  0003F0  0008               	tblrd		*
  1396  0003F2  50F5               	movf	tablat,w,c
  1397  0003F4  0A25               	xorlw	37
  1398  0003F6  A4D8               	btfss	status,2,c
  1399  0003F8  EF00  F002         	goto	u1511
  1400  0003FC  EF02  F002         	goto	u1510
  1401  000400                     u1511:
  1402  000400  EFAE  F002         	goto	l2084
  1403  000404                     u1510:
  1404  000404                     
  1405                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1406  000404  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1407  000408  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1408  00040C  2ADE               	incf	postinc2,f,c
  1409  00040E  0E00               	movlw	0
  1410  000410  22DD               	addwfc	postdec2,f,c
  1411  000412                     
  1412                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1413  000412  0E00               	movlw	0
  1414  000414  0100               	movlb	0	; () banked
  1415  000416  6FB3               	movwf	(_width+1)& (0+255),b
  1416  000418  0E00               	movlw	0
  1417  00041A  6FB2               	movwf	_width& (0+255),b
  1418  00041C  C0B2  F049         	movff	_width,_flags
  1419  000420  C0B3  F04A         	movff	_width+1,_flags+1
  1420  000424                     
  1421                           ; BSR set to: 0
  1422                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1423  000424  6847               	setf	_prec^0,c
  1424  000426  6848               	setf	(_prec+1)^0,c
  1425  000428                     
  1426                           ; BSR set to: 0
  1427                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1428  000428  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1429  00042C  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1430  000430  CFDE FFF6          	movff	postinc2,tblptrl
  1431  000434  CFDD FFF7          	movff	postdec2,tblptrh
  1432  000438                     	if	0	;tblptru may be non-zero
  1433  000438                     	endif
  1434  000438                     	if	0	;tblptru may be non-zero
  1435  000438                     	endif
  1436  000438  0008               	tblrd		*
  1437  00043A  50F5               	movf	tablat,w,c
  1438  00043C  0A64               	xorlw	100
  1439  00043E  B4D8               	btfsc	status,2,c
  1440  000440  EF24  F002         	goto	u1521
  1441  000444  EF26  F002         	goto	u1520
  1442  000448                     u1521:
  1443  000448  EF38  F002         	goto	l2062
  1444  00044C                     u1520:
  1445  00044C                     
  1446                           ; BSR set to: 0
  1447  00044C  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1448  000450  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1449  000454  CFDE FFF6          	movff	postinc2,tblptrl
  1450  000458  CFDD FFF7          	movff	postdec2,tblptrh
  1451  00045C                     	if	0	;tblptru may be non-zero
  1452  00045C                     	endif
  1453  00045C                     	if	0	;tblptru may be non-zero
  1454  00045C                     	endif
  1455  00045C  0008               	tblrd		*
  1456  00045E  50F5               	movf	tablat,w,c
  1457  000460  0A69               	xorlw	105
  1458  000462  A4D8               	btfss	status,2,c
  1459  000464  EF36  F002         	goto	u1531
  1460  000468  EF38  F002         	goto	u1530
  1461  00046C                     u1531:
  1462  00046C  EF78  F002         	goto	l2068
  1463  000470                     u1530:
  1464  000470                     l2062:
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1468  000470  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1469  000474  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1470  000478  2ADE               	incf	postinc2,f,c
  1471  00047A  0E00               	movlw	0
  1472  00047C  22DD               	addwfc	postdec2,f,c
  1473                           
  1474                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1475  00047E  C03B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1476  000482  C03C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1477  000486  CFDF F07A          	movff	indf2,??_vfpfcnvrt
  1478  00048A  0E02               	movlw	2
  1479  00048C  26DE               	addwf	postinc2,f,c
  1480  00048E  CFDF F07B          	movff	indf2,??_vfpfcnvrt+1
  1481  000492  0E00               	movlw	0
  1482  000494  22DD               	addwfc	postdec2,f,c
  1483  000496  C07A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1484  00049A  C07B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1485  00049E  CFDE F07C          	movff	postinc2,vfpfcnvrt@ll
  1486  0004A2  CFDD F07D          	movff	postdec2,vfpfcnvrt@ll+1
  1487  0004A6  0E00               	movlw	0
  1488  0004A8  BF7D               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  1489  0004AA  0EFF               	movlw	-1
  1490  0004AC  6F7E               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  1491  0004AE  6F7F               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  1492  0004B0  6F80               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  1493  0004B2  6F81               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  1494  0004B4  6F82               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  1495  0004B6  6F83               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  1496  0004B8                     
  1497                           ; BSR set to: 0
  1498                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1499  0004B8  C037  F02D         	movff	vfpfcnvrt@fp,dtoa@fp
  1500  0004BC  C038  F02E         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1501  0004C0  C07C  F02F         	movff	vfpfcnvrt@ll,dtoa@d
  1502  0004C4  C07D  F030         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1503  0004C8  C07E  F031         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1504  0004CC  C07F  F032         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1505  0004D0  C080  F033         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1506  0004D4  C081  F034         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1507  0004D8  C082  F035         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1508  0004DC  C083  F036         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1509  0004E0  EC7F  F000         	call	_dtoa	;wreg free
  1510  0004E4  C02D  F037         	movff	?_dtoa,?_vfpfcnvrt
  1511  0004E8  C02E  F038         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1512  0004EC  EFC9  F002         	goto	l294
  1513  0004F0                     l2068:
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1517  0004F0  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1518  0004F4  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1519  0004F8  CFDE FFF6          	movff	postinc2,tblptrl
  1520  0004FC  CFDD FFF7          	movff	postdec2,tblptrh
  1521  000500                     	if	0	;tblptru may be non-zero
  1522  000500                     	endif
  1523  000500                     	if	0	;tblptru may be non-zero
  1524  000500                     	endif
  1525  000500  0008               	tblrd		*
  1526  000502  50F5               	movf	tablat,w,c
  1527  000504  0A25               	xorlw	37
  1528  000506  A4D8               	btfss	status,2,c
  1529  000508  EF88  F002         	goto	u1541
  1530  00050C  EF8A  F002         	goto	u1540
  1531  000510                     u1541:
  1532  000510  EFA1  F002         	goto	l2078
  1533  000514                     u1540:
  1534  000514                     
  1535                           ; BSR set to: 0
  1536                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1537  000514  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1538  000518  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1539  00051C  2ADE               	incf	postinc2,f,c
  1540  00051E  0E00               	movlw	0
  1541  000520  22DD               	addwfc	postdec2,f,c
  1542  000522                     
  1543                           ; BSR set to: 0
  1544                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1545  000522  0E00               	movlw	0
  1546  000524  6E13               	movwf	(fputc@c+1)^0,c
  1547  000526  0E25               	movlw	37
  1548  000528  6E12               	movwf	fputc@c^0,c
  1549  00052A  C037  F014         	movff	vfpfcnvrt@fp,fputc@fp
  1550  00052E  C038  F015         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1551  000532  ECCC  F004         	call	_fputc	;wreg free
  1552  000536                     l2074:
  1553                           
  1554                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1555  000536  0E00               	movlw	0
  1556  000538  6E38               	movwf	(?_vfpfcnvrt+1)^0,c
  1557  00053A  0E01               	movlw	1
  1558  00053C  6E37               	movwf	?_vfpfcnvrt^0,c
  1559  00053E  EFC9  F002         	goto	l294
  1560  000542                     l2078:
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1564  000542  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1565  000546  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1566  00054A  2ADE               	incf	postinc2,f,c
  1567  00054C  0E00               	movlw	0
  1568  00054E  22DD               	addwfc	postdec2,f,c
  1569  000550                     
  1570                           ; BSR set to: 0
  1571                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1572  000550  0E00               	movlw	0
  1573  000552  6E38               	movwf	(?_vfpfcnvrt+1)^0,c
  1574  000554  0E00               	movlw	0
  1575  000556  6E37               	movwf	?_vfpfcnvrt^0,c
  1576  000558  EFC9  F002         	goto	l294
  1577  00055C                     l2084:
  1578                           
  1579                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1580  00055C  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1581  000560  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1582  000564  CFDE FFF6          	movff	postinc2,tblptrl
  1583  000568  CFDD FFF7          	movff	postdec2,tblptrh
  1584  00056C                     	if	0	;tblptru may be non-zero
  1585  00056C                     	endif
  1586  00056C                     	if	0	;tblptru may be non-zero
  1587  00056C                     	endif
  1588  00056C  0008               	tblrd		*
  1589  00056E  50F5               	movf	tablat,w,c
  1590  000570  6E12               	movwf	fputc@c^0,c
  1591  000572  6A13               	clrf	(fputc@c+1)^0,c
  1592  000574  C037  F014         	movff	vfpfcnvrt@fp,fputc@fp
  1593  000578  C038  F015         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1594  00057C  ECCC  F004         	call	_fputc	;wreg free
  1595  000580                     
  1596                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1597  000580  C039  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1598  000584  C03A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1599  000588  2ADE               	incf	postinc2,f,c
  1600  00058A  0E00               	movlw	0
  1601  00058C  22DD               	addwfc	postdec2,f,c
  1602  00058E  EF9B  F002         	goto	l2074
  1603  000592                     l294:
  1604  000592  0012               	return		;funcret
  1605  000594                     __end_of_vfpfcnvrt:
  1606                           	opt callstack 0
  1607                           
  1608 ;; *************** function _dtoa *****************
  1609 ;; Defined at:
  1610 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  fp              2   44[COMRAM] PTR struct _IO_FILE
  1613 ;;		 -> sprintf@f(6), 
  1614 ;;  d               8   46[COMRAM] long long 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  n               8   16[BANK0 ] long long 
  1617 ;;  i               2   24[BANK0 ] int 
  1618 ;;  s               2   14[BANK0 ] int 
  1619 ;;  w               2   12[BANK0 ] int 
  1620 ;;  p               2   10[BANK0 ] int 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  2   44[COMRAM] int 
  1623 ;; Registers used:
  1624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1630 ;;      Params:        10       0       0       0
  1631 ;;      Locals:         0      18       0       0
  1632 ;;      Temps:          0       8       0       0
  1633 ;;      Totals:        10      26       0       0
  1634 ;;Total ram usage:       36 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    7
  1637 ;; This function calls:
  1638 ;;		___aodiv
  1639 ;;		___aomod
  1640 ;;		_abs
  1641 ;;		_pad
  1642 ;; This function is called by:
  1643 ;;		_vfpfcnvrt
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text5
  1648  0000FE                     __ptext5:
  1649                           	opt callstack 0
  1650  0000FE                     _dtoa:
  1651                           	opt callstack 19
  1652  0000FE                     
  1653                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1654  0000FE  C02F  F070         	movff	dtoa@d,dtoa@n
  1655  000102  C030  F071         	movff	dtoa@d+1,dtoa@n+1
  1656  000106  C031  F072         	movff	dtoa@d+2,dtoa@n+2
  1657  00010A  C032  F073         	movff	dtoa@d+3,dtoa@n+3
  1658  00010E  C033  F074         	movff	dtoa@d+4,dtoa@n+4
  1659  000112  C034  F075         	movff	dtoa@d+5,dtoa@n+5
  1660  000116  C035  F076         	movff	dtoa@d+6,dtoa@n+6
  1661  00011A  C036  F077         	movff	dtoa@d+7,dtoa@n+7
  1662  00011E                     
  1663                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1664  00011E  0100               	movlb	0	; () banked
  1665  000120  BF77               	btfsc	(dtoa@n+7)& (0+255),7,b
  1666  000122  EF95  F000         	goto	u1361
  1667  000126  EF98  F000         	goto	u1360
  1668  00012A                     u1361:
  1669  00012A  0E01               	movlw	1
  1670  00012C  EF99  F000         	goto	u1370
  1671  000130                     u1360:
  1672  000130  0E00               	movlw	0
  1673  000132                     u1370:
  1674  000132  6F6E               	movwf	dtoa@s& (0+255),b
  1675  000134  6B6F               	clrf	(dtoa@s+1)& (0+255),b
  1676                           
  1677                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1678  000136  516E               	movf	dtoa@s& (0+255),w,b
  1679  000138  116F               	iorwf	(dtoa@s+1)& (0+255),w,b
  1680  00013A  B4D8               	btfsc	status,2,c
  1681  00013C  EFA2  F000         	goto	u1381
  1682  000140  EFA4  F000         	goto	u1380
  1683  000144                     u1381:
  1684  000144  EFB4  F000         	goto	l1994
  1685  000148                     u1380:
  1686  000148                     
  1687                           ; BSR set to: 0
  1688                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1689  000148  1F77               	comf	(dtoa@n+7)& (0+255),f,b
  1690  00014A  1F76               	comf	(dtoa@n+6)& (0+255),f,b
  1691  00014C  1F75               	comf	(dtoa@n+5)& (0+255),f,b
  1692  00014E  1F74               	comf	(dtoa@n+4)& (0+255),f,b
  1693  000150  1F73               	comf	(dtoa@n+3)& (0+255),f,b
  1694  000152  1F72               	comf	(dtoa@n+2)& (0+255),f,b
  1695  000154  1F71               	comf	(dtoa@n+1)& (0+255),f,b
  1696  000156  6D70               	negf	dtoa@n& (0+255),b
  1697  000158  0E00               	movlw	0
  1698  00015A  2371               	addwfc	(dtoa@n+1)& (0+255),f,b
  1699  00015C  2372               	addwfc	(dtoa@n+2)& (0+255),f,b
  1700  00015E  2373               	addwfc	(dtoa@n+3)& (0+255),f,b
  1701  000160  2374               	addwfc	(dtoa@n+4)& (0+255),f,b
  1702  000162  2375               	addwfc	(dtoa@n+5)& (0+255),f,b
  1703  000164  2376               	addwfc	(dtoa@n+6)& (0+255),f,b
  1704  000166  2377               	addwfc	(dtoa@n+7)& (0+255),f,b
  1705  000168                     l1994:
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1709  000168  BE48               	btfsc	(_prec+1)^0,7,c
  1710  00016A  EFB9  F000         	goto	u1391
  1711  00016E  EFBB  F000         	goto	u1390
  1712  000172                     u1391:
  1713  000172  EFBC  F000         	goto	l1998
  1714  000176                     u1390:
  1715  000176                     
  1716                           ; BSR set to: 0
  1717                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1718  000176  9249               	bcf	_flags^0,1,c
  1719  000178                     l1998:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1723  000178  BE48               	btfsc	(_prec+1)^0,7,c
  1724  00017A  EFC9  F000         	goto	u1400
  1725  00017E  5048               	movf	(_prec+1)^0,w,c
  1726  000180  E106               	bnz	u1401
  1727  000182  0447               	decf	_prec^0,w,c
  1728  000184  B0D8               	btfsc	status,0,c
  1729  000186  EFC7  F000         	goto	u1401
  1730  00018A  EFC9  F000         	goto	u1400
  1731  00018E                     u1401:
  1732  00018E  EFCF  F000         	goto	l267
  1733  000192                     u1400:
  1734  000192                     
  1735                           ; BSR set to: 0
  1736  000192  0E00               	movlw	0
  1737  000194  6F6B               	movwf	(dtoa@p+1)& (0+255),b
  1738  000196  0E01               	movlw	1
  1739  000198  6F6A               	movwf	dtoa@p& (0+255),b
  1740  00019A  EFD3  F000         	goto	l269
  1741  00019E                     l267:
  1742                           
  1743                           ; BSR set to: 0
  1744  00019E  C047  F06A         	movff	_prec,dtoa@p
  1745  0001A2  C048  F06B         	movff	_prec+1,dtoa@p+1
  1746  0001A6                     l269:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1750  0001A6  C0B2  F06C         	movff	_width,dtoa@w
  1751  0001AA  C0B3  F06D         	movff	_width+1,dtoa@w+1
  1752  0001AE                     
  1753                           ; BSR set to: 0
  1754                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1755  0001AE  516E               	movf	dtoa@s& (0+255),w,b
  1756  0001B0  116F               	iorwf	(dtoa@s+1)& (0+255),w,b
  1757  0001B2  A4D8               	btfss	status,2,c
  1758  0001B4  EFDE  F000         	goto	u1411
  1759  0001B8  EFE0  F000         	goto	u1410
  1760  0001BC                     u1411:
  1761  0001BC  EFE7  F000         	goto	l2006
  1762  0001C0                     u1410:
  1763  0001C0                     
  1764                           ; BSR set to: 0
  1765  0001C0  A449               	btfss	_flags^0,2,c
  1766  0001C2  EFE5  F000         	goto	u1421
  1767  0001C6  EFE7  F000         	goto	u1420
  1768  0001CA                     u1421:
  1769  0001CA  EFEA  F000         	goto	l2008
  1770  0001CE                     u1420:
  1771  0001CE                     l2006:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1775  0001CE  076C               	decf	dtoa@w& (0+255),f,b
  1776  0001D0  A0D8               	btfss	status,0,c
  1777  0001D2  076D               	decf	(dtoa@w+1)& (0+255),f,b
  1778  0001D4                     l2008:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1782  0001D4  0E00               	movlw	0
  1783  0001D6  6F79               	movwf	(dtoa@i+1)& (0+255),b
  1784  0001D8  0E1F               	movlw	31
  1785  0001DA  6F78               	movwf	dtoa@i& (0+255),b
  1786  0001DC                     
  1787                           ; BSR set to: 0
  1788                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1789  0001DC  0E00               	movlw	0
  1790  0001DE  6FD6               	movwf	(_dbuf+31)& (0+255),b
  1791                           
  1792                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1793  0001E0  EF6F  F001         	goto	l2022
  1794  0001E4                     l2012:
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1798  0001E4  0778               	decf	dtoa@i& (0+255),f,b
  1799  0001E6  A0D8               	btfss	status,0,c
  1800  0001E8  0779               	decf	(dtoa@i+1)& (0+255),f,b
  1801  0001EA                     
  1802                           ; BSR set to: 0
  1803                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1804  0001EA  0EB7               	movlw	low _dbuf
  1805  0001EC  2578               	addwf	dtoa@i& (0+255),w,b
  1806  0001EE  6ED9               	movwf	fsr2l,c
  1807  0001F0  0E00               	movlw	high _dbuf
  1808  0001F2  2179               	addwfc	(dtoa@i+1)& (0+255),w,b
  1809  0001F4  6EDA               	movwf	fsr2h,c
  1810  0001F6  C070  F012         	movff	dtoa@n,___aomod@dividend
  1811  0001FA  C071  F013         	movff	dtoa@n+1,___aomod@dividend+1
  1812  0001FE  C072  F014         	movff	dtoa@n+2,___aomod@dividend+2
  1813  000202  C073  F015         	movff	dtoa@n+3,___aomod@dividend+3
  1814  000206  C074  F016         	movff	dtoa@n+4,___aomod@dividend+4
  1815  00020A  C075  F017         	movff	dtoa@n+5,___aomod@dividend+5
  1816  00020E  C076  F018         	movff	dtoa@n+6,___aomod@dividend+6
  1817  000212  C077  F019         	movff	dtoa@n+7,___aomod@dividend+7
  1818  000216  0E0A               	movlw	10
  1819  000218  6E1A               	movwf	___aomod@divisor^0,c
  1820  00021A  0E00               	movlw	0
  1821  00021C  6E1B               	movwf	(___aomod@divisor+1)^0,c
  1822  00021E  0E00               	movlw	0
  1823  000220  6E1C               	movwf	(___aomod@divisor+2)^0,c
  1824  000222  0E00               	movlw	0
  1825  000224  6E1D               	movwf	(___aomod@divisor+3)^0,c
  1826  000226  0E00               	movlw	0
  1827  000228  6E1E               	movwf	(___aomod@divisor+4)^0,c
  1828  00022A  0E00               	movlw	0
  1829  00022C  6E1F               	movwf	(___aomod@divisor+5)^0,c
  1830  00022E  0E00               	movlw	0
  1831  000230  6E20               	movwf	(___aomod@divisor+6)^0,c
  1832  000232  0E00               	movlw	0
  1833  000234  6E21               	movwf	(___aomod@divisor+7)^0,c
  1834  000236  EC8E  F003         	call	___aomod	;wreg free
  1835  00023A  C012  F060         	movff	?___aomod,??_dtoa
  1836  00023E  C013  F061         	movff	?___aomod+1,??_dtoa+1
  1837  000242  C014  F062         	movff	?___aomod+2,??_dtoa+2
  1838  000246  C015  F063         	movff	?___aomod+3,??_dtoa+3
  1839  00024A  C016  F064         	movff	?___aomod+4,??_dtoa+4
  1840  00024E  C017  F065         	movff	?___aomod+5,??_dtoa+5
  1841  000252  C018  F066         	movff	?___aomod+6,??_dtoa+6
  1842  000256  C019  F067         	movff	?___aomod+7,??_dtoa+7
  1843  00025A  C060  F024         	movff	??_dtoa,abs@a
  1844  00025E  C062  F025         	movff	??_dtoa+2,abs@a+1
  1845  000262  EC4F  F007         	call	_abs	;wreg free
  1846  000266  5024               	movf	?_abs^0,w,c
  1847  000268  0F30               	addlw	48
  1848  00026A  6EDF               	movwf	indf2,c
  1849  00026C                     
  1850                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1851  00026C  0100               	movlb	0	; () banked
  1852  00026E  076A               	decf	dtoa@p& (0+255),f,b
  1853  000270  A0D8               	btfss	status,0,c
  1854  000272  076B               	decf	(dtoa@p+1)& (0+255),f,b
  1855  000274                     
  1856                           ; BSR set to: 0
  1857                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1858  000274  076C               	decf	dtoa@w& (0+255),f,b
  1859  000276  A0D8               	btfss	status,0,c
  1860  000278  076D               	decf	(dtoa@w+1)& (0+255),f,b
  1861  00027A                     
  1862                           ; BSR set to: 0
  1863                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1864  00027A  C070  F012         	movff	dtoa@n,___aodiv@dividend
  1865  00027E  C071  F013         	movff	dtoa@n+1,___aodiv@dividend+1
  1866  000282  C072  F014         	movff	dtoa@n+2,___aodiv@dividend+2
  1867  000286  C073  F015         	movff	dtoa@n+3,___aodiv@dividend+3
  1868  00028A  C074  F016         	movff	dtoa@n+4,___aodiv@dividend+4
  1869  00028E  C075  F017         	movff	dtoa@n+5,___aodiv@dividend+5
  1870  000292  C076  F018         	movff	dtoa@n+6,___aodiv@dividend+6
  1871  000296  C077  F019         	movff	dtoa@n+7,___aodiv@dividend+7
  1872  00029A  0E0A               	movlw	10
  1873  00029C  6E1A               	movwf	___aodiv@divisor^0,c
  1874  00029E  0E00               	movlw	0
  1875  0002A0  6E1B               	movwf	(___aodiv@divisor+1)^0,c
  1876  0002A2  0E00               	movlw	0
  1877  0002A4  6E1C               	movwf	(___aodiv@divisor+2)^0,c
  1878  0002A6  0E00               	movlw	0
  1879  0002A8  6E1D               	movwf	(___aodiv@divisor+3)^0,c
  1880  0002AA  0E00               	movlw	0
  1881  0002AC  6E1E               	movwf	(___aodiv@divisor+4)^0,c
  1882  0002AE  0E00               	movlw	0
  1883  0002B0  6E1F               	movwf	(___aodiv@divisor+5)^0,c
  1884  0002B2  0E00               	movlw	0
  1885  0002B4  6E20               	movwf	(___aodiv@divisor+6)^0,c
  1886  0002B6  0E00               	movlw	0
  1887  0002B8  6E21               	movwf	(___aodiv@divisor+7)^0,c
  1888  0002BA  ECCA  F002         	call	___aodiv	;wreg free
  1889  0002BE  C012  F070         	movff	?___aodiv,dtoa@n
  1890  0002C2  C013  F071         	movff	?___aodiv+1,dtoa@n+1
  1891  0002C6  C014  F072         	movff	?___aodiv+2,dtoa@n+2
  1892  0002CA  C015  F073         	movff	?___aodiv+3,dtoa@n+3
  1893  0002CE  C016  F074         	movff	?___aodiv+4,dtoa@n+4
  1894  0002D2  C017  F075         	movff	?___aodiv+5,dtoa@n+5
  1895  0002D6  C018  F076         	movff	?___aodiv+6,dtoa@n+6
  1896  0002DA  C019  F077         	movff	?___aodiv+7,dtoa@n+7
  1897  0002DE                     l2022:
  1898                           
  1899                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1900  0002DE  0100               	movlb	0	; () banked
  1901  0002E0  BF79               	btfsc	(dtoa@i+1)& (0+255),7,b
  1902  0002E2  EF7B  F001         	goto	u1431
  1903  0002E6  5179               	movf	(dtoa@i+1)& (0+255),w,b
  1904  0002E8  E108               	bnz	u1430
  1905  0002EA  0578               	decf	dtoa@i& (0+255),w,b
  1906  0002EC  A0D8               	btfss	status,0,c
  1907  0002EE  EF7B  F001         	goto	u1431
  1908  0002F2  EF7D  F001         	goto	u1430
  1909  0002F6                     u1431:
  1910  0002F6  EFAD  F001         	goto	l2032
  1911  0002FA                     u1430:
  1912  0002FA                     
  1913                           ; BSR set to: 0
  1914  0002FA  5170               	movf	dtoa@n& (0+255),w,b
  1915  0002FC  1171               	iorwf	(dtoa@n+1)& (0+255),w,b
  1916  0002FE  1172               	iorwf	(dtoa@n+2)& (0+255),w,b
  1917  000300  1173               	iorwf	(dtoa@n+3)& (0+255),w,b
  1918  000302  1174               	iorwf	(dtoa@n+4)& (0+255),w,b
  1919  000304  1175               	iorwf	(dtoa@n+5)& (0+255),w,b
  1920  000306  1176               	iorwf	(dtoa@n+6)& (0+255),w,b
  1921  000308  1177               	iorwf	(dtoa@n+7)& (0+255),w,b
  1922  00030A  A4D8               	btfss	status,2,c
  1923  00030C  EF8A  F001         	goto	u1441
  1924  000310  EF8C  F001         	goto	u1440
  1925  000314                     u1441:
  1926  000314  EFF2  F000         	goto	l2012
  1927  000318                     u1440:
  1928  000318                     
  1929                           ; BSR set to: 0
  1930  000318  BF6B               	btfsc	(dtoa@p+1)& (0+255),7,b
  1931  00031A  EF99  F001         	goto	u1450
  1932  00031E  516B               	movf	(dtoa@p+1)& (0+255),w,b
  1933  000320  E106               	bnz	u1451
  1934  000322  056A               	decf	dtoa@p& (0+255),w,b
  1935  000324  B0D8               	btfsc	status,0,c
  1936  000326  EF97  F001         	goto	u1451
  1937  00032A  EF99  F001         	goto	u1450
  1938  00032E                     u1451:
  1939  00032E  EFF2  F000         	goto	l2012
  1940  000332                     u1450:
  1941  000332                     
  1942                           ; BSR set to: 0
  1943  000332  BF6D               	btfsc	(dtoa@w+1)& (0+255),7,b
  1944  000334  EFA4  F001         	goto	u1461
  1945  000338  516D               	movf	(dtoa@w+1)& (0+255),w,b
  1946  00033A  E108               	bnz	u1460
  1947  00033C  056C               	decf	dtoa@w& (0+255),w,b
  1948  00033E  A0D8               	btfss	status,0,c
  1949  000340  EFA4  F001         	goto	u1461
  1950  000344  EFA6  F001         	goto	u1460
  1951  000348                     u1461:
  1952  000348  EFAD  F001         	goto	l2032
  1953  00034C                     u1460:
  1954  00034C                     
  1955                           ; BSR set to: 0
  1956  00034C  B249               	btfsc	_flags^0,1,c
  1957  00034E  EFAB  F001         	goto	u1471
  1958  000352  EFAD  F001         	goto	u1470
  1959  000356                     u1471:
  1960  000356  EFF2  F000         	goto	l2012
  1961  00035A                     u1470:
  1962  00035A                     l2032:
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1966  00035A  516E               	movf	dtoa@s& (0+255),w,b
  1967  00035C  116F               	iorwf	(dtoa@s+1)& (0+255),w,b
  1968  00035E  A4D8               	btfss	status,2,c
  1969  000360  EFB4  F001         	goto	u1481
  1970  000364  EFB6  F001         	goto	u1480
  1971  000368                     u1481:
  1972  000368  EFBD  F001         	goto	l2036
  1973  00036C                     u1480:
  1974  00036C                     
  1975                           ; BSR set to: 0
  1976  00036C  A449               	btfss	_flags^0,2,c
  1977  00036E  EFBB  F001         	goto	u1491
  1978  000372  EFBD  F001         	goto	u1490
  1979  000376                     u1491:
  1980  000376  EFDB  F001         	goto	l2046
  1981  00037A                     u1490:
  1982  00037A                     l2036:
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1986  00037A  0778               	decf	dtoa@i& (0+255),f,b
  1987  00037C  A0D8               	btfss	status,0,c
  1988  00037E  0779               	decf	(dtoa@i+1)& (0+255),f,b
  1989  000380                     
  1990                           ; BSR set to: 0
  1991                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1992  000380  516E               	movf	dtoa@s& (0+255),w,b
  1993  000382  116F               	iorwf	(dtoa@s+1)& (0+255),w,b
  1994  000384  A4D8               	btfss	status,2,c
  1995  000386  EFC7  F001         	goto	u1501
  1996  00038A  EFC9  F001         	goto	u1500
  1997  00038E                     u1501:
  1998  00038E  EFCF  F001         	goto	l2042
  1999  000392                     u1500:
  2000  000392                     
  2001                           ; BSR set to: 0
  2002  000392  0E00               	movlw	0
  2003  000394  6F69               	movwf	(_dtoa$1353+1)& (0+255),b
  2004  000396  0E2B               	movlw	43
  2005  000398  6F68               	movwf	_dtoa$1353& (0+255),b
  2006  00039A  EFD3  F001         	goto	l2044
  2007  00039E                     l2042:
  2008                           
  2009                           ; BSR set to: 0
  2010  00039E  0E00               	movlw	0
  2011  0003A0  6F69               	movwf	(_dtoa$1353+1)& (0+255),b
  2012  0003A2  0E2D               	movlw	45
  2013  0003A4  6F68               	movwf	_dtoa$1353& (0+255),b
  2014  0003A6                     l2044:
  2015                           
  2016                           ; BSR set to: 0
  2017  0003A6  0EB7               	movlw	low _dbuf
  2018  0003A8  2578               	addwf	dtoa@i& (0+255),w,b
  2019  0003AA  6ED9               	movwf	fsr2l,c
  2020  0003AC  0E00               	movlw	high _dbuf
  2021  0003AE  2179               	addwfc	(dtoa@i+1)& (0+255),w,b
  2022  0003B0  6EDA               	movwf	fsr2h,c
  2023  0003B2  C068  FFDF         	movff	_dtoa$1353,indf2
  2024  0003B6                     l2046:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  2028  0003B6  C02D  F022         	movff	dtoa@fp,pad@fp
  2029  0003BA  C02E  F023         	movff	dtoa@fp+1,pad@fp+1
  2030  0003BE  0EB7               	movlw	low _dbuf
  2031  0003C0  2578               	addwf	dtoa@i& (0+255),w,b
  2032  0003C2  6E24               	movwf	pad@buf^0,c
  2033  0003C4  0E00               	movlw	high _dbuf
  2034  0003C6  2179               	addwfc	(dtoa@i+1)& (0+255),w,b
  2035  0003C8  6E25               	movwf	(pad@buf+1)^0,c
  2036  0003CA  C06C  F026         	movff	dtoa@w,pad@p
  2037  0003CE  C06D  F027         	movff	dtoa@w+1,pad@p+1
  2038  0003D2  EC31  F005         	call	_pad	;wreg free
  2039  0003D6  C022  F02D         	movff	?_pad,?_dtoa
  2040  0003DA  C023  F02E         	movff	?_pad+1,?_dtoa+1
  2041  0003DE  0012               	return		;funcret
  2042  0003E0                     __end_of_dtoa:
  2043                           	opt callstack 0
  2044                           
  2045 ;; *************** function _pad *****************
  2046 ;; Defined at:
  2047 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  fp              2   33[COMRAM] PTR struct _IO_FILE
  2050 ;;		 -> sprintf@f(6), 
  2051 ;;  buf             2   35[COMRAM] PTR unsigned char 
  2052 ;;		 -> dbuf(32), 
  2053 ;;  p               2   37[COMRAM] int 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  w               2   42[COMRAM] int 
  2056 ;;  i               2   40[COMRAM] int 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  2   33[COMRAM] int 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2066 ;;      Params:         6       0       0       0
  2067 ;;      Locals:         4       0       0       0
  2068 ;;      Temps:          1       0       0       0
  2069 ;;      Totals:        11       0       0       0
  2070 ;;Total ram usage:       11 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    6
  2073 ;; This function calls:
  2074 ;;		_fputc
  2075 ;;		_fputs
  2076 ;;		_strlen
  2077 ;; This function is called by:
  2078 ;;		_dtoa
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text6
  2083  000A62                     __ptext6:
  2084                           	opt callstack 0
  2085  000A62                     _pad:
  2086                           	opt callstack 19
  2087  000A62                     
  2088                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2089  000A62  A049               	btfss	_flags^0,0,c
  2090  000A64  EF36  F005         	goto	u761
  2091  000A68  EF38  F005         	goto	u760
  2092  000A6C                     u761:
  2093  000A6C  EF42  F005         	goto	l1596
  2094  000A70                     u760:
  2095  000A70                     
  2096                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2097  000A70  C024  F01B         	movff	pad@buf,fputs@s
  2098  000A74  C025  F01C         	movff	pad@buf+1,fputs@s+1
  2099  000A78  C022  F01D         	movff	pad@fp,fputs@fp
  2100  000A7C  C023  F01E         	movff	pad@fp+1,fputs@fp+1
  2101  000A80  EC2D  F007         	call	_fputs	;wreg free
  2102  000A84                     l1596:
  2103                           
  2104                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2105  000A84  BE27               	btfsc	(pad@p+1)^0,7,c
  2106  000A86  EF47  F005         	goto	u771
  2107  000A8A  EF49  F005         	goto	u770
  2108  000A8E                     u771:
  2109  000A8E  EF4F  F005         	goto	l1600
  2110  000A92                     u770:
  2111  000A92  C026  F02B         	movff	pad@p,pad@w
  2112  000A96  C027  F02C         	movff	pad@p+1,pad@w+1
  2113  000A9A  EF53  F005         	goto	l256
  2114  000A9E                     l1600:
  2115  000A9E  0E00               	movlw	0
  2116  000AA0  6E2C               	movwf	(pad@w+1)^0,c
  2117  000AA2  0E00               	movlw	0
  2118  000AA4  6E2B               	movwf	pad@w^0,c
  2119  000AA6                     l256:
  2120                           
  2121                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2122  000AA6  0E00               	movlw	0
  2123  000AA8  6E2A               	movwf	(pad@i+1)^0,c
  2124  000AAA  0E00               	movlw	0
  2125  000AAC  6E29               	movwf	pad@i^0,c
  2126                           
  2127                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2128  000AAE  EF65  F005         	goto	l1606
  2129  000AB2                     l1602:
  2130                           
  2131                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2132  000AB2  0E00               	movlw	0
  2133  000AB4  6E13               	movwf	(fputc@c+1)^0,c
  2134  000AB6  0E20               	movlw	32
  2135  000AB8  6E12               	movwf	fputc@c^0,c
  2136  000ABA  C022  F014         	movff	pad@fp,fputc@fp
  2137  000ABE  C023  F015         	movff	pad@fp+1,fputc@fp+1
  2138  000AC2  ECCC  F004         	call	_fputc	;wreg free
  2139  000AC6                     
  2140                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2141  000AC6  4A29               	infsnz	pad@i^0,f,c
  2142  000AC8  2A2A               	incf	(pad@i+1)^0,f,c
  2143  000ACA                     l1606:
  2144                           
  2145                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2146  000ACA  502B               	movf	pad@w^0,w,c
  2147  000ACC  5C29               	subwf	pad@i^0,w,c
  2148  000ACE  502A               	movf	(pad@i+1)^0,w,c
  2149  000AD0  0A80               	xorlw	128
  2150  000AD2  6E28               	movwf	??_pad^0,c
  2151  000AD4  502C               	movf	(pad@w+1)^0,w,c
  2152  000AD6  0A80               	xorlw	128
  2153  000AD8  5828               	subwfb	??_pad^0,w,c
  2154  000ADA  A0D8               	btfss	status,0,c
  2155  000ADC  EF72  F005         	goto	u781
  2156  000AE0  EF74  F005         	goto	u780
  2157  000AE4                     u781:
  2158  000AE4  EF59  F005         	goto	l1602
  2159  000AE8                     u780:
  2160  000AE8                     
  2161                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2162  000AE8  B049               	btfsc	_flags^0,0,c
  2163  000AEA  EF79  F005         	goto	u791
  2164  000AEE  EF7B  F005         	goto	u790
  2165  000AF2                     u791:
  2166  000AF2  EF85  F005         	goto	l1610
  2167  000AF6                     u790:
  2168  000AF6                     
  2169                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2170  000AF6  C024  F01B         	movff	pad@buf,fputs@s
  2171  000AFA  C025  F01C         	movff	pad@buf+1,fputs@s+1
  2172  000AFE  C022  F01D         	movff	pad@fp,fputs@fp
  2173  000B02  C023  F01E         	movff	pad@fp+1,fputs@fp+1
  2174  000B06  EC2D  F007         	call	_fputs	;wreg free
  2175  000B0A                     l1610:
  2176                           
  2177                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2178  000B0A  C024  F012         	movff	pad@buf,strlen@s
  2179  000B0E  C025  F013         	movff	pad@buf+1,strlen@s+1
  2180  000B12  ECEB  F007         	call	_strlen	;wreg free
  2181  000B16  502B               	movf	pad@w^0,w,c
  2182  000B18  2412               	addwf	?_strlen^0,w,c
  2183  000B1A  6E22               	movwf	?_pad^0,c
  2184  000B1C  502C               	movf	(pad@w+1)^0,w,c
  2185  000B1E  2013               	addwfc	(?_strlen+1)^0,w,c
  2186  000B20  6E23               	movwf	(?_pad+1)^0,c
  2187  000B22  0012               	return		;funcret
  2188  000B24                     __end_of_pad:
  2189                           	opt callstack 0
  2190                           
  2191 ;; *************** function _strlen *****************
  2192 ;; Defined at:
  2193 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  s               2   17[COMRAM] PTR const unsigned char 
  2196 ;;		 -> dbuf(32), 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  a               2   19[COMRAM] PTR const unsigned char 
  2199 ;;		 -> dbuf(32), 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  2   17[COMRAM] unsigned int 
  2202 ;; Registers used:
  2203 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2209 ;;      Params:         2       0       0       0
  2210 ;;      Locals:         2       0       0       0
  2211 ;;      Temps:          0       0       0       0
  2212 ;;      Totals:         4       0       0       0
  2213 ;;Total ram usage:        4 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    3
  2216 ;; This function calls:
  2217 ;;		Nothing
  2218 ;; This function is called by:
  2219 ;;		_pad
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text7
  2224  000FD6                     __ptext7:
  2225                           	opt callstack 0
  2226  000FD6                     _strlen:
  2227                           	opt callstack 21
  2228  000FD6  C012  F014         	movff	strlen@s,strlen@a
  2229  000FDA  C013  F015         	movff	strlen@s+1,strlen@a+1
  2230  000FDE  EFF3  F007         	goto	l1586
  2231  000FE2                     l1584:
  2232  000FE2  4A12               	infsnz	strlen@s^0,f,c
  2233  000FE4  2A13               	incf	(strlen@s+1)^0,f,c
  2234  000FE6                     l1586:
  2235  000FE6  C012  FFD9         	movff	strlen@s,fsr2l
  2236  000FEA  C013  FFDA         	movff	strlen@s+1,fsr2h
  2237  000FEE  50DF               	movf	indf2,w,c
  2238  000FF0  A4D8               	btfss	status,2,c
  2239  000FF2  EFFD  F007         	goto	u751
  2240  000FF6  EFFF  F007         	goto	u750
  2241  000FFA                     u751:
  2242  000FFA  EFF1  F007         	goto	l1584
  2243  000FFE                     u750:
  2244  000FFE  5014               	movf	strlen@a^0,w,c
  2245  001000  5C12               	subwf	strlen@s^0,w,c
  2246  001002  6E12               	movwf	?_strlen^0,c
  2247  001004  5015               	movf	(strlen@a+1)^0,w,c
  2248  001006  5813               	subwfb	(strlen@s+1)^0,w,c
  2249  001008  6E13               	movwf	(?_strlen+1)^0,c
  2250  00100A  0012               	return		;funcret
  2251  00100C                     __end_of_strlen:
  2252                           	opt callstack 0
  2253                           
  2254 ;; *************** function _fputs *****************
  2255 ;; Defined at:
  2256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  s               2   26[COMRAM] PTR const unsigned char 
  2259 ;;		 -> dbuf(32), 
  2260 ;;  fp              2   28[COMRAM] PTR struct _IO_FILE
  2261 ;;		 -> sprintf@f(6), 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  i               2   31[COMRAM] int 
  2264 ;;  c               1   30[COMRAM] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  2   26[COMRAM] int 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2274 ;;      Params:         4       0       0       0
  2275 ;;      Locals:         3       0       0       0
  2276 ;;      Temps:          0       0       0       0
  2277 ;;      Totals:         7       0       0       0
  2278 ;;Total ram usage:        7 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    5
  2281 ;; This function calls:
  2282 ;;		_fputc
  2283 ;; This function is called by:
  2284 ;;		_pad
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text8
  2289  000E5A                     __ptext8:
  2290                           	opt callstack 0
  2291  000E5A                     _fputs:
  2292                           	opt callstack 19
  2293  000E5A  0E00               	movlw	0
  2294  000E5C  6E21               	movwf	(fputs@i+1)^0,c
  2295  000E5E  0E00               	movlw	0
  2296  000E60  6E20               	movwf	fputs@i^0,c
  2297  000E62  EF3E  F007         	goto	l1580
  2298  000E66                     l1576:
  2299  000E66  C01F  F012         	movff	fputs@c,fputc@c
  2300  000E6A  6A13               	clrf	(fputc@c+1)^0,c
  2301  000E6C  C01D  F014         	movff	fputs@fp,fputc@fp
  2302  000E70  C01E  F015         	movff	fputs@fp+1,fputc@fp+1
  2303  000E74  ECCC  F004         	call	_fputc	;wreg free
  2304  000E78  4A20               	infsnz	fputs@i^0,f,c
  2305  000E7A  2A21               	incf	(fputs@i+1)^0,f,c
  2306  000E7C                     l1580:
  2307  000E7C  5020               	movf	fputs@i^0,w,c
  2308  000E7E  241B               	addwf	fputs@s^0,w,c
  2309  000E80  6ED9               	movwf	fsr2l,c
  2310  000E82  5021               	movf	(fputs@i+1)^0,w,c
  2311  000E84  201C               	addwfc	(fputs@s+1)^0,w,c
  2312  000E86  6EDA               	movwf	fsr2h,c
  2313  000E88  50DF               	movf	indf2,w,c
  2314  000E8A  6E1F               	movwf	fputs@c^0,c
  2315  000E8C  501F               	movf	fputs@c^0,w,c
  2316  000E8E  A4D8               	btfss	status,2,c
  2317  000E90  EF4C  F007         	goto	u741
  2318  000E94  EF4E  F007         	goto	u740
  2319  000E98                     u741:
  2320  000E98  EF33  F007         	goto	l1576
  2321  000E9C                     u740:
  2322  000E9C  0012               	return		;funcret
  2323  000E9E                     __end_of_fputs:
  2324                           	opt callstack 0
  2325                           
  2326 ;; *************** function _fputc *****************
  2327 ;; Defined at:
  2328 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  c               2   17[COMRAM] int 
  2331 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  2332 ;;		 -> sprintf@f(6), 
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;		None
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  2   17[COMRAM] int 
  2337 ;; Registers used:
  2338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2344 ;;      Params:         4       0       0       0
  2345 ;;      Locals:         0       0       0       0
  2346 ;;      Temps:          5       0       0       0
  2347 ;;      Totals:         9       0       0       0
  2348 ;;Total ram usage:        9 bytes
  2349 ;; Hardware stack levels used:    1
  2350 ;; Hardware stack levels required when called:    4
  2351 ;; This function calls:
  2352 ;;		_putch
  2353 ;; This function is called by:
  2354 ;;		_pad
  2355 ;;		_vfpfcnvrt
  2356 ;;		_fputs
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text9
  2361  000998                     __ptext9:
  2362                           	opt callstack 0
  2363  000998                     _fputc:
  2364                           	opt callstack 22
  2365  000998  5014               	movf	fputc@fp^0,w,c
  2366  00099A  1015               	iorwf	(fputc@fp+1)^0,w,c
  2367  00099C  B4D8               	btfsc	status,2,c
  2368  00099E  EFD3  F004         	goto	u701
  2369  0009A2  EFD5  F004         	goto	u700
  2370  0009A6                     u701:
  2371  0009A6  EFDE  F004         	goto	l1564
  2372  0009AA                     u700:
  2373  0009AA  5014               	movf	fputc@fp^0,w,c
  2374  0009AC  1015               	iorwf	(fputc@fp+1)^0,w,c
  2375  0009AE  A4D8               	btfss	status,2,c
  2376  0009B0  EFDC  F004         	goto	u711
  2377  0009B4  EFDE  F004         	goto	u710
  2378  0009B8                     u711:
  2379  0009B8  EFE3  F004         	goto	l1566
  2380  0009BC                     u710:
  2381  0009BC                     l1564:
  2382  0009BC  5012               	movf	fputc@c^0,w,c
  2383  0009BE  EC24  F008         	call	_putch
  2384  0009C2  EF30  F005         	goto	l994
  2385  0009C6                     l1566:
  2386  0009C6  EE20 F004          	lfsr	2,4
  2387  0009CA  5014               	movf	fputc@fp^0,w,c
  2388  0009CC  26D9               	addwf	fsr2l,f,c
  2389  0009CE  5015               	movf	(fputc@fp+1)^0,w,c
  2390  0009D0  22DA               	addwfc	fsr2h,f,c
  2391  0009D2  50DE               	movf	postinc2,w,c
  2392  0009D4  10DE               	iorwf	postinc2,w,c
  2393  0009D6  B4D8               	btfsc	status,2,c
  2394  0009D8  EFF0  F004         	goto	u721
  2395  0009DC  EFF2  F004         	goto	u720
  2396  0009E0                     u721:
  2397  0009E0  EF0D  F005         	goto	l1570
  2398  0009E4                     u720:
  2399  0009E4  EE20 F004          	lfsr	2,4
  2400  0009E8  5014               	movf	fputc@fp^0,w,c
  2401  0009EA  26D9               	addwf	fsr2l,f,c
  2402  0009EC  5015               	movf	(fputc@fp+1)^0,w,c
  2403  0009EE  22DA               	addwfc	fsr2h,f,c
  2404  0009F0  EE10 F002          	lfsr	1,2
  2405  0009F4  5014               	movf	fputc@fp^0,w,c
  2406  0009F6  26E1               	addwf	fsr1l,f,c
  2407  0009F8  5015               	movf	(fputc@fp+1)^0,w,c
  2408  0009FA  22E2               	addwfc	fsr1h,f,c
  2409  0009FC  50DE               	movf	postinc2,w,c
  2410  0009FE  5CE6               	subwf	postinc1,w,c
  2411  000A00  50E6               	movf	postinc1,w,c
  2412  000A02  0A80               	xorlw	128
  2413  000A04  6E1A               	movwf	(??_fputc+4)^0,c
  2414  000A06  50DE               	movf	postinc2,w,c
  2415  000A08  0A80               	xorlw	128
  2416  000A0A  581A               	subwfb	(??_fputc+4)^0,w,c
  2417  000A0C  B0D8               	btfsc	status,0,c
  2418  000A0E  EF0B  F005         	goto	u731
  2419  000A12  EF0D  F005         	goto	u730
  2420  000A16                     u731:
  2421  000A16  EF30  F005         	goto	l994
  2422  000A1A                     u730:
  2423  000A1A                     l1570:
  2424  000A1A  EE20 F002          	lfsr	2,2
  2425  000A1E  5014               	movf	fputc@fp^0,w,c
  2426  000A20  26D9               	addwf	fsr2l,f,c
  2427  000A22  5015               	movf	(fputc@fp+1)^0,w,c
  2428  000A24  22DA               	addwfc	fsr2h,f,c
  2429  000A26  CFDE F016          	movff	postinc2,??_fputc
  2430  000A2A  CFDD F017          	movff	postdec2,??_fputc+1
  2431  000A2E  C014  FFD9         	movff	fputc@fp,fsr2l
  2432  000A32  C015  FFDA         	movff	fputc@fp+1,fsr2h
  2433  000A36  CFDE F018          	movff	postinc2,??_fputc+2
  2434  000A3A  CFDD F019          	movff	postdec2,??_fputc+3
  2435  000A3E  5016               	movf	??_fputc^0,w,c
  2436  000A40  2418               	addwf	(??_fputc+2)^0,w,c
  2437  000A42  6ED9               	movwf	fsr2l,c
  2438  000A44  5017               	movf	(??_fputc+1)^0,w,c
  2439  000A46  2019               	addwfc	(??_fputc+3)^0,w,c
  2440  000A48  6EDA               	movwf	fsr2h,c
  2441  000A4A  C012  FFDF         	movff	fputc@c,indf2
  2442  000A4E  EE20 F002          	lfsr	2,2
  2443  000A52  5014               	movf	fputc@fp^0,w,c
  2444  000A54  26D9               	addwf	fsr2l,f,c
  2445  000A56  5015               	movf	(fputc@fp+1)^0,w,c
  2446  000A58  22DA               	addwfc	fsr2h,f,c
  2447  000A5A  2ADE               	incf	postinc2,f,c
  2448  000A5C  0E00               	movlw	0
  2449  000A5E  22DD               	addwfc	postdec2,f,c
  2450  000A60                     l994:
  2451  000A60  0012               	return		;funcret
  2452  000A62                     __end_of_fputc:
  2453                           	opt callstack 0
  2454                           
  2455 ;; *************** function _putch *****************
  2456 ;; Defined at:
  2457 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  c               1    wreg     unsigned char 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  c               1    0[COMRAM] unsigned char 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2471 ;;      Params:         0       0       0       0
  2472 ;;      Locals:         0       0       0       0
  2473 ;;      Temps:          0       0       0       0
  2474 ;;      Totals:         0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    3
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_fputc
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text10
  2486  001048                     __ptext10:
  2487                           	opt callstack 0
  2488  001048                     _putch:
  2489                           	opt callstack 22
  2490  001048  0012               	return		;funcret
  2491  00104A                     __end_of_putch:
  2492                           	opt callstack 0
  2493                           
  2494 ;; *************** function _abs *****************
  2495 ;; Defined at:
  2496 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  a               2   35[COMRAM] int 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  2   35[COMRAM] int 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2510 ;;      Params:         2       0       0       0
  2511 ;;      Locals:         0       0       0       0
  2512 ;;      Temps:          2       0       0       0
  2513 ;;      Totals:         4       0       0       0
  2514 ;;Total ram usage:        4 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    3
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_dtoa
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text11
  2525  000E9E                     __ptext11:
  2526                           	opt callstack 0
  2527  000E9E                     _abs:
  2528                           	opt callstack 22
  2529  000E9E  BE25               	btfsc	(abs@a+1)^0,7,c
  2530  000EA0  EF5C  F007         	goto	u800
  2531  000EA4  5025               	movf	(abs@a+1)^0,w,c
  2532  000EA6  E106               	bnz	u801
  2533  000EA8  0424               	decf	abs@a^0,w,c
  2534  000EAA  B0D8               	btfsc	status,0,c
  2535  000EAC  EF5A  F007         	goto	u801
  2536  000EB0  EF5C  F007         	goto	u800
  2537  000EB4                     u801:
  2538  000EB4  EF6A  F007         	goto	l979
  2539  000EB8                     u800:
  2540  000EB8  C024  F026         	movff	abs@a,??_abs
  2541  000EBC  C025  F027         	movff	abs@a+1,??_abs+1
  2542  000EC0  1E26               	comf	??_abs^0,f,c
  2543  000EC2  1E27               	comf	(??_abs+1)^0,f,c
  2544  000EC4  4A26               	infsnz	??_abs^0,f,c
  2545  000EC6  2A27               	incf	(??_abs+1)^0,f,c
  2546  000EC8  C026  F024         	movff	??_abs,?_abs
  2547  000ECC  C027  F025         	movff	??_abs+1,?_abs+1
  2548  000ED0  EF6E  F007         	goto	l982
  2549  000ED4                     l979:
  2550  000ED4  C024  F024         	movff	abs@a,?_abs
  2551  000ED8  C025  F025         	movff	abs@a+1,?_abs+1
  2552  000EDC                     l982:
  2553  000EDC  0012               	return		;funcret
  2554  000EDE                     __end_of_abs:
  2555                           	opt callstack 0
  2556                           
  2557 ;; *************** function ___aomod *****************
  2558 ;; Defined at:
  2559 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;  dividend        8   17[COMRAM] long long 
  2562 ;;  divisor         8   25[COMRAM] long long 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;  sign            1   34[COMRAM] unsigned char 
  2565 ;;  counter         1   33[COMRAM] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  8   17[COMRAM] long long 
  2568 ;; Registers used:
  2569 ;;		wreg, status,2, status,0
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2575 ;;      Params:        16       0       0       0
  2576 ;;      Locals:         2       0       0       0
  2577 ;;      Temps:          0       0       0       0
  2578 ;;      Totals:        18       0       0       0
  2579 ;;Total ram usage:       18 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    3
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		_dtoa
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	text12
  2590  00071C                     __ptext12:
  2591                           	opt callstack 0
  2592  00071C                     ___aomod:
  2593                           	opt callstack 22
  2594  00071C  0E00               	movlw	0
  2595  00071E  6E23               	movwf	___aomod@sign^0,c
  2596  000720  BE19               	btfsc	(___aomod@dividend+7)^0,7,c
  2597  000722  EF97  F003         	goto	u880
  2598  000726  EF95  F003         	goto	u881
  2599  00072A                     u881:
  2600  00072A  EFA9  F003         	goto	l1670
  2601  00072E                     u880:
  2602  00072E  1E19               	comf	(___aomod@dividend+7)^0,f,c
  2603  000730  1E18               	comf	(___aomod@dividend+6)^0,f,c
  2604  000732  1E17               	comf	(___aomod@dividend+5)^0,f,c
  2605  000734  1E16               	comf	(___aomod@dividend+4)^0,f,c
  2606  000736  1E15               	comf	(___aomod@dividend+3)^0,f,c
  2607  000738  1E14               	comf	(___aomod@dividend+2)^0,f,c
  2608  00073A  1E13               	comf	(___aomod@dividend+1)^0,f,c
  2609  00073C  6C12               	negf	___aomod@dividend^0,c
  2610  00073E  0E00               	movlw	0
  2611  000740  2213               	addwfc	(___aomod@dividend+1)^0,f,c
  2612  000742  2214               	addwfc	(___aomod@dividend+2)^0,f,c
  2613  000744  2215               	addwfc	(___aomod@dividend+3)^0,f,c
  2614  000746  2216               	addwfc	(___aomod@dividend+4)^0,f,c
  2615  000748  2217               	addwfc	(___aomod@dividend+5)^0,f,c
  2616  00074A  2218               	addwfc	(___aomod@dividend+6)^0,f,c
  2617  00074C  2219               	addwfc	(___aomod@dividend+7)^0,f,c
  2618  00074E  0E01               	movlw	1
  2619  000750  6E23               	movwf	___aomod@sign^0,c
  2620  000752                     l1670:
  2621  000752  BE21               	btfsc	(___aomod@divisor+7)^0,7,c
  2622  000754  EFB0  F003         	goto	u890
  2623  000758  EFAE  F003         	goto	u891
  2624  00075C                     u891:
  2625  00075C  EFC0  F003         	goto	l1674
  2626  000760                     u890:
  2627  000760  1E21               	comf	(___aomod@divisor+7)^0,f,c
  2628  000762  1E20               	comf	(___aomod@divisor+6)^0,f,c
  2629  000764  1E1F               	comf	(___aomod@divisor+5)^0,f,c
  2630  000766  1E1E               	comf	(___aomod@divisor+4)^0,f,c
  2631  000768  1E1D               	comf	(___aomod@divisor+3)^0,f,c
  2632  00076A  1E1C               	comf	(___aomod@divisor+2)^0,f,c
  2633  00076C  1E1B               	comf	(___aomod@divisor+1)^0,f,c
  2634  00076E  6C1A               	negf	___aomod@divisor^0,c
  2635  000770  0E00               	movlw	0
  2636  000772  221B               	addwfc	(___aomod@divisor+1)^0,f,c
  2637  000774  221C               	addwfc	(___aomod@divisor+2)^0,f,c
  2638  000776  221D               	addwfc	(___aomod@divisor+3)^0,f,c
  2639  000778  221E               	addwfc	(___aomod@divisor+4)^0,f,c
  2640  00077A  221F               	addwfc	(___aomod@divisor+5)^0,f,c
  2641  00077C  2220               	addwfc	(___aomod@divisor+6)^0,f,c
  2642  00077E  2221               	addwfc	(___aomod@divisor+7)^0,f,c
  2643  000780                     l1674:
  2644  000780  501A               	movf	___aomod@divisor^0,w,c
  2645  000782  101B               	iorwf	(___aomod@divisor+1)^0,w,c
  2646  000784  101C               	iorwf	(___aomod@divisor+2)^0,w,c
  2647  000786  101D               	iorwf	(___aomod@divisor+3)^0,w,c
  2648  000788  101E               	iorwf	(___aomod@divisor+4)^0,w,c
  2649  00078A  101F               	iorwf	(___aomod@divisor+5)^0,w,c
  2650  00078C  1020               	iorwf	(___aomod@divisor+6)^0,w,c
  2651  00078E  1021               	iorwf	(___aomod@divisor+7)^0,w,c
  2652  000790  B4D8               	btfsc	status,2,c
  2653  000792  EFCD  F003         	goto	u901
  2654  000796  EFCF  F003         	goto	u900
  2655  00079A                     u901:
  2656  00079A  EF17  F004         	goto	l1690
  2657  00079E                     u900:
  2658  00079E  0E01               	movlw	1
  2659  0007A0  6E22               	movwf	___aomod@counter^0,c
  2660  0007A2  EFDD  F003         	goto	l1680
  2661  0007A6                     l1678:
  2662  0007A6  90D8               	bcf	status,0,c
  2663  0007A8  361A               	rlcf	___aomod@divisor^0,f,c
  2664  0007AA  361B               	rlcf	(___aomod@divisor+1)^0,f,c
  2665  0007AC  361C               	rlcf	(___aomod@divisor+2)^0,f,c
  2666  0007AE  361D               	rlcf	(___aomod@divisor+3)^0,f,c
  2667  0007B0  361E               	rlcf	(___aomod@divisor+4)^0,f,c
  2668  0007B2  361F               	rlcf	(___aomod@divisor+5)^0,f,c
  2669  0007B4  3620               	rlcf	(___aomod@divisor+6)^0,f,c
  2670  0007B6  3621               	rlcf	(___aomod@divisor+7)^0,f,c
  2671  0007B8  2A22               	incf	___aomod@counter^0,f,c
  2672  0007BA                     l1680:
  2673  0007BA  AE21               	btfss	(___aomod@divisor+7)^0,7,c
  2674  0007BC  EFE2  F003         	goto	u911
  2675  0007C0  EFE4  F003         	goto	u910
  2676  0007C4                     u911:
  2677  0007C4  EFD3  F003         	goto	l1678
  2678  0007C8                     u910:
  2679  0007C8                     l1682:
  2680  0007C8  501A               	movf	___aomod@divisor^0,w,c
  2681  0007CA  5C12               	subwf	___aomod@dividend^0,w,c
  2682  0007CC  501B               	movf	(___aomod@divisor+1)^0,w,c
  2683  0007CE  5813               	subwfb	(___aomod@dividend+1)^0,w,c
  2684  0007D0  501C               	movf	(___aomod@divisor+2)^0,w,c
  2685  0007D2  5814               	subwfb	(___aomod@dividend+2)^0,w,c
  2686  0007D4  501D               	movf	(___aomod@divisor+3)^0,w,c
  2687  0007D6  5815               	subwfb	(___aomod@dividend+3)^0,w,c
  2688  0007D8  501E               	movf	(___aomod@divisor+4)^0,w,c
  2689  0007DA  5816               	subwfb	(___aomod@dividend+4)^0,w,c
  2690  0007DC  501F               	movf	(___aomod@divisor+5)^0,w,c
  2691  0007DE  5817               	subwfb	(___aomod@dividend+5)^0,w,c
  2692  0007E0  5020               	movf	(___aomod@divisor+6)^0,w,c
  2693  0007E2  5818               	subwfb	(___aomod@dividend+6)^0,w,c
  2694  0007E4  5021               	movf	(___aomod@divisor+7)^0,w,c
  2695  0007E6  5819               	subwfb	(___aomod@dividend+7)^0,w,c
  2696  0007E8  A0D8               	btfss	status,0,c
  2697  0007EA  EFF9  F003         	goto	u921
  2698  0007EE  EFFB  F003         	goto	u920
  2699  0007F2                     u921:
  2700  0007F2  EF0B  F004         	goto	l1686
  2701  0007F6                     u920:
  2702  0007F6  501A               	movf	___aomod@divisor^0,w,c
  2703  0007F8  5E12               	subwf	___aomod@dividend^0,f,c
  2704  0007FA  501B               	movf	(___aomod@divisor+1)^0,w,c
  2705  0007FC  5A13               	subwfb	(___aomod@dividend+1)^0,f,c
  2706  0007FE  501C               	movf	(___aomod@divisor+2)^0,w,c
  2707  000800  5A14               	subwfb	(___aomod@dividend+2)^0,f,c
  2708  000802  501D               	movf	(___aomod@divisor+3)^0,w,c
  2709  000804  5A15               	subwfb	(___aomod@dividend+3)^0,f,c
  2710  000806  501E               	movf	(___aomod@divisor+4)^0,w,c
  2711  000808  5A16               	subwfb	(___aomod@dividend+4)^0,f,c
  2712  00080A  501F               	movf	(___aomod@divisor+5)^0,w,c
  2713  00080C  5A17               	subwfb	(___aomod@dividend+5)^0,f,c
  2714  00080E  5020               	movf	(___aomod@divisor+6)^0,w,c
  2715  000810  5A18               	subwfb	(___aomod@dividend+6)^0,f,c
  2716  000812  5021               	movf	(___aomod@divisor+7)^0,w,c
  2717  000814  5A19               	subwfb	(___aomod@dividend+7)^0,f,c
  2718  000816                     l1686:
  2719  000816  90D8               	bcf	status,0,c
  2720  000818  3221               	rrcf	(___aomod@divisor+7)^0,f,c
  2721  00081A  3220               	rrcf	(___aomod@divisor+6)^0,f,c
  2722  00081C  321F               	rrcf	(___aomod@divisor+5)^0,f,c
  2723  00081E  321E               	rrcf	(___aomod@divisor+4)^0,f,c
  2724  000820  321D               	rrcf	(___aomod@divisor+3)^0,f,c
  2725  000822  321C               	rrcf	(___aomod@divisor+2)^0,f,c
  2726  000824  321B               	rrcf	(___aomod@divisor+1)^0,f,c
  2727  000826  321A               	rrcf	___aomod@divisor^0,f,c
  2728  000828  2E22               	decfsz	___aomod@counter^0,f,c
  2729  00082A  EFE4  F003         	goto	l1682
  2730  00082E                     l1690:
  2731  00082E  5023               	movf	___aomod@sign^0,w,c
  2732  000830  B4D8               	btfsc	status,2,c
  2733  000832  EF1D  F004         	goto	u931
  2734  000836  EF1F  F004         	goto	u930
  2735  00083A                     u931:
  2736  00083A  EF2F  F004         	goto	l1694
  2737  00083E                     u930:
  2738  00083E  1E19               	comf	(___aomod@dividend+7)^0,f,c
  2739  000840  1E18               	comf	(___aomod@dividend+6)^0,f,c
  2740  000842  1E17               	comf	(___aomod@dividend+5)^0,f,c
  2741  000844  1E16               	comf	(___aomod@dividend+4)^0,f,c
  2742  000846  1E15               	comf	(___aomod@dividend+3)^0,f,c
  2743  000848  1E14               	comf	(___aomod@dividend+2)^0,f,c
  2744  00084A  1E13               	comf	(___aomod@dividend+1)^0,f,c
  2745  00084C  6C12               	negf	___aomod@dividend^0,c
  2746  00084E  0E00               	movlw	0
  2747  000850  2213               	addwfc	(___aomod@dividend+1)^0,f,c
  2748  000852  2214               	addwfc	(___aomod@dividend+2)^0,f,c
  2749  000854  2215               	addwfc	(___aomod@dividend+3)^0,f,c
  2750  000856  2216               	addwfc	(___aomod@dividend+4)^0,f,c
  2751  000858  2217               	addwfc	(___aomod@dividend+5)^0,f,c
  2752  00085A  2218               	addwfc	(___aomod@dividend+6)^0,f,c
  2753  00085C  2219               	addwfc	(___aomod@dividend+7)^0,f,c
  2754  00085E                     l1694:
  2755  00085E  C012  F012         	movff	___aomod@dividend,?___aomod
  2756  000862  C013  F013         	movff	___aomod@dividend+1,?___aomod+1
  2757  000866  C014  F014         	movff	___aomod@dividend+2,?___aomod+2
  2758  00086A  C015  F015         	movff	___aomod@dividend+3,?___aomod+3
  2759  00086E  C016  F016         	movff	___aomod@dividend+4,?___aomod+4
  2760  000872  C017  F017         	movff	___aomod@dividend+5,?___aomod+5
  2761  000876  C018  F018         	movff	___aomod@dividend+6,?___aomod+6
  2762  00087A  C019  F019         	movff	___aomod@dividend+7,?___aomod+7
  2763  00087E  0012               	return		;funcret
  2764  000880                     __end_of___aomod:
  2765                           	opt callstack 0
  2766                           
  2767 ;; *************** function ___aodiv *****************
  2768 ;; Defined at:
  2769 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  dividend        8   17[COMRAM] long long 
  2772 ;;  divisor         8   25[COMRAM] long long 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  quotient        8   35[COMRAM] long long 
  2775 ;;  sign            1   34[COMRAM] unsigned char 
  2776 ;;  counter         1   33[COMRAM] unsigned char 
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  8   17[COMRAM] long long 
  2779 ;; Registers used:
  2780 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2786 ;;      Params:        16       0       0       0
  2787 ;;      Locals:        10       0       0       0
  2788 ;;      Temps:          0       0       0       0
  2789 ;;      Totals:        26       0       0       0
  2790 ;;Total ram usage:       26 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    3
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_dtoa
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text13
  2801  000594                     __ptext13:
  2802                           	opt callstack 0
  2803  000594                     ___aodiv:
  2804                           	opt callstack 22
  2805  000594  0E00               	movlw	0
  2806  000596  6E23               	movwf	___aodiv@sign^0,c
  2807  000598  BE21               	btfsc	(___aodiv@divisor+7)^0,7,c
  2808  00059A  EFD3  F002         	goto	u810
  2809  00059E  EFD1  F002         	goto	u811
  2810  0005A2                     u811:
  2811  0005A2  EFE5  F002         	goto	l1626
  2812  0005A6                     u810:
  2813  0005A6  1E21               	comf	(___aodiv@divisor+7)^0,f,c
  2814  0005A8  1E20               	comf	(___aodiv@divisor+6)^0,f,c
  2815  0005AA  1E1F               	comf	(___aodiv@divisor+5)^0,f,c
  2816  0005AC  1E1E               	comf	(___aodiv@divisor+4)^0,f,c
  2817  0005AE  1E1D               	comf	(___aodiv@divisor+3)^0,f,c
  2818  0005B0  1E1C               	comf	(___aodiv@divisor+2)^0,f,c
  2819  0005B2  1E1B               	comf	(___aodiv@divisor+1)^0,f,c
  2820  0005B4  6C1A               	negf	___aodiv@divisor^0,c
  2821  0005B6  0E00               	movlw	0
  2822  0005B8  221B               	addwfc	(___aodiv@divisor+1)^0,f,c
  2823  0005BA  221C               	addwfc	(___aodiv@divisor+2)^0,f,c
  2824  0005BC  221D               	addwfc	(___aodiv@divisor+3)^0,f,c
  2825  0005BE  221E               	addwfc	(___aodiv@divisor+4)^0,f,c
  2826  0005C0  221F               	addwfc	(___aodiv@divisor+5)^0,f,c
  2827  0005C2  2220               	addwfc	(___aodiv@divisor+6)^0,f,c
  2828  0005C4  2221               	addwfc	(___aodiv@divisor+7)^0,f,c
  2829  0005C6  0E01               	movlw	1
  2830  0005C8  6E23               	movwf	___aodiv@sign^0,c
  2831  0005CA                     l1626:
  2832  0005CA  BE19               	btfsc	(___aodiv@dividend+7)^0,7,c
  2833  0005CC  EFEC  F002         	goto	u820
  2834  0005D0  EFEA  F002         	goto	u821
  2835  0005D4                     u821:
  2836  0005D4  EFFE  F002         	goto	l1632
  2837  0005D8                     u820:
  2838  0005D8  1E19               	comf	(___aodiv@dividend+7)^0,f,c
  2839  0005DA  1E18               	comf	(___aodiv@dividend+6)^0,f,c
  2840  0005DC  1E17               	comf	(___aodiv@dividend+5)^0,f,c
  2841  0005DE  1E16               	comf	(___aodiv@dividend+4)^0,f,c
  2842  0005E0  1E15               	comf	(___aodiv@dividend+3)^0,f,c
  2843  0005E2  1E14               	comf	(___aodiv@dividend+2)^0,f,c
  2844  0005E4  1E13               	comf	(___aodiv@dividend+1)^0,f,c
  2845  0005E6  6C12               	negf	___aodiv@dividend^0,c
  2846  0005E8  0E00               	movlw	0
  2847  0005EA  2213               	addwfc	(___aodiv@dividend+1)^0,f,c
  2848  0005EC  2214               	addwfc	(___aodiv@dividend+2)^0,f,c
  2849  0005EE  2215               	addwfc	(___aodiv@dividend+3)^0,f,c
  2850  0005F0  2216               	addwfc	(___aodiv@dividend+4)^0,f,c
  2851  0005F2  2217               	addwfc	(___aodiv@dividend+5)^0,f,c
  2852  0005F4  2218               	addwfc	(___aodiv@dividend+6)^0,f,c
  2853  0005F6  2219               	addwfc	(___aodiv@dividend+7)^0,f,c
  2854  0005F8  0E01               	movlw	1
  2855  0005FA  1A23               	xorwf	___aodiv@sign^0,f,c
  2856  0005FC                     l1632:
  2857  0005FC  EE20  F024         	lfsr	2,___aodiv@quotient
  2858  000600  0E07               	movlw	7
  2859  000602                     u831:
  2860  000602  6ADE               	clrf	postinc2,c
  2861  000604  06E8               	decf	wreg,f,c
  2862  000606  E2FD               	bc	u831
  2863  000608  501A               	movf	___aodiv@divisor^0,w,c
  2864  00060A  101B               	iorwf	(___aodiv@divisor+1)^0,w,c
  2865  00060C  101C               	iorwf	(___aodiv@divisor+2)^0,w,c
  2866  00060E  101D               	iorwf	(___aodiv@divisor+3)^0,w,c
  2867  000610  101E               	iorwf	(___aodiv@divisor+4)^0,w,c
  2868  000612  101F               	iorwf	(___aodiv@divisor+5)^0,w,c
  2869  000614  1020               	iorwf	(___aodiv@divisor+6)^0,w,c
  2870  000616  1021               	iorwf	(___aodiv@divisor+7)^0,w,c
  2871  000618  B4D8               	btfsc	status,2,c
  2872  00061A  EF11  F003         	goto	u841
  2873  00061E  EF13  F003         	goto	u840
  2874  000622                     u841:
  2875  000622  EF65  F003         	goto	l1654
  2876  000626                     u840:
  2877  000626  0E01               	movlw	1
  2878  000628  6E22               	movwf	___aodiv@counter^0,c
  2879  00062A  EF21  F003         	goto	l1640
  2880  00062E                     l1638:
  2881  00062E  90D8               	bcf	status,0,c
  2882  000630  361A               	rlcf	___aodiv@divisor^0,f,c
  2883  000632  361B               	rlcf	(___aodiv@divisor+1)^0,f,c
  2884  000634  361C               	rlcf	(___aodiv@divisor+2)^0,f,c
  2885  000636  361D               	rlcf	(___aodiv@divisor+3)^0,f,c
  2886  000638  361E               	rlcf	(___aodiv@divisor+4)^0,f,c
  2887  00063A  361F               	rlcf	(___aodiv@divisor+5)^0,f,c
  2888  00063C  3620               	rlcf	(___aodiv@divisor+6)^0,f,c
  2889  00063E  3621               	rlcf	(___aodiv@divisor+7)^0,f,c
  2890  000640  2A22               	incf	___aodiv@counter^0,f,c
  2891  000642                     l1640:
  2892  000642  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
  2893  000644  EF26  F003         	goto	u851
  2894  000648  EF28  F003         	goto	u850
  2895  00064C                     u851:
  2896  00064C  EF17  F003         	goto	l1638
  2897  000650                     u850:
  2898  000650                     l1642:
  2899  000650  90D8               	bcf	status,0,c
  2900  000652  3624               	rlcf	___aodiv@quotient^0,f,c
  2901  000654  3625               	rlcf	(___aodiv@quotient+1)^0,f,c
  2902  000656  3626               	rlcf	(___aodiv@quotient+2)^0,f,c
  2903  000658  3627               	rlcf	(___aodiv@quotient+3)^0,f,c
  2904  00065A  3628               	rlcf	(___aodiv@quotient+4)^0,f,c
  2905  00065C  3629               	rlcf	(___aodiv@quotient+5)^0,f,c
  2906  00065E  362A               	rlcf	(___aodiv@quotient+6)^0,f,c
  2907  000660  362B               	rlcf	(___aodiv@quotient+7)^0,f,c
  2908  000662  501A               	movf	___aodiv@divisor^0,w,c
  2909  000664  5C12               	subwf	___aodiv@dividend^0,w,c
  2910  000666  501B               	movf	(___aodiv@divisor+1)^0,w,c
  2911  000668  5813               	subwfb	(___aodiv@dividend+1)^0,w,c
  2912  00066A  501C               	movf	(___aodiv@divisor+2)^0,w,c
  2913  00066C  5814               	subwfb	(___aodiv@dividend+2)^0,w,c
  2914  00066E  501D               	movf	(___aodiv@divisor+3)^0,w,c
  2915  000670  5815               	subwfb	(___aodiv@dividend+3)^0,w,c
  2916  000672  501E               	movf	(___aodiv@divisor+4)^0,w,c
  2917  000674  5816               	subwfb	(___aodiv@dividend+4)^0,w,c
  2918  000676  501F               	movf	(___aodiv@divisor+5)^0,w,c
  2919  000678  5817               	subwfb	(___aodiv@dividend+5)^0,w,c
  2920  00067A  5020               	movf	(___aodiv@divisor+6)^0,w,c
  2921  00067C  5818               	subwfb	(___aodiv@dividend+6)^0,w,c
  2922  00067E  5021               	movf	(___aodiv@divisor+7)^0,w,c
  2923  000680  5819               	subwfb	(___aodiv@dividend+7)^0,w,c
  2924  000682  A0D8               	btfss	status,0,c
  2925  000684  EF46  F003         	goto	u861
  2926  000688  EF48  F003         	goto	u860
  2927  00068C                     u861:
  2928  00068C  EF59  F003         	goto	l1650
  2929  000690                     u860:
  2930  000690  501A               	movf	___aodiv@divisor^0,w,c
  2931  000692  5E12               	subwf	___aodiv@dividend^0,f,c
  2932  000694  501B               	movf	(___aodiv@divisor+1)^0,w,c
  2933  000696  5A13               	subwfb	(___aodiv@dividend+1)^0,f,c
  2934  000698  501C               	movf	(___aodiv@divisor+2)^0,w,c
  2935  00069A  5A14               	subwfb	(___aodiv@dividend+2)^0,f,c
  2936  00069C  501D               	movf	(___aodiv@divisor+3)^0,w,c
  2937  00069E  5A15               	subwfb	(___aodiv@dividend+3)^0,f,c
  2938  0006A0  501E               	movf	(___aodiv@divisor+4)^0,w,c
  2939  0006A2  5A16               	subwfb	(___aodiv@dividend+4)^0,f,c
  2940  0006A4  501F               	movf	(___aodiv@divisor+5)^0,w,c
  2941  0006A6  5A17               	subwfb	(___aodiv@dividend+5)^0,f,c
  2942  0006A8  5020               	movf	(___aodiv@divisor+6)^0,w,c
  2943  0006AA  5A18               	subwfb	(___aodiv@dividend+6)^0,f,c
  2944  0006AC  5021               	movf	(___aodiv@divisor+7)^0,w,c
  2945  0006AE  5A19               	subwfb	(___aodiv@dividend+7)^0,f,c
  2946  0006B0  8024               	bsf	___aodiv@quotient^0,0,c
  2947  0006B2                     l1650:
  2948  0006B2  90D8               	bcf	status,0,c
  2949  0006B4  3221               	rrcf	(___aodiv@divisor+7)^0,f,c
  2950  0006B6  3220               	rrcf	(___aodiv@divisor+6)^0,f,c
  2951  0006B8  321F               	rrcf	(___aodiv@divisor+5)^0,f,c
  2952  0006BA  321E               	rrcf	(___aodiv@divisor+4)^0,f,c
  2953  0006BC  321D               	rrcf	(___aodiv@divisor+3)^0,f,c
  2954  0006BE  321C               	rrcf	(___aodiv@divisor+2)^0,f,c
  2955  0006C0  321B               	rrcf	(___aodiv@divisor+1)^0,f,c
  2956  0006C2  321A               	rrcf	___aodiv@divisor^0,f,c
  2957  0006C4  2E22               	decfsz	___aodiv@counter^0,f,c
  2958  0006C6  EF28  F003         	goto	l1642
  2959  0006CA                     l1654:
  2960  0006CA  5023               	movf	___aodiv@sign^0,w,c
  2961  0006CC  B4D8               	btfsc	status,2,c
  2962  0006CE  EF6B  F003         	goto	u871
  2963  0006D2  EF6D  F003         	goto	u870
  2964  0006D6                     u871:
  2965  0006D6  EF7D  F003         	goto	l1658
  2966  0006DA                     u870:
  2967  0006DA  1E2B               	comf	(___aodiv@quotient+7)^0,f,c
  2968  0006DC  1E2A               	comf	(___aodiv@quotient+6)^0,f,c
  2969  0006DE  1E29               	comf	(___aodiv@quotient+5)^0,f,c
  2970  0006E0  1E28               	comf	(___aodiv@quotient+4)^0,f,c
  2971  0006E2  1E27               	comf	(___aodiv@quotient+3)^0,f,c
  2972  0006E4  1E26               	comf	(___aodiv@quotient+2)^0,f,c
  2973  0006E6  1E25               	comf	(___aodiv@quotient+1)^0,f,c
  2974  0006E8  6C24               	negf	___aodiv@quotient^0,c
  2975  0006EA  0E00               	movlw	0
  2976  0006EC  2225               	addwfc	(___aodiv@quotient+1)^0,f,c
  2977  0006EE  2226               	addwfc	(___aodiv@quotient+2)^0,f,c
  2978  0006F0  2227               	addwfc	(___aodiv@quotient+3)^0,f,c
  2979  0006F2  2228               	addwfc	(___aodiv@quotient+4)^0,f,c
  2980  0006F4  2229               	addwfc	(___aodiv@quotient+5)^0,f,c
  2981  0006F6  222A               	addwfc	(___aodiv@quotient+6)^0,f,c
  2982  0006F8  222B               	addwfc	(___aodiv@quotient+7)^0,f,c
  2983  0006FA                     l1658:
  2984  0006FA  C024  F012         	movff	___aodiv@quotient,?___aodiv
  2985  0006FE  C025  F013         	movff	___aodiv@quotient+1,?___aodiv+1
  2986  000702  C026  F014         	movff	___aodiv@quotient+2,?___aodiv+2
  2987  000706  C027  F015         	movff	___aodiv@quotient+3,?___aodiv+3
  2988  00070A  C028  F016         	movff	___aodiv@quotient+4,?___aodiv+4
  2989  00070E  C029  F017         	movff	___aodiv@quotient+5,?___aodiv+5
  2990  000712  C02A  F018         	movff	___aodiv@quotient+6,?___aodiv+6
  2991  000716  C02B  F019         	movff	___aodiv@quotient+7,?___aodiv+7
  2992  00071A  0012               	return		;funcret
  2993  00071C                     __end_of___aodiv:
  2994                           	opt callstack 0
  2995                           
  2996 ;; *************** function _LCDPutStr *****************
  2997 ;; Defined at:
  2998 ;;		line 147 in file "lcd.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  str             2   22[COMRAM] PTR const unsigned char 
  3001 ;;		 -> display@str1(16), STR_1(5), 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  i               1   26[COMRAM] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3013 ;;      Params:         2       0       0       0
  3014 ;;      Locals:         1       0       0       0
  3015 ;;      Temps:          2       0       0       0
  3016 ;;      Totals:         5       0       0       0
  3017 ;;Total ram usage:        5 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    5
  3020 ;; This function calls:
  3021 ;;		_LCDPutChar
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;;		_display
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text14
  3029  000BB2                     __ptext14:
  3030                           	opt callstack 0
  3031  000BB2                     _LCDPutStr:
  3032                           	opt callstack 24
  3033  000BB2                     
  3034                           ;lcd.c: 148:     uint8_t i = 0;
  3035  000BB2  0E00               	movlw	0
  3036  000BB4  6E1B               	movwf	LCDPutStr@i^0,c
  3037                           
  3038                           ;lcd.c: 151:     while (str[i]) {
  3039  000BB6  EFF6  F005         	goto	l1844
  3040  000BBA                     l1840:
  3041                           
  3042                           ;lcd.c: 153:         LCDPutChar(str[i++]);
  3043  000BBA  501B               	movf	LCDPutStr@i^0,w,c
  3044  000BBC  2417               	addwf	LCDPutStr@str^0,w,c
  3045  000BBE  6E19               	movwf	??_LCDPutStr^0,c
  3046  000BC0  0E00               	movlw	0
  3047  000BC2  2018               	addwfc	(LCDPutStr@str+1)^0,w,c
  3048  000BC4  6E1A               	movwf	(??_LCDPutStr+1)^0,c
  3049  000BC6  C019  FFF6         	movff	??_LCDPutStr,tblptrl
  3050  000BCA  C01A  FFF7         	movff	??_LCDPutStr+1,tblptrh
  3051  000BCE  6AF8               	clrf	tblptru,c
  3052  000BD0  0E02               	movlw	(high __ramtop+-1)
  3053  000BD2  64F7               	cpfsgt	tblptrh,c
  3054  000BD4  D003               	bra	u1157
  3055  000BD6  0008               	tblrd		*
  3056  000BD8  50F5               	movf	tablat,w,c
  3057  000BDA  D005               	bra	u1150
  3058  000BDC                     u1157:
  3059  000BDC  CFF6 FFE1          	movff	tblptrl,fsr1l
  3060  000BE0  CFF7 FFE2          	movff	tblptrh,fsr1h
  3061  000BE4  50E7               	movf	indf1,w,c
  3062  000BE6                     u1150:
  3063  000BE6  EC06  F008         	call	_LCDPutChar
  3064  000BEA  2A1B               	incf	LCDPutStr@i^0,f,c
  3065  000BEC                     l1844:
  3066                           
  3067                           ;lcd.c: 151:     while (str[i]) {
  3068  000BEC  501B               	movf	LCDPutStr@i^0,w,c
  3069  000BEE  2417               	addwf	LCDPutStr@str^0,w,c
  3070  000BF0  6E19               	movwf	??_LCDPutStr^0,c
  3071  000BF2  0E00               	movlw	0
  3072  000BF4  2018               	addwfc	(LCDPutStr@str+1)^0,w,c
  3073  000BF6  6E1A               	movwf	(??_LCDPutStr+1)^0,c
  3074  000BF8  C019  FFF6         	movff	??_LCDPutStr,tblptrl
  3075  000BFC  C01A  FFF7         	movff	??_LCDPutStr+1,tblptrh
  3076  000C00  6AF8               	clrf	tblptru,c
  3077  000C02  0E02               	movlw	(high __ramtop+-1)
  3078  000C04  64F7               	cpfsgt	tblptrh,c
  3079  000C06  D003               	bra	u1167
  3080  000C08  0008               	tblrd		*
  3081  000C0A  50F5               	movf	tablat,w,c
  3082  000C0C  D005               	bra	u1160
  3083  000C0E                     u1167:
  3084  000C0E  CFF6 FFE1          	movff	tblptrl,fsr1l
  3085  000C12  CFF7 FFE2          	movff	tblptrh,fsr1h
  3086  000C16  50E7               	movf	indf1,w,c
  3087  000C18                     u1160:
  3088  000C18  0900               	iorlw	0
  3089  000C1A  A4D8               	btfss	status,2,c
  3090  000C1C  EF12  F006         	goto	u1171
  3091  000C20  EF14  F006         	goto	u1170
  3092  000C24                     u1171:
  3093  000C24  EFDD  F005         	goto	l1840
  3094  000C28                     u1170:
  3095  000C28  0012               	return		;funcret
  3096  000C2A                     __end_of_LCDPutStr:
  3097                           	opt callstack 0
  3098                           
  3099 ;; *************** function _LCDPutChar *****************
  3100 ;; Defined at:
  3101 ;;		line 119 in file "lcd.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  ch              1    wreg     unsigned char 
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  ch              1   21[COMRAM] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3115 ;;      Params:         0       0       0       0
  3116 ;;      Locals:         1       0       0       0
  3117 ;;      Temps:          1       0       0       0
  3118 ;;      Totals:         2       0       0       0
  3119 ;;Total ram usage:        2 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    4
  3122 ;; This function calls:
  3123 ;;		_LCDWriteNibble
  3124 ;; This function is called by:
  3125 ;;		_display
  3126 ;;		_LCDPutStr
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text15
  3131  00100C                     __ptext15:
  3132                           	opt callstack 0
  3133  00100C                     _LCDPutChar:
  3134                           	opt callstack 24
  3135                           
  3136                           ;incstack = 0
  3137                           ;LCDPutChar@ch stored from wreg
  3138  00100C  6E16               	movwf	LCDPutChar@ch^0,c
  3139  00100E                     
  3140                           ;lcd.c: 120:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3141  00100E  0E11               	movlw	17
  3142  001010  6E15               	movwf	??_LCDPutChar^0,c
  3143  001012  0E3A               	movlw	58
  3144  001014                     u1577:
  3145  001014  2EE8               	decfsz	wreg,f,c
  3146  001016  D7FE               	bra	u1577
  3147  001018  2E15               	decfsz	??_LCDPutChar^0,f,c
  3148  00101A  D7FC               	bra	u1577
  3149  00101C  F000 F000          	nop2	
  3150  001020                     
  3151                           ;lcd.c: 123:     LCDWriteNibble(ch, 1);
  3152  001020  0E01               	movlw	1
  3153  001022  6E12               	movwf	LCDWriteNibble@rs^0,c
  3154  001024  5016               	movf	LCDPutChar@ch^0,w,c
  3155  001026  EC92  F005         	call	_LCDWriteNibble
  3156  00102A                     
  3157                           ;lcd.c: 126:     ch = (ch << 4);
  3158  00102A  3816               	swapf	LCDPutChar@ch^0,w,c
  3159  00102C  0BF0               	andlw	240
  3160  00102E  6E16               	movwf	LCDPutChar@ch^0,c
  3161  001030                     
  3162                           ;lcd.c: 129:     LCDWriteNibble(ch, 1);
  3163  001030  0E01               	movlw	1
  3164  001032  6E12               	movwf	LCDWriteNibble@rs^0,c
  3165  001034  5016               	movf	LCDPutChar@ch^0,w,c
  3166  001036  EC92  F005         	call	_LCDWriteNibble
  3167  00103A  0012               	return		;funcret
  3168  00103C                     __end_of_LCDPutChar:
  3169                           	opt callstack 0
  3170                           
  3171 ;; *************** function _LCD_Initialize *****************
  3172 ;; Defined at:
  3173 ;;		line 48 in file "lcd.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;		None
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      void 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, status,0, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3187 ;;      Params:         0       0       0       0
  3188 ;;      Locals:         0       0       0       0
  3189 ;;      Temps:          1       0       0       0
  3190 ;;      Totals:         1       0       0       0
  3191 ;;Total ram usage:        1 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    5
  3194 ;; This function calls:
  3195 ;;		_LCDPutCmd
  3196 ;; This function is called by:
  3197 ;;		_main
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           	psect	text16
  3202  000E10                     __ptext16:
  3203                           	opt callstack 0
  3204  000E10                     _LCD_Initialize:
  3205                           	opt callstack 25
  3206  000E10                     
  3207                           ;lcd.c: 51:     TRISCbits.RC0 = 0;
  3208  000E10  9094               	bcf	148,0,c	;volatile
  3209                           
  3210                           ;lcd.c: 52:     TRISCbits.RC1 = 0;
  3211  000E12  9294               	bcf	148,1,c	;volatile
  3212                           
  3213                           ;lcd.c: 53:     TRISCbits.RC2 = 0;
  3214  000E14  9494               	bcf	148,2,c	;volatile
  3215                           
  3216                           ;lcd.c: 54:     TRISCbits.RC3 = 0;
  3217  000E16  9694               	bcf	148,3,c	;volatile
  3218                           
  3219                           ;lcd.c: 55:     TRISDbits.RD0 = 0;
  3220  000E18  9095               	bcf	149,0,c	;volatile
  3221                           
  3222                           ;lcd.c: 56:     TRISDbits.RD1 = 0;
  3223  000E1A  9295               	bcf	149,1,c	;volatile
  3224                           
  3225                           ;lcd.c: 59:     PORTCbits.RC0 = 0;
  3226  000E1C  9082               	bcf	130,0,c	;volatile
  3227                           
  3228                           ;lcd.c: 60:     PORTCbits.RC1 = 0;
  3229  000E1E  9282               	bcf	130,1,c	;volatile
  3230                           
  3231                           ;lcd.c: 61:     PORTCbits.RC2 = 0;
  3232  000E20  9482               	bcf	130,2,c	;volatile
  3233                           
  3234                           ;lcd.c: 62:     PORTCbits.RC3 = 0;
  3235  000E22  9682               	bcf	130,3,c	;volatile
  3236                           
  3237                           ;lcd.c: 63:     PORTDbits.RD0 = 0;
  3238  000E24  9083               	bcf	131,0,c	;volatile
  3239                           
  3240                           ;lcd.c: 64:     PORTDbits.RD1 = 0;
  3241  000E26  9283               	bcf	131,1,c	;volatile
  3242  000E28                     
  3243                           ;lcd.c: 71:     _delay((unsigned long)((20)*(10000000/4000.0)));
  3244  000E28  0E41               	movlw	65
  3245  000E2A  6E17               	movwf	??_LCD_Initialize^0,c
  3246  000E2C  0EEE               	movlw	238
  3247  000E2E                     u1587:
  3248  000E2E  2EE8               	decfsz	wreg,f,c
  3249  000E30  D7FE               	bra	u1587
  3250  000E32  2E17               	decfsz	??_LCD_Initialize^0,f,c
  3251  000E34  D7FC               	bra	u1587
  3252  000E36  F000 F000          	nop2	
  3253  000E3A                     
  3254                           ;lcd.c: 74:     LCDPutCmd(0x32);
  3255  000E3A  0E32               	movlw	50
  3256  000E3C  ECAE  F007         	call	_LCDPutCmd
  3257  000E40                     
  3258                           ;lcd.c: 77:     LCDPutCmd(0x28);
  3259  000E40  0E28               	movlw	40
  3260  000E42  ECAE  F007         	call	_LCDPutCmd
  3261  000E46                     
  3262                           ;lcd.c: 80:     LCDPutCmd(0x0C);
  3263  000E46  0E0C               	movlw	12
  3264  000E48  ECAE  F007         	call	_LCDPutCmd
  3265  000E4C                     
  3266                           ;lcd.c: 82:     LCDPutCmd(0x01);
  3267  000E4C  0E01               	movlw	1
  3268  000E4E  ECAE  F007         	call	_LCDPutCmd
  3269  000E52                     
  3270                           ;lcd.c: 85:     LCDPutCmd(0x06);
  3271  000E52  0E06               	movlw	6
  3272  000E54  ECAE  F007         	call	_LCDPutCmd
  3273  000E58  0012               	return		;funcret
  3274  000E5A                     __end_of_LCD_Initialize:
  3275                           	opt callstack 0
  3276                           
  3277 ;; *************** function _LCDPutCmd *****************
  3278 ;; Defined at:
  3279 ;;		line 132 in file "lcd.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  ch              1    wreg     unsigned char 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;  ch              1   21[COMRAM] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3293 ;;      Params:         0       0       0       0
  3294 ;;      Locals:         1       0       0       0
  3295 ;;      Temps:          1       0       0       0
  3296 ;;      Totals:         2       0       0       0
  3297 ;;Total ram usage:        2 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    4
  3300 ;; This function calls:
  3301 ;;		_LCDWriteNibble
  3302 ;; This function is called by:
  3303 ;;		_main
  3304 ;;		_display
  3305 ;;		_LCD_Initialize
  3306 ;;		_LCDGoto
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text17
  3311  000F5C                     __ptext17:
  3312                           	opt callstack 0
  3313  000F5C                     _LCDPutCmd:
  3314                           	opt callstack 25
  3315                           
  3316                           ;incstack = 0
  3317                           ;LCDPutCmd@ch stored from wreg
  3318  000F5C  6E16               	movwf	LCDPutCmd@ch^0,c
  3319  000F5E                     
  3320                           ;lcd.c: 133:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3321  000F5E  0E11               	movlw	17
  3322  000F60  6E15               	movwf	??_LCDPutCmd^0,c
  3323  000F62  0E3A               	movlw	58
  3324  000F64                     u1597:
  3325  000F64  2EE8               	decfsz	wreg,f,c
  3326  000F66  D7FE               	bra	u1597
  3327  000F68  2E15               	decfsz	??_LCDPutCmd^0,f,c
  3328  000F6A  D7FC               	bra	u1597
  3329  000F6C  F000 F000          	nop2	
  3330  000F70                     
  3331                           ;lcd.c: 136:     LCDWriteNibble(ch, 0);
  3332  000F70  0E00               	movlw	0
  3333  000F72  6E12               	movwf	LCDWriteNibble@rs^0,c
  3334  000F74  5016               	movf	LCDPutCmd@ch^0,w,c
  3335  000F76  EC92  F005         	call	_LCDWriteNibble
  3336  000F7A                     
  3337                           ;lcd.c: 139:     ch = (ch << 4);
  3338  000F7A  3816               	swapf	LCDPutCmd@ch^0,w,c
  3339  000F7C  0BF0               	andlw	240
  3340  000F7E  6E16               	movwf	LCDPutCmd@ch^0,c
  3341  000F80                     
  3342                           ;lcd.c: 141:     _delay((unsigned long)((1)*(10000000/4000.0)));
  3343  000F80  0E04               	movlw	4
  3344  000F82  6E15               	movwf	??_LCDPutCmd^0,c
  3345  000F84  0E3E               	movlw	62
  3346  000F86                     u1607:
  3347  000F86  2EE8               	decfsz	wreg,f,c
  3348  000F88  D7FE               	bra	u1607
  3349  000F8A  2E15               	decfsz	??_LCDPutCmd^0,f,c
  3350  000F8C  D7FC               	bra	u1607
  3351  000F8E                     
  3352                           ;lcd.c: 144:     LCDWriteNibble(ch, 0);
  3353  000F8E  0E00               	movlw	0
  3354  000F90  6E12               	movwf	LCDWriteNibble@rs^0,c
  3355  000F92  5016               	movf	LCDPutCmd@ch^0,w,c
  3356  000F94  EC92  F005         	call	_LCDWriteNibble
  3357  000F98  0012               	return		;funcret
  3358  000F9A                     __end_of_LCDPutCmd:
  3359                           	opt callstack 0
  3360                           
  3361 ;; *************** function _LCDWriteNibble *****************
  3362 ;; Defined at:
  3363 ;;		line 89 in file "lcd.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;  ch              1    wreg     unsigned char 
  3366 ;;  rs              1   17[COMRAM] unsigned char 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  ch              1   19[COMRAM] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3378 ;;      Params:         1       0       0       0
  3379 ;;      Locals:         1       0       0       0
  3380 ;;      Temps:          1       0       0       0
  3381 ;;      Totals:         3       0       0       0
  3382 ;;Total ram usage:        3 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    3
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_LCDPutChar
  3389 ;;		_LCDPutCmd
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text18
  3394  000B24                     __ptext18:
  3395                           	opt callstack 0
  3396  000B24                     _LCDWriteNibble:
  3397                           	opt callstack 24
  3398                           
  3399                           ;incstack = 0
  3400                           ;LCDWriteNibble@ch stored from wreg
  3401  000B24  6E14               	movwf	LCDWriteNibble@ch^0,c
  3402  000B26                     
  3403                           ;lcd.c: 91:     ch = (ch >> 4);
  3404  000B26  3814               	swapf	LCDWriteNibble@ch^0,w,c
  3405  000B28  0B0F               	andlw	15
  3406  000B2A  6E14               	movwf	LCDWriteNibble@ch^0,c
  3407                           
  3408                           ;lcd.c: 94:     ch = (ch & 0x0F);
  3409  000B2C  5014               	movf	LCDWriteNibble@ch^0,w,c
  3410  000B2E  0B0F               	andlw	15
  3411  000B30  6E14               	movwf	LCDWriteNibble@ch^0,c
  3412                           
  3413                           ;lcd.c: 95:     PORTCbits.RC2 = ch & 0xF1;
  3414  000B32  C014  F013         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  3415  000B36  0EF1               	movlw	241
  3416  000B38  1613               	andwf	??_LCDWriteNibble^0,f,c
  3417  000B3A  4613               	rlncf	??_LCDWriteNibble^0,f,c
  3418  000B3C  4613               	rlncf	??_LCDWriteNibble^0,f,c
  3419  000B3E  5082               	movf	130,w,c	;volatile
  3420  000B40  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3421  000B42  0BFB               	andlw	-5
  3422  000B44  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3423  000B46  6E82               	movwf	130,c	;volatile
  3424                           
  3425                           ;lcd.c: 96:     PORTCbits.RC3 = (ch & 0xF2) >> 1;
  3426  000B48  C014  F013         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  3427  000B4C  90D8               	bcf	status,0,c
  3428  000B4E  3213               	rrcf	??_LCDWriteNibble^0,f,c
  3429  000B50  0E79               	movlw	121
  3430  000B52  1613               	andwf	??_LCDWriteNibble^0,f,c
  3431  000B54  4613               	rlncf	??_LCDWriteNibble^0,f,c
  3432  000B56  4613               	rlncf	??_LCDWriteNibble^0,f,c
  3433  000B58  4613               	rlncf	??_LCDWriteNibble^0,f,c
  3434  000B5A  5082               	movf	130,w,c	;volatile
  3435  000B5C  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3436  000B5E  0BF7               	andlw	-9
  3437  000B60  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3438  000B62  6E82               	movwf	130,c	;volatile
  3439                           
  3440                           ;lcd.c: 97:     PORTDbits.RD0 = (ch & 0xF4) >> 2;
  3441  000B64  C014  F013         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  3442  000B68  90D8               	bcf	status,0,c
  3443  000B6A  3213               	rrcf	??_LCDWriteNibble^0,f,c
  3444  000B6C  90D8               	bcf	status,0,c
  3445  000B6E  3213               	rrcf	??_LCDWriteNibble^0,f,c
  3446  000B70  0E3D               	movlw	61
  3447  000B72  1613               	andwf	??_LCDWriteNibble^0,f,c
  3448  000B74  5083               	movf	131,w,c	;volatile
  3449  000B76  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3450  000B78  0BFE               	andlw	-2
  3451  000B7A  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3452  000B7C  6E83               	movwf	131,c	;volatile
  3453                           
  3454                           ;lcd.c: 98:     PORTDbits.RD1 = (ch & 0xF8) >> 3;
  3455  000B7E  C014  F013         	movff	LCDWriteNibble@ch,??_LCDWriteNibble
  3456  000B82  90D8               	bcf	status,0,c
  3457  000B84  3213               	rrcf	??_LCDWriteNibble^0,f,c
  3458  000B86  90D8               	bcf	status,0,c
  3459  000B88  3213               	rrcf	??_LCDWriteNibble^0,f,c
  3460  000B8A  90D8               	bcf	status,0,c
  3461  000B8C  3213               	rrcf	??_LCDWriteNibble^0,f,c
  3462  000B8E  0E1F               	movlw	31
  3463  000B90  1613               	andwf	??_LCDWriteNibble^0,f,c
  3464  000B92  4613               	rlncf	??_LCDWriteNibble^0,f,c
  3465  000B94  5083               	movf	131,w,c	;volatile
  3466  000B96  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3467  000B98  0BFD               	andlw	-3
  3468  000B9A  1813               	xorwf	??_LCDWriteNibble^0,w,c
  3469  000B9C  6E83               	movwf	131,c	;volatile
  3470  000B9E                     
  3471                           ;lcd.c: 107:     PORTCbits.RC0 = rs;
  3472  000B9E  B012               	btfsc	LCDWriteNibble@rs^0,0,c
  3473  000BA0  D002               	bra	u1095
  3474  000BA2  9082               	bcf	130,0,c	;volatile
  3475  000BA4  D001               	bra	u1096
  3476  000BA6                     u1095:
  3477  000BA6  8082               	bsf	130,0,c	;volatile
  3478  000BA8                     u1096:
  3479  000BA8                     
  3480                           ;lcd.c: 113:     PORTCbits.RC1 = 1;
  3481  000BA8  8282               	bsf	130,1,c	;volatile
  3482  000BAA                     
  3483                           ;lcd.c: 114:     _delay((unsigned long)((1)*(10000000/4000000.0)));
  3484  000BAA  F000 F000          	nop2		;2 cycle nop
  3485  000BAE                     
  3486                           ;lcd.c: 116:     PORTCbits.RC1 = 0;
  3487  000BAE  9282               	bcf	130,1,c	;volatile
  3488  000BB0  0012               	return		;funcret
  3489  000BB2                     __end_of_LCDWriteNibble:
  3490                           	opt callstack 0
  3491                           
  3492 ;; *************** function _tcInt *****************
  3493 ;; Defined at:
  3494 ;;		line 392 in file "newmain.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3508 ;;      Params:         0       0       0       0
  3509 ;;      Locals:         0       0       0       0
  3510 ;;      Temps:          9       0       0       0
  3511 ;;      Totals:         9       0       0       0
  3512 ;;Total ram usage:        9 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    2
  3515 ;; This function calls:
  3516 ;;		_handleDisplay
  3517 ;;		_handlePWMDutyCycle
  3518 ;;		_handleTimer0Preload
  3519 ;; This function is called by:
  3520 ;;		Interrupt level 1
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	intcodelo
  3525  000018                     __pintcodelo:
  3526                           	opt callstack 0
  3527  000018                     _tcInt:
  3528                           	opt callstack 19
  3529                           
  3530                           ;incstack = 0
  3531  000018  804E               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3532  00001A  CFD8 F009          	movff	status,??_tcInt
  3533  00001E  CFE8 F00A          	movff	wreg,??_tcInt+1
  3534  000022  CFE0 F00B          	movff	bsr,??_tcInt+2
  3535  000026  CFF3 F00C          	movff	prodl,??_tcInt+3
  3536  00002A  CFF4 F00D          	movff	prodh,??_tcInt+4
  3537  00002E  CFF6 F00E          	movff	tblptrl,??_tcInt+5
  3538  000032  CFF7 F00F          	movff	tblptrh,??_tcInt+6
  3539  000036  CFF8 F010          	movff	tblptru,??_tcInt+7
  3540  00003A  CFF5 F011          	movff	tablat,??_tcInt+8
  3541  00003E                     
  3542                           ;newmain.c: 396:     if (PIR1bits.ADIF) {
  3543  00003E  AC9E               	btfss	158,6,c	;volatile
  3544  000040  EF24  F000         	goto	i1u125_21
  3545  000044  EF26  F000         	goto	i1u125_20
  3546  000048                     i1u125_21:
  3547  000048  EF29  F000         	goto	i1l1948
  3548  00004C                     i1u125_20:
  3549  00004C                     
  3550                           ;newmain.c: 397:         PIR1bits.ADIF = 0;
  3551  00004C  9C9E               	bcf	158,6,c	;volatile
  3552  00004E                     
  3553                           ;newmain.c: 398:         handleTimer0Preload();
  3554  00004E  EC80  F006         	call	_handleTimer0Preload	;wreg free
  3555  000052                     i1l1948:
  3556                           
  3557                           ;newmain.c: 401:     if (INTCONbits.T0IF) {
  3558  000052  A4F2               	btfss	242,2,c	;volatile
  3559  000054  EF2E  F000         	goto	i1u126_21
  3560  000058  EF30  F000         	goto	i1u126_20
  3561  00005C                     i1u126_21:
  3562  00005C  EF33  F000         	goto	i1l1954
  3563  000060                     i1u126_20:
  3564  000060                     
  3565                           ;newmain.c: 402:         INTCONbits.T0IF = 0;
  3566  000060  94F2               	bcf	242,2,c	;volatile
  3567  000062                     
  3568                           ;newmain.c: 403:         handlePWMDutyCycle();
  3569  000062  EC40  F004         	call	_handlePWMDutyCycle	;wreg free
  3570  000066                     i1l1954:
  3571                           
  3572                           ;newmain.c: 406:     if (PIR1bits.TMR1IF) {
  3573  000066  A09E               	btfss	158,0,c	;volatile
  3574  000068  EF38  F000         	goto	i1u127_21
  3575  00006C  EF3A  F000         	goto	i1u127_20
  3576  000070                     i1u127_21:
  3577  000070  EF41  F000         	goto	i1l1962
  3578  000074                     i1u127_20:
  3579  000074                     
  3580                           ;newmain.c: 407:         PIR1bits.TMR1IF = 0;
  3581  000074  909E               	bcf	158,0,c	;volatile
  3582  000076                     
  3583                           ;newmain.c: 408:         TMR1 = 0;
  3584  000076  0E00               	movlw	0
  3585  000078  6ECF               	movwf	207,c	;volatile
  3586  00007A  0E00               	movlw	0
  3587  00007C  6ECE               	movwf	206,c	;volatile
  3588  00007E                     
  3589                           ;newmain.c: 409:         handleDisplay();
  3590  00007E  EC6F  F007         	call	_handleDisplay	;wreg free
  3591  000082                     i1l1962:
  3592                           
  3593                           ;newmain.c: 412:     if (PIR3bits.TMR5IF) {
  3594  000082  A0A4               	btfss	164,0,c	;volatile
  3595  000084  EF46  F000         	goto	i1u128_21
  3596  000088  EF48  F000         	goto	i1u128_20
  3597  00008C                     i1u128_21:
  3598  00008C  EF69  F000         	goto	i1l171
  3599  000090                     i1u128_20:
  3600  000090                     
  3601                           ;newmain.c: 413:         PIR3bits.TMR5IF = 0;
  3602  000090  90A4               	bcf	164,0,c	;volatile
  3603                           
  3604                           ;newmain.c: 414:         TMR5 = timer5ReloadValue;
  3605  000092  C03F  FF87         	movff	_timer5ReloadValue,3975	;volatile
  3606  000096  C040  FF88         	movff	_timer5ReloadValue+1,3976	;volatile
  3607  00009A                     
  3608                           ;newmain.c: 416:         if (timer5OverflowCount == 2) {
  3609  00009A  0E02               	movlw	2
  3610  00009C  184C               	xorwf	_timer5OverflowCount^0,w,c	;volatile
  3611  00009E  A4D8               	btfss	status,2,c
  3612  0000A0  EF54  F000         	goto	i1u129_21
  3613  0000A4  EF56  F000         	goto	i1u129_20
  3614  0000A8                     i1u129_21:
  3615  0000A8  EF68  F000         	goto	i1l1972
  3616  0000AC                     i1u129_20:
  3617  0000AC                     
  3618                           ;newmain.c: 417:             timer5OverflowCount = 0;
  3619  0000AC  0E00               	movlw	0
  3620  0000AE  6E4C               	movwf	_timer5OverflowCount^0,c	;volatile
  3621  0000B0                     
  3622                           ;newmain.c: 419:             PORTAbits.RA2 = d1;
  3623  0000B0  B044               	btfsc	_d1^0,0,c	;volatile
  3624  0000B2  D002               	bra	i1u130_25
  3625  0000B4  9480               	bcf	128,2,c	;volatile
  3626  0000B6  D001               	bra	i1u130_26
  3627  0000B8                     i1u130_25:
  3628  0000B8  8480               	bsf	128,2,c	;volatile
  3629  0000BA                     i1u130_26:
  3630                           
  3631                           ;newmain.c: 420:             d1 = !d1;
  3632  0000BA  5044               	movf	_d1^0,w,c	;volatile
  3633  0000BC  B4D8               	btfsc	status,2,c
  3634  0000BE  EF63  F000         	goto	i1u131_21
  3635  0000C2  EF66  F000         	goto	i1u131_20
  3636  0000C6                     i1u131_21:
  3637  0000C6  0E01               	movlw	1
  3638  0000C8  EF67  F000         	goto	i1u132_20
  3639  0000CC                     i1u131_20:
  3640  0000CC  0E00               	movlw	0
  3641  0000CE                     i1u132_20:
  3642  0000CE  6E44               	movwf	_d1^0,c	;volatile
  3643  0000D0                     i1l1972:
  3644                           
  3645                           ;newmain.c: 422:         timer5OverflowCount++;
  3646  0000D0  2A4C               	incf	_timer5OverflowCount^0,f,c	;volatile
  3647  0000D2                     i1l171:
  3648  0000D2  C011  FFF5         	movff	??_tcInt+8,tablat
  3649  0000D6  C010  FFF8         	movff	??_tcInt+7,tblptru
  3650  0000DA  C00F  FFF7         	movff	??_tcInt+6,tblptrh
  3651  0000DE  C00E  FFF6         	movff	??_tcInt+5,tblptrl
  3652  0000E2  C00D  FFF4         	movff	??_tcInt+4,prodh
  3653  0000E6  C00C  FFF3         	movff	??_tcInt+3,prodl
  3654  0000EA  C00B  FFE0         	movff	??_tcInt+2,bsr
  3655  0000EE  C00A  FFE8         	movff	??_tcInt+1,wreg
  3656  0000F2  C009  FFD8         	movff	??_tcInt,status
  3657  0000F6  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3658  0000F8  0010               	retfie	
  3659  0000FA                     __end_of_tcInt:
  3660                           	opt callstack 0
  3661                           
  3662 ;; *************** function _handleTimer0Preload *****************
  3663 ;; Defined at:
  3664 ;;		line 497 in file "newmain.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;		None
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;		None
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3678 ;;      Params:         0       0       0       0
  3679 ;;      Locals:         0       0       0       0
  3680 ;;      Temps:          1       0       0       0
  3681 ;;      Totals:         1       0       0       0
  3682 ;;Total ram usage:        1 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    1
  3685 ;; This function calls:
  3686 ;;		___lwdiv
  3687 ;; This function is called by:
  3688 ;;		_tcInt
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text20
  3693  000D00                     __ptext20:
  3694                           	opt callstack 0
  3695  000D00                     _handleTimer0Preload:
  3696                           	opt callstack 19
  3697  000D00                     
  3698                           ;newmain.c: 502:     if (PrevADRESH != ADRESH) {
  3699  000D00  50C4               	movf	196,w,c	;volatile
  3700  000D02  1843               	xorwf	_PrevADRESH^0,w,c	;volatile
  3701  000D04  B4D8               	btfsc	status,2,c
  3702  000D06  EF87  F006         	goto	i1u121_21
  3703  000D0A  EF89  F006         	goto	i1u121_20
  3704  000D0E                     i1u121_21:
  3705  000D0E  EFAC  F006         	goto	i1l1910
  3706  000D12                     i1u121_20:
  3707  000D12                     
  3708                           ;newmain.c: 503:         adcPercent = (255 - ADRESH) * 99 / maxADCVal;
  3709  000D12  50C4               	movf	196,w,c	;volatile
  3710  000D14  0AFF               	xorlw	255
  3711  000D16  6E08               	movwf	??_handleTimer0Preload^0,c
  3712  000D18  5008               	movf	??_handleTimer0Preload^0,w,c
  3713  000D1A  0D63               	mullw	99
  3714  000D1C  CFF3 F001          	movff	prodl,___lwdiv@dividend
  3715  000D20  CFF4 F002          	movff	prodh,___lwdiv@dividend+1
  3716  000D24  C0D7  F003         	movff	_maxADCVal,___lwdiv@divisor
  3717  000D28  C0D8  F004         	movff	_maxADCVal+1,___lwdiv@divisor+1
  3718  000D2C  EC15  F006         	call	___lwdiv	;wreg free
  3719  000D30  C001  F0B4         	movff	?___lwdiv,_adcPercent	;volatile
  3720  000D34  C002  F0B5         	movff	?___lwdiv+1,_adcPercent+1	;volatile
  3721  000D38                     
  3722                           ;newmain.c: 504:         timer0ReloadValue = timer0PreloadValues[adcPercent];
  3723  000D38  90D8               	bcf	status,0,c
  3724  000D3A  0100               	movlb	0	; () banked
  3725  000D3C  35B4               	rlcf	_adcPercent& (0+255),w,b	;volatile
  3726  000D3E  6EF6               	movwf	tblptrl,c
  3727  000D40  35B5               	rlcf	(_adcPercent+1)& (0+255),w,b	;volatile
  3728  000D42  6EF7               	movwf	tblptrh,c
  3729  000D44  0E25               	movlw	low _timer0PreloadValues
  3730  000D46  26F6               	addwf	tblptrl,f,c
  3731  000D48  0E3F               	movlw	high _timer0PreloadValues
  3732  000D4A  22F7               	addwfc	tblptrh,f,c
  3733  000D4C                     	if	0	;There are less than 3 active tblptr bytes
  3734  000D4C                     	endif
  3735  000D4C  0009               	tblrd		*+
  3736  000D4E  CFF5 F03D          	movff	tablat,_timer0ReloadValue	;volatile
  3737  000D52  000A               	tblrd		*-
  3738  000D54  CFF5 F03E          	movff	tablat,_timer0ReloadValue+1	;volatile
  3739  000D58                     i1l1910:
  3740                           
  3741                           ;newmain.c: 506:     PrevADRESH = ADRESH;
  3742  000D58  CFC4 F043          	movff	4036,_PrevADRESH	;volatile
  3743  000D5C                     
  3744                           ;newmain.c: 512:     __nop();
  3745  000D5C  F000               	nop	
  3746  000D5E  0012               	return		;funcret
  3747  000D60                     __end_of_handleTimer0Preload:
  3748                           	opt callstack 0
  3749                           
  3750 ;; *************** function ___lwdiv *****************
  3751 ;; Defined at:
  3752 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwdiv.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  dividend        2    0[COMRAM] unsigned int 
  3755 ;;  divisor         2    2[COMRAM] unsigned int 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  quotient        2    4[COMRAM] unsigned int 
  3758 ;;  counter         1    6[COMRAM] unsigned char 
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  2    0[COMRAM] unsigned int 
  3761 ;; Registers used:
  3762 ;;		wreg, status,2, status,0
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3768 ;;      Params:         4       0       0       0
  3769 ;;      Locals:         3       0       0       0
  3770 ;;      Temps:          0       0       0       0
  3771 ;;      Totals:         7       0       0       0
  3772 ;;Total ram usage:        7 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; This function calls:
  3775 ;;		Nothing
  3776 ;; This function is called by:
  3777 ;;		_handleTimer0Preload
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text21
  3782  000C2A                     __ptext21:
  3783                           	opt callstack 0
  3784  000C2A                     ___lwdiv:
  3785                           	opt callstack 19
  3786  000C2A  0E00               	movlw	0
  3787  000C2C  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  3788  000C2E  0E00               	movlw	0
  3789  000C30  6E05               	movwf	___lwdiv@quotient^0,c
  3790  000C32  5003               	movf	___lwdiv@divisor^0,w,c
  3791  000C34  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3792  000C36  B4D8               	btfsc	status,2,c
  3793  000C38  EF20  F006         	goto	i1u118_21
  3794  000C3C  EF22  F006         	goto	i1u118_20
  3795  000C40                     i1u118_21:
  3796  000C40  EF4A  F006         	goto	i1l795
  3797  000C44                     i1u118_20:
  3798  000C44  0E01               	movlw	1
  3799  000C46  6E07               	movwf	___lwdiv@counter^0,c
  3800  000C48  EF2A  F006         	goto	i1l1866
  3801  000C4C                     i1l1864:
  3802  000C4C  90D8               	bcf	status,0,c
  3803  000C4E  3603               	rlcf	___lwdiv@divisor^0,f,c
  3804  000C50  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3805  000C52  2A07               	incf	___lwdiv@counter^0,f,c
  3806  000C54                     i1l1866:
  3807  000C54  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  3808  000C56  EF2F  F006         	goto	i1u119_21
  3809  000C5A  EF31  F006         	goto	i1u119_20
  3810  000C5E                     i1u119_21:
  3811  000C5E  EF26  F006         	goto	i1l1864
  3812  000C62                     i1u119_20:
  3813  000C62                     i1l1868:
  3814  000C62  90D8               	bcf	status,0,c
  3815  000C64  3605               	rlcf	___lwdiv@quotient^0,f,c
  3816  000C66  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3817  000C68  5003               	movf	___lwdiv@divisor^0,w,c
  3818  000C6A  5C01               	subwf	___lwdiv@dividend^0,w,c
  3819  000C6C  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  3820  000C6E  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3821  000C70  A0D8               	btfss	status,0,c
  3822  000C72  EF3D  F006         	goto	i1u120_21
  3823  000C76  EF3F  F006         	goto	i1u120_20
  3824  000C7A                     i1u120_21:
  3825  000C7A  EF44  F006         	goto	i1l1876
  3826  000C7E                     i1u120_20:
  3827  000C7E  5003               	movf	___lwdiv@divisor^0,w,c
  3828  000C80  5E01               	subwf	___lwdiv@dividend^0,f,c
  3829  000C82  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  3830  000C84  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3831  000C86  8005               	bsf	___lwdiv@quotient^0,0,c
  3832  000C88                     i1l1876:
  3833  000C88  90D8               	bcf	status,0,c
  3834  000C8A  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3835  000C8C  3203               	rrcf	___lwdiv@divisor^0,f,c
  3836  000C8E  2E07               	decfsz	___lwdiv@counter^0,f,c
  3837  000C90  EF31  F006         	goto	i1l1868
  3838  000C94                     i1l795:
  3839  000C94  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3840  000C98  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3841  000C9C  0012               	return		;funcret
  3842  000C9E                     __end_of___lwdiv:
  3843                           	opt callstack 0
  3844                           
  3845 ;; *************** function _handlePWMDutyCycle *****************
  3846 ;; Defined at:
  3847 ;;		line 462 in file "newmain.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  duty            1    2[COMRAM] unsigned char 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3861 ;;      Params:         0       0       0       0
  3862 ;;      Locals:         1       0       0       0
  3863 ;;      Temps:          2       0       0       0
  3864 ;;      Totals:         3       0       0       0
  3865 ;;Total ram usage:        3 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_tcInt
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text22
  3875  000880                     __ptext22:
  3876                           	opt callstack 0
  3877  000880                     _handlePWMDutyCycle:
  3878                           	opt callstack 20
  3879  000880                     
  3880                           ;newmain.c: 463:     if (sinusIndex1 == 255) {
  3881  000880  284D               	incf	_sinusIndex1^0,w,c	;volatile
  3882  000882  A4D8               	btfss	status,2,c
  3883  000884  EF46  F004         	goto	i1u53_21
  3884  000888  EF48  F004         	goto	i1u53_20
  3885  00088C                     i1u53_21:
  3886  00088C  EF4A  F004         	goto	i1l1378
  3887  000890                     i1u53_20:
  3888  000890                     
  3889                           ;newmain.c: 464:         sinusIndex1 = 0;
  3890  000890  0E00               	movlw	0
  3891  000892  6E4D               	movwf	_sinusIndex1^0,c	;volatile
  3892  000894                     i1l1378:
  3893                           
  3894                           ;newmain.c: 466:     if (sinusIndex2 == 255) {
  3895  000894  2846               	incf	_sinusIndex2^0,w,c	;volatile
  3896  000896  A4D8               	btfss	status,2,c
  3897  000898  EF50  F004         	goto	i1u54_21
  3898  00089C  EF52  F004         	goto	i1u54_20
  3899  0008A0                     i1u54_21:
  3900  0008A0  EF54  F004         	goto	i1l1382
  3901  0008A4                     i1u54_20:
  3902  0008A4                     
  3903                           ;newmain.c: 467:         sinusIndex2 = 0;
  3904  0008A4  0E00               	movlw	0
  3905  0008A6  6E46               	movwf	_sinusIndex2^0,c	;volatile
  3906  0008A8                     i1l1382:
  3907                           
  3908                           ;newmain.c: 469:     if (sinusIndex3 == 255) {
  3909  0008A8  2845               	incf	_sinusIndex3^0,w,c	;volatile
  3910  0008AA  A4D8               	btfss	status,2,c
  3911  0008AC  EF5A  F004         	goto	i1u55_21
  3912  0008B0  EF5C  F004         	goto	i1u55_20
  3913  0008B4                     i1u55_21:
  3914  0008B4  EF5E  F004         	goto	i1l1386
  3915  0008B8                     i1u55_20:
  3916  0008B8                     
  3917                           ;newmain.c: 470:         sinusIndex3 = 0;
  3918  0008B8  0E00               	movlw	0
  3919  0008BA  6E45               	movwf	_sinusIndex3^0,c	;volatile
  3920  0008BC                     i1l1386:
  3921                           
  3922                           ;newmain.c: 474:     unsigned char duty = (sinusValues[sinusIndex1] >> 8);
  3923  0008BC  504D               	movf	_sinusIndex1^0,w,c	;volatile
  3924  0008BE  0D02               	mullw	2
  3925  0008C0  0E25               	movlw	low _sinusValues
  3926  0008C2  24F3               	addwf	243,w,c
  3927  0008C4  6EF6               	movwf	tblptrl,c
  3928  0008C6  0E3D               	movlw	high _sinusValues
  3929  0008C8  20F4               	addwfc	244,w,c
  3930  0008CA  6EF7               	movwf	tblptrh,c
  3931  0008CC                     	if	0	;There are less than 3 active tblptr bytes
  3932  0008CC                     	endif
  3933  0008CC  0009               	tblrd		*+
  3934  0008CE  CFF5 F001          	movff	tablat,??_handlePWMDutyCycle
  3935  0008D2  0009               	tblrd		*+
  3936  0008D4  CFF5 F002          	movff	tablat,??_handlePWMDutyCycle+1
  3937  0008D8  C002  F001         	movff	??_handlePWMDutyCycle+1,??_handlePWMDutyCycle
  3938  0008DC  6A02               	clrf	(??_handlePWMDutyCycle+1)^0,c
  3939  0008DE  BE01               	btfsc	??_handlePWMDutyCycle^0,7,c
  3940  0008E0  6802               	setf	(??_handlePWMDutyCycle+1)^0,c
  3941  0008E2  5001               	movf	??_handlePWMDutyCycle^0,w,c
  3942  0008E4  6E03               	movwf	handlePWMDutyCycle@duty^0,c
  3943  0008E6                     
  3944                           ;newmain.c: 475:     PDC0H = duty;
  3945  0008E6  C003  FF78         	movff	handlePWMDutyCycle@duty,3960	;volatile
  3946  0008EA                     
  3947                           ;newmain.c: 476:     PDC0L = sinusValues[sinusIndex1];
  3948  0008EA  504D               	movf	_sinusIndex1^0,w,c	;volatile
  3949  0008EC  0D02               	mullw	2
  3950  0008EE  0E25               	movlw	low _sinusValues
  3951  0008F0  24F3               	addwf	243,w,c
  3952  0008F2  6EF6               	movwf	tblptrl,c
  3953  0008F4  0E3D               	movlw	high _sinusValues
  3954  0008F6  20F4               	addwfc	244,w,c
  3955  0008F8  6EF7               	movwf	tblptrh,c
  3956  0008FA                     	if	0	;There are less than 3 active tblptr bytes
  3957  0008FA                     	endif
  3958  0008FA  0008               	tblrd		*
  3959  0008FC  CFF5 FF79          	movff	tablat,3961	;volatile
  3960  000900                     
  3961                           ;newmain.c: 478:     duty = (sinusValues[sinusIndex2] >> 8);
  3962  000900  5046               	movf	_sinusIndex2^0,w,c	;volatile
  3963  000902  0D02               	mullw	2
  3964  000904  0E25               	movlw	low _sinusValues
  3965  000906  24F3               	addwf	243,w,c
  3966  000908  6EF6               	movwf	tblptrl,c
  3967  00090A  0E3D               	movlw	high _sinusValues
  3968  00090C  20F4               	addwfc	244,w,c
  3969  00090E  6EF7               	movwf	tblptrh,c
  3970  000910                     	if	0	;There are less than 3 active tblptr bytes
  3971  000910                     	endif
  3972  000910  0009               	tblrd		*+
  3973  000912  CFF5 F001          	movff	tablat,??_handlePWMDutyCycle
  3974  000916  0009               	tblrd		*+
  3975  000918  CFF5 F002          	movff	tablat,??_handlePWMDutyCycle+1
  3976  00091C  C002  F001         	movff	??_handlePWMDutyCycle+1,??_handlePWMDutyCycle
  3977  000920  6A02               	clrf	(??_handlePWMDutyCycle+1)^0,c
  3978  000922  BE01               	btfsc	??_handlePWMDutyCycle^0,7,c
  3979  000924  6802               	setf	(??_handlePWMDutyCycle+1)^0,c
  3980  000926  5001               	movf	??_handlePWMDutyCycle^0,w,c
  3981  000928  6E03               	movwf	handlePWMDutyCycle@duty^0,c
  3982  00092A                     
  3983                           ;newmain.c: 479:     PDC1H = duty;
  3984  00092A  C003  FF76         	movff	handlePWMDutyCycle@duty,3958	;volatile
  3985  00092E                     
  3986                           ;newmain.c: 480:     PDC1L = sinusValues[sinusIndex2];
  3987  00092E  5046               	movf	_sinusIndex2^0,w,c	;volatile
  3988  000930  0D02               	mullw	2
  3989  000932  0E25               	movlw	low _sinusValues
  3990  000934  24F3               	addwf	243,w,c
  3991  000936  6EF6               	movwf	tblptrl,c
  3992  000938  0E3D               	movlw	high _sinusValues
  3993  00093A  20F4               	addwfc	244,w,c
  3994  00093C  6EF7               	movwf	tblptrh,c
  3995  00093E                     	if	0	;There are less than 3 active tblptr bytes
  3996  00093E                     	endif
  3997  00093E  0008               	tblrd		*
  3998  000940  CFF5 FF77          	movff	tablat,3959	;volatile
  3999  000944                     
  4000                           ;newmain.c: 482:     duty = (sinusValues[sinusIndex3] >> 8);
  4001  000944  5045               	movf	_sinusIndex3^0,w,c	;volatile
  4002  000946  0D02               	mullw	2
  4003  000948  0E25               	movlw	low _sinusValues
  4004  00094A  24F3               	addwf	243,w,c
  4005  00094C  6EF6               	movwf	tblptrl,c
  4006  00094E  0E3D               	movlw	high _sinusValues
  4007  000950  20F4               	addwfc	244,w,c
  4008  000952  6EF7               	movwf	tblptrh,c
  4009  000954                     	if	0	;There are less than 3 active tblptr bytes
  4010  000954                     	endif
  4011  000954  0009               	tblrd		*+
  4012  000956  CFF5 F001          	movff	tablat,??_handlePWMDutyCycle
  4013  00095A  0009               	tblrd		*+
  4014  00095C  CFF5 F002          	movff	tablat,??_handlePWMDutyCycle+1
  4015  000960  C002  F001         	movff	??_handlePWMDutyCycle+1,??_handlePWMDutyCycle
  4016  000964  6A02               	clrf	(??_handlePWMDutyCycle+1)^0,c
  4017  000966  BE01               	btfsc	??_handlePWMDutyCycle^0,7,c
  4018  000968  6802               	setf	(??_handlePWMDutyCycle+1)^0,c
  4019  00096A  5001               	movf	??_handlePWMDutyCycle^0,w,c
  4020  00096C  6E03               	movwf	handlePWMDutyCycle@duty^0,c
  4021  00096E                     
  4022                           ;newmain.c: 483:     PDC2H = duty;
  4023  00096E  C003  FF74         	movff	handlePWMDutyCycle@duty,3956	;volatile
  4024  000972                     
  4025                           ;newmain.c: 484:     PDC2L = sinusValues[sinusIndex3];
  4026  000972  5045               	movf	_sinusIndex3^0,w,c	;volatile
  4027  000974  0D02               	mullw	2
  4028  000976  0E25               	movlw	low _sinusValues
  4029  000978  24F3               	addwf	243,w,c
  4030  00097A  6EF6               	movwf	tblptrl,c
  4031  00097C  0E3D               	movlw	high _sinusValues
  4032  00097E  20F4               	addwfc	244,w,c
  4033  000980  6EF7               	movwf	tblptrh,c
  4034  000982                     	if	0	;There are less than 3 active tblptr bytes
  4035  000982                     	endif
  4036  000982  0008               	tblrd		*
  4037  000984  CFF5 FF75          	movff	tablat,3957	;volatile
  4038  000988                     
  4039                           ;newmain.c: 487:     TMR0 = timer0ReloadValue;
  4040  000988  C03D  FFD6         	movff	_timer0ReloadValue,4054	;volatile
  4041  00098C  C03E  FFD7         	movff	_timer0ReloadValue+1,4055	;volatile
  4042  000990                     
  4043                           ;newmain.c: 492:     sinusIndex1++;
  4044  000990  2A4D               	incf	_sinusIndex1^0,f,c	;volatile
  4045  000992                     
  4046                           ;newmain.c: 493:     sinusIndex2++;
  4047  000992  2A46               	incf	_sinusIndex2^0,f,c	;volatile
  4048  000994                     
  4049                           ;newmain.c: 494:     sinusIndex3++;
  4050  000994  2A45               	incf	_sinusIndex3^0,f,c	;volatile
  4051  000996  0012               	return		;funcret
  4052  000998                     __end_of_handlePWMDutyCycle:
  4053                           	opt callstack 0
  4054                           
  4055 ;; *************** function _handleDisplay *****************
  4056 ;; Defined at:
  4057 ;;		line 427 in file "newmain.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4071 ;;      Params:         0       0       0       0
  4072 ;;      Locals:         0       0       0       0
  4073 ;;      Temps:          0       0       0       0
  4074 ;;      Totals:         0       0       0       0
  4075 ;;Total ram usage:        0 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_tcInt
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text23
  4085  000EDE                     __ptext23:
  4086                           	opt callstack 0
  4087  000EDE                     _handleDisplay:
  4088                           	opt callstack 20
  4089  000EDE                     
  4090                           ;newmain.c: 428:     refreshTime++;
  4091  000EDE  2A4B               	incf	_refreshTime^0,f,c	;volatile
  4092  000EE0                     
  4093                           ;newmain.c: 429:     if (refreshTime == 5) {
  4094  000EE0  0E05               	movlw	5
  4095  000EE2  184B               	xorwf	_refreshTime^0,w,c	;volatile
  4096  000EE4  A4D8               	btfss	status,2,c
  4097  000EE6  EF77  F007         	goto	i1u122_21
  4098  000EEA  EF79  F007         	goto	i1u122_20
  4099  000EEE                     i1u122_21:
  4100  000EEE  EF8E  F007         	goto	i1l176
  4101  000EF2                     i1u122_20:
  4102  000EF2                     
  4103                           ;newmain.c: 430:         refreshTime = 0;
  4104  000EF2  0E00               	movlw	0
  4105  000EF4  6E4B               	movwf	_refreshTime^0,c	;volatile
  4106  000EF6                     
  4107                           ;newmain.c: 431:         if (prevAdcPercent != adcPercent) {
  4108  000EF6  0100               	movlb	0	; () banked
  4109  000EF8  51B4               	movf	_adcPercent& (0+255),w,b	;volatile
  4110  000EFA  1841               	xorwf	_prevAdcPercent^0,w,c	;volatile
  4111  000EFC  E109               	bnz	i1u123_20
  4112  000EFE  51B5               	movf	(_adcPercent+1)& (0+255),w,b	;volatile
  4113  000F00  1842               	xorwf	(_prevAdcPercent+1)^0,w,c	;volatile
  4114  000F02  B4D8               	btfsc	status,2,c
  4115  000F04  EF86  F007         	goto	i1u123_21
  4116  000F08  EF88  F007         	goto	i1u123_20
  4117  000F0C                     i1u123_21:
  4118  000F0C  EF8A  F007         	goto	i1l1924
  4119  000F10                     i1u123_20:
  4120  000F10                     
  4121                           ; BSR set to: 0
  4122                           ;newmain.c: 432:             shouldDisplay = 1;
  4123  000F10  0E01               	movlw	1
  4124  000F12  6FB6               	movwf	_shouldDisplay& (0+255),b	;volatile
  4125  000F14                     i1l1924:
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;newmain.c: 435:         prevAdcPercent = adcPercent;
  4129  000F14  C0B4  F041         	movff	_adcPercent,_prevAdcPercent	;volatile
  4130  000F18  C0B5  F042         	movff	_adcPercent+1,_prevAdcPercent+1	;volatile
  4131  000F1C                     i1l176:
  4132  000F1C  0012               	return		;funcret
  4133  000F1E                     __end_of_handleDisplay:
  4134                           	opt callstack 0
  4135                           
  4136                           	psect	rparam
  4137  0000                     
  4138                           	psect	temp
  4139  00004E                     btemp:
  4140                           	opt callstack 0
  4141  00004E                     	ds	1
  4142  0000                     int$flags	set	btemp
  4143  0000                     wtemp8	set	btemp+1
  4144  0000                     ttemp5	set	btemp+1
  4145  0000                     ttemp6	set	btemp+4
  4146  0000                     ttemp7	set	btemp+8
  4147                           tosu	equ	0xFFF
  4148                           tosh	equ	0xFFE
  4149                           tosl	equ	0xFFD
  4150                           stkptr	equ	0xFFC
  4151                           pclatu	equ	0xFFB
  4152                           pclath	equ	0xFFA
  4153                           pcl	equ	0xFF9
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           indf0	equ	0xFEF
  4161                           postinc0	equ	0xFEE
  4162                           postdec0	equ	0xFED
  4163                           preinc0	equ	0xFEC
  4164                           plusw0	equ	0xFEB
  4165                           fsr0h	equ	0xFEA
  4166                           fsr0l	equ	0xFE9
  4167                           wreg	equ	0xFE8
  4168                           indf1	equ	0xFE7
  4169                           postinc1	equ	0xFE6
  4170                           postdec1	equ	0xFE5
  4171                           preinc1	equ	0xFE4
  4172                           plusw1	equ	0xFE3
  4173                           fsr1h	equ	0xFE2
  4174                           fsr1l	equ	0xFE1
  4175                           bsr	equ	0xFE0
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           preinc2	equ	0xFDC
  4180                           plusw2	equ	0xFDB
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    722
    Data        12
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      77
    BANK0           160     76     121
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> display@str1(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> display@str1(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1814_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> display@str1(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> display@str1(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 16
		 -> display@str1(BANK0[16]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCD_Initialize->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _tcInt in COMRAM

    _tcInt->_handleTimer0Preload
    _handleTimer0Preload->___lwdiv

Critical Paths under _main in BANK0

    _main->_display
    _display->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa

Critical Paths under _tcInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tcInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tcInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10853
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                             32    32      0    9030
                                             60 BANK0     16    16      0
                         _LCDPutChar
                          _LCDPutCmd
                          _LCDPutStr
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             16    10      6    7127
                                             44 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6641
                                             36 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    6168
                                             54 COMRAM     6     0      6
                                             26 BANK0     10    10      0
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4596
                                             44 COMRAM    10     0     10
                                              0 BANK0     26    26      0
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2709
                                             33 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                             26 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     834
                                             17 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             35 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                             17 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                             17 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            5     3      2     769
                                             22 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           2     2      0     527
                                             20 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     527
                                             22 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     527
                                             20 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (4) _LCDWriteNibble                                       3     2      1     460
                                             17 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tcInt                                               9     9      0     359
                                              8 COMRAM     9     9      0
                      _handleDisplay
                 _handlePWMDutyCycle
                _handleTimer0Preload
 ---------------------------------------------------------------------------------
 (11) _handleTimer0Preload                                 1     1      0     314
                                              7 COMRAM     1     1      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) _handlePWMDutyCycle                                  3     3      0      45
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) _handleDisplay                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDPutCmd
     _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _display
     _LCDPutChar
       _LCDWriteNibble
     _LCDPutCmd
       _LCDWriteNibble
     _LCDPutStr
       _LCDPutChar
         _LCDWriteNibble
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch

 _tcInt (ROOT)
   _handleDisplay
   _handlePWMDutyCycle
   _handleTimer0Preload
     ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      79       5       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      4D       1       81.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C6       3        0.0%
DATA                 0      0      C6      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jan 04 01:36:08 2020

              _LCD_Initialize 0E10                   ?_LCDPutChar 0001                            _d1 0044  
                          bsr 000FE0                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l210 103A  
                         l204 0E58                           l300 0CF6                           l213 0F98  
                         l301 0CFE                           l207 0BB0                           l219 0C28  
                         l261 0B22                           l431 087E                           l256 0AA6  
                         l418 071A                           l259 0AE8                           l267 019E  
                         l179 0F5A                           l269 01A6                           l294 0592  
                         l287 03DE                           l982 0EDC                           l994 0A60  
                         l979 0ED4                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                         u700 09AA                           u701 09A6                           u710 09BC  
                         u711 09B8                           u800 0EB8                           u720 09E4  
                         u801 0EB4                           u721 09E0                           u810 05A6  
                         u730 0A1A                           u811 05A2                           u731 0A16  
                         u820 05D8                           u900 079E                           u740 0E9C  
                         u821 05D4                           u901 079A                           u741 0E98  
                         u910 07C8                           u750 0FFE                           u831 0602  
                         u911 07C4                           u751 0FFA                           u840 0626  
                         u920 07F6                           u760 0A70                           u841 0622  
                         u921 07F2                           u761 0A6C                           u850 0650  
                         u930 083E                           u770 0A92                           u851 064C  
                         u931 083A                           u771 0A8E                           u860 0690  
                         u780 0AE8                           u861 068C                           u781 0AE4  
                         u870 06DA                           u790 0AF6                           u871 06D6  
                         u791 0AF2                           u880 072E                           u881 072A  
                         u890 0760                           u891 075C                           _abs 0E9E  
                         _pad 0A62                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                        l1002 0E9C                          l1012 1048                          l2000 0192  
                        l1009 0E0E                          l1018 100A                          l2010 01DC  
                        l2002 01AE                          ?_abs 0024                          l2020 027A  
                        l2012 01E4                          l2004 01C0                          l2100 0DBE  
                        l2030 034C                          l2014 01EA                          l2022 02DE  
                        l2006 01CE                          l2102 0DD0                          l2040 0392  
                        l2024 02FA                          l2032 035A                          l2016 026C  
                        l2008 01D4                          l2104 0DD8                          l2120 0F54  
                        l2112 0F1E                          l2042 039E                          l2034 036C  
                        l2026 0318                          l2018 0274                          l2050 03E0  
                        l2106 0DE0                          l2114 0F24                          l2130 0FB4  
                        l2122 0F9A                          l2044 03A6                          l2036 037A  
                        l2028 0332                          l2060 044C                          l2052 0404  
                        l2108 0DFC                          l2116 0F42                          l2132 0FB6  
                        l2124 0FA4                          l2038 0380                          l2046 03B6  
                        l2070 0514                          l2062 0470                          l2054 0412  
                        l2118 0F4E                          l2134 0FB8                          l2126 0FB0  
                        l1600 0A9E                          l2080 0550                          l2072 0522  
                        l2064 04B8                          l2056 0424                          l2136 0FCA  
                        l2128 0FB2                          l1610 0B0A                          l1602 0AB2  
                        l2074 0536                          l2058 0428                          l1620 0598  
                        l1604 0AC6                          l2068 04F0                          l2084 055C  
                        l2092 0C9E                          l1630 05F8                          l1622 05A6  
                        l1614 0E9E                          l1606 0ACA                          l2086 0580  
                        l2078 0542                          l2094 0CA6                          l1640 0642  
                        l1632 05FC                          l1624 05C6                          l1616 0EB8  
                        l1560 0998                          l1608 0AF6                          l2096 0CB4  
                        l1650 06B2                          l1642 0650                          l1634 0608  
                        l1626 05CA                          l1618 0594                          l1570 0A1A  
                        l1562 09AA                          l2098 0CDA                          l1812 100E  
                        l1652 06C4                          l1644 0662                          l1636 0626  
                        l1628 05D8                          l1564 09BC                          l1580 0E7C  
                        l1830 0F70                          l1814 1020                          l1646 0690  
                        l1638 062E                          l1654 06CA                          l1670 0752  
                        l1662 071C                          l1566 09C6                          l1574 0E5A  
                        l1582 0FD6                          l1760 0B26                          l1832 0F7A  
                        l1816 102A                          l1840 0BBA                          l1656 06DA  
                        l1648 06B0                          l1680 07BA                          l1672 0760  
                        l1664 0720                          l1568 09E4                          l1576 0E66  
                        l1584 0FE2                          l1592 0A62                          l1762 0B9E  
                        l1834 0F80                          l1818 1030                          l1842 0BEA  
                        l1658 06FA                          l1682 07C8                          l1690 082E  
                        l1674 0780                          l1666 072E                          l1578 0E78  
                        l1586 0FE6                          l1594 0A70                          l1764 0BA8  
                        l1836 0F8E                          l1828 0F5E                          l1844 0BEC  
                        l1692 083E                          l1684 07F6                          l1676 079E  
                        l1668 074E                          l1588 0FFE                          l1596 0A84  
                        l1766 0BAA                          l1838 0BB2                          l1694 085E  
                        l1686 0816                          l1678 07A6                          l1598 0A92  
                        l1768 0BAE                          l1880 0E10                          l1688 0828  
                        l1890 0E4C                          l1882 0E28                          l1892 0E52  
                        l1884 0E3A                          l1886 0E40                          l1990 011E  
                        ?_pad 0022                          l1888 0E46                          l1992 0148  
                        l1994 0168                          l1996 0176                          l1988 00FE  
                        l1998 0178                          STR_1 3FF7                          STR_2 3FFC  
                        u1150 0BE6                          u1160 0C18                          u1400 0192  
                        u1401 018E                          u1170 0C28                          u1410 01C0  
                        u1171 0C24                          u1411 01BC                          u1500 0392  
                        u1420 01CE                          u1157 0BDC                          u1501 038E  
                        u1421 01CA                          u1430 02FA                          u1510 0404  
                        _LATB 000F8A                          u1095 0BA6                          u1167 0C0E  
                        u1431 02F6                          u1511 0400                          u1096 0BA8  
                        u1440 0318                          u1360 0130                          u1520 044C  
                        u1441 0314                          u1361 012A                          u1521 0448  
                        u1450 0332                          u1370 0132                          u1530 0470  
                        u1451 032E                          u1531 046C                          u1460 034C  
                        u1380 0148                          u1540 0514                          u1461 0348  
                        u1381 0144                          u1541 0510                          u1470 035A  
                        u1390 0176                          u1550 0CF6                          u1607 0F86  
                        u1471 0356                          u1391 0172                          u1551 0CF2  
                        u1480 036C                          u1560 0FCA                          u1481 0368  
                        u1561 0FC6                          u1490 037A                          u1491 0376  
                        u1577 1014                          u1587 0E2E                          u1597 0F64  
                        _TMR0 000FD6                          _TMR1 000FCE                          _TMR5 000F87  
               __CFG_FCMEN$ON 000000                   display@str1 009C                          abs@a 0024  
                        _dbuf 00B7                          _main 0F9A                          _dtoa 00FE  
                        _prec 0047                          _nout 00B0                          pad@i 0029  
                        pad@p 0026                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        pad@w 002B                          fsr2l 000FD9                          btemp 004E  
               __CFG_BOREN$ON 000000            __size_of_LCDPutCmd 003E                          prodh 000FF4  
                        prodl 000FF3                          start 00FA            __size_of_LCDPutStr 0078  
               __CFG_IESO$OFF 000000        __end_of_LCD_Initialize 0E5A                 __CFG_MCLRE$ON 000000  
               __CFG_HPOL$LOW 000000                  ___param_bank 000000             _timer0ReloadValue 003D  
                       ??_abs 0026                 __CFG_LPOL$LOW 000000                         ??_pad 0028  
                 LCDPutCmd@ch 0016               __end_of___aodiv 071C                         ?_main 0001  
                       ?_dtoa 002D               __end_of___aomod 0880                         _PDC0H 000F78  
                       _PDC1H 000F76                         _PDC0L 000F79                         _PDC2H 000F74  
                       _PDC1L 000F77                         _PDC2L 000F75               __end_of___lwdiv 0C9E  
                       i1l171 00D2                         i1l176 0F1C                         i1l185 0996  
                       i1l189 0D5E                         i1l802 0C9C                         i1l795 0C94  
                vfpfcnvrt@fmt 0039                         _PORTB 000F81                         _TRISB 000F93  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
             __end_of_display 0F5C                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         _flags 0049                         _tcInt 0018  
                       _fputc 0998                         _fputs 0E5A                         pad@fp 0022  
                       _width 00B2                         _putch 1048                         dtoa@d 002F  
                       dtoa@i 0078                         dtoa@n 0070                         dtoa@p 006A  
                       dtoa@s 006E                         dtoa@w 006C                         tablat 000FF5  
         __size_of_LCDPutChar 0030                         ttemp5 004F                         ttemp6 0052  
                       ttemp7 0056                         status 000FD8                         wtemp8 004F  
             __end_of_sprintf 0E10               ?_LCD_Initialize 0001               __initialization 0D60  
                __end_of_main 0FD6                  __end_of_dtoa 03E0                __CFG_OSC$HSPLL 000000  
                      ??_main 003D                        ??_dtoa 0060                 __activetblptr 000002  
           __end_of_LCDPutCmd 0F9A                  LCDPutChar@ch 0016             __end_of_LCDPutStr 0C2A  
      handlePWMDutyCycle@duty 0003                        _ADCON1 000FC1                        ?_tcInt 0001  
                      ?_fputc 0012                        ?_fputs 001B                        _ADRESH 000FC4  
                      ?_putch 0001                        i1l1400 096E                        i1l1410 0994  
                      i1l1402 0972                    _PrevADRESH 0043                        i1l1404 0988  
                      i1l1406 0990                        i1l1408 0992                        i1l1380 08A4  
                      i1l1390 08EA                        i1l1382 08A8                        i1l1374 0880  
                      i1l1392 0900                        i1l1384 08B8                        i1l1376 0890  
                      i1l1394 092A                        i1l1386 08BC                        i1l1378 0894  
                      i1l1396 092E                        i1l1388 08E6                        i1l1398 0944  
                      i1l1910 0D58                        i1l1920 0EF6                        i1l1912 0D5C  
                      i1l1904 0D00                        i1l1922 0F10                        i1l1914 0EDE  
                      i1l1906 0D12                        i1l1924 0F14                        i1l1916 0EE0  
                      i1l1860 0C32                        i1l1908 0D38                        i1l1918 0EF2  
                      i1l1870 0C68                        i1l1862 0C44                        i1l1950 0060  
                      i1l1942 003E                        i1l1872 0C7E                        i1l1864 0C4C  
                      i1l1960 007E                        i1l1952 0062                        i1l1944 004C  
                      i1l1874 0C86                        i1l1866 0C54                        i1l1858 0C2A  
                      i1l1970 00B0                        i1l1962 0082                        i1l1954 0066  
                      i1l1946 004E                        i1l1876 0C88                        i1l1868 0C62  
                      i1l1972 00D0                        i1l1964 0090                        i1l1956 0074  
                      i1l1948 0052                        i1l1878 0C8E                        i1l1966 009A  
                      i1l1958 0076                        i1l1968 00AC                __CFG_WDTEN$OFF 000000  
              __CFG_WINEN$OFF 000000                        _PTPERH 000F7A                  LCDPutStr@str 0017  
                      _PTPERL 000F7B                _LCDWriteNibble 0B24                __CFG_PWRTEN$ON 000000  
              __CFG_SSPMX$RC7 000000                  vfprintf@cfmt 008A           _handleTimer0Preload 0D00  
                   ??___aodiv 0022                     ??___aomod 0022                __CFG_STVREN$ON 000000  
                      _digits 3FED                     ??___lwdiv 0005                        clear_0 0D9E  
                      clear_1 0DAA                        pad@buf 0024                        dtoa@fp 002D  
                      _strlen 0FD6                     ??_display 003D   __size_of_handlePWMDutyCycle 0118  
                      fputc@c 0012                        fputs@c 001F                        fputs@i 0020  
                __pdataCOMRAM 003D                        fputs@s 001B                  __mediumconst 3D24  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
        ?_handleTimer0Preload 0001                        putch@c 0001              __end_of_vfprintf 0D00  
           _timer5ReloadValue 003F                     ??_sprintf 003D        __end_of_LCDWriteNibble 0BB2  
                  __accesstop 0060       __end_of__initialization 0DB0               __CFG_FLTAMX$RC1 000000  
                  _adcPercent 00B4                 ___rparam_used 000001               __CFG_T1OSCMX$ON 000000  
              __pcstackCOMRAM 0001                  __pidataBANK0 1046                 __end_of_tcInt 00FA  
               __end_of_fputc 0A62                  ??_LCDPutChar 0015                 __end_of_fputs 0E9E  
               __end_of_putch 104A         __end_of_handleDisplay 0F1E         ??_handleTimer0Preload 0008  
         _timer5OverflowCount 004C                       ??_tcInt 0009                       ??_fputc 0016  
                     ??_fputs 001F                       ??_putch 0012                    __pbssBANK0 00AC  
             ?_LCDWriteNibble 0012            __end_of_LCDPutChar 103C               __CFG_WDPS$32768 000000  
                     ?_strlen 0012               __CFG_PWM4MX$RB5 000000            __size_of_vfpfcnvrt 01B4  
                     i1u53_20 0890                       i1u53_21 088C                       i1u54_20 08A4  
                     i1u54_21 08A0                       i1u55_20 08B8                       i1u55_21 08B4  
                     _OVDCOND 000F6B                       _OVDCONS 000F6A                     _ADCHSbits 000F99  
             __CFG_PWMPIN$OFF 000000              ??_LCD_Initialize 0017                       __Hparam 0000  
                     __Lparam 0000                       ___aodiv 0594                       ___aomod 071C  
                     ___lwdiv 0C2A                     ?_vfprintf 0084                _prevAdcPercent 0041  
                     __pcinit 0D60                       __ramtop 0300                       __ptext0 0F9A  
                     __ptext1 0F1E                       __ptext2 0DBE                       __ptext3 0C9E  
                     __ptext4 03E0                       __ptext5 00FE                       __ptext6 0A62  
                     __ptext7 0FD6                       __ptext8 0E5A                       __ptext9 0998  
                     _display 0F1E                     _T0CONbits 000FD5               __size_of_strlen 0036  
                   _T1CONbits 000FCD                  __size_of_abs 0040                  __size_of_pad 00C2  
                   _T5CONbits 000FB7                     _LCDPutCmd 0F5C                       _sprintf 0DBE  
                   _LCDPutStr 0BB2          end_of_initialization 0DB0                       fputc@fp 0014  
               __Lmediumconst 3D24                       fputs@fp 001D             __end_of_vfpfcnvrt 0594  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc1 000FE6                       postinc2 000FDE                    ??_vfprintf 003D  
                     strlen@a 0014                       strlen@s 0012                     _PORTAbits 000F80  
                   _PORTCbits 000F82                     _PORTDbits 000F83                     _TRISAbits 000F92  
         _timer0PreloadValues 3F25                     _TRISCbits 000F94                     _TRISDbits 000F95  
                  ?_LCDPutCmd 0001                    ?_LCDPutStr 0017              __CFG_EXCLKMX$RC3 000000  
                 vfpfcnvrt@ap 003B                   vfpfcnvrt@fp 0037                    LCDPutStr@i 001B  
                 vfpfcnvrt@ll 007C    __end_of_handlePWMDutyCycle 0998                 __pidataCOMRAM 103C  
              __end_of_digits 3FF7                __end_of_strlen 100C           start_initialization 0D60  
            ??_LCDWriteNibble 0013                   __end_of_abs 0EDE                   __end_of_pad 0B24  
                 vfprintf@fmt 0086                   __pdataBANK0 00D7   __end_of_handleTimer0Preload 0D60  
                    ??_strlen 0014                   __pbssCOMRAM 0047                 __pcstackBANK0 0060  
            ___aodiv@dividend 0012                   ??_LCDPutCmd 0015                   ??_LCDPutStr 0019  
      __size_of_handleDisplay 0040              ___lwdiv@dividend 0001                     _dtoa$1353 0068  
                   _maxADCVal 00D7                 __pmediumconst 3D24                      ?___aodiv 0012  
                    ?___aomod 0012              ___aodiv@quotient 0024                      ?___lwdiv 0001  
            LCDWriteNibble@ch 0014              LCDWriteNibble@rs 0012                   __pintcodelo 0018  
           __size_of_vfprintf 0062                      ?_display 0001              ___lwdiv@quotient 0005  
                    ?_sprintf 008C                __size_of_tcInt 00E2                __size_of_fputc 00CA  
              __size_of_fputs 0044                     _dutyCycle 00AC                __size_of_putch 0002  
                    _PIE1bits 000F9D                      _PIE3bits 000FA3                      i1u120_20 0C7E  
                    i1u120_21 0C7A                      i1u121_20 0D12                      i1u121_21 0D0E  
                    i1u122_20 0EF2                      i1u122_21 0EEE                      i1u130_25 00B8  
                    i1u130_26 00BA                      i1u123_20 0F10                      i1u131_20 00CC  
                    i1u123_21 0F0C                      i1u131_21 00C6                      i1u132_20 00CE  
                    i1u125_20 004C                      i1u125_21 0048                      i1u118_20 0C44  
                    i1u126_20 0060                      i1u118_21 0C40                      i1u126_21 005C  
                    i1u119_20 0C62                      i1u127_20 0074                      i1u119_21 0C5E  
                    i1u127_21 0070                      i1u128_20 0090                      i1u128_21 008C  
                    i1u129_20 00AC                      i1u129_21 00A8                      _PIR1bits 000F9E  
                    _PIR3bits 000FA4                     _vfpfcnvrt 03E0                    _ADCON0bits 000FC2  
                  _ADCON2bits 000FC0                    _ADCON3bits 000F9A                 _handleDisplay 0EDE  
                   copy_data0 0D8C                      __Hrparam 0000                    vfprintf@ap 0088  
                    __Lrparam 0000                    vfprintf@fp 0084       __size_of_LCD_Initialize 004A  
            __size_of___aodiv 0188              __size_of___aomod 0164                    ?_vfpfcnvrt 0037  
            __size_of___lwdiv 0074                    _ANSEL0bits 000FB8               ___aodiv@divisor 001A  
              ?_handleDisplay 0001               ___aodiv@counter 0022              __size_of_display 003E  
                  sprintf@fmt 008E               ___lwdiv@divisor 0003               ___lwdiv@counter 0007  
                    __ptext10 1048                      __ptext11 0E9E                      __ptext20 0D00  
                    __ptext12 071C                      __ptext21 0C2A                      __ptext13 0594  
                    __ptext22 0880                      __ptext14 0BB2                      __ptext23 0EDE  
                    __ptext15 100C                      __ptext16 0E10                      __ptext17 0F5C  
                    __ptext18 0B24            _handlePWMDutyCycle 0880              __size_of_sprintf 0052  
               __size_of_main 003C                 __size_of_dtoa 02E2           ?_handlePWMDutyCycle 0001  
         __end_of_sinusValues 3F25                      int$flags 004E                      _vfprintf 0C9E  
                  _LCDPutChar 100C              ___aomod@dividend 0012          ??_handlePWMDutyCycle 0001  
                 _refreshTime 004B                    _INTCONbits 000FF2                 _shouldDisplay 00B6  
                    intlevel1 0000                     sprintf@ap 0094   __end_of_timer0PreloadValues 3FED  
                 _PWMCON0bits 000F6F                   _PWMCON1bits 000F6E               ___aomod@divisor 001A  
             ??_handleDisplay 0001                   ??_vfpfcnvrt 007A               ___aomod@counter 0022  
                  _PTCON0bits 000F7F                    _PTCON1bits 000F7E                      sprintf@f 0096  
                    sprintf@s 008C  __size_of_handleTimer0Preload 0060                  ___aodiv@sign 0023  
                 _sinusIndex1 004D                   _sinusIndex2 0046                   _sinusIndex3 0045  
                 _sinusValues 3D25       __size_of_LCDWriteNibble 008E                  ___aomod@sign 0023  
